{
  "doc_dump": "<documents>\r\n<document index=\"1\">\r\n<source>bin/canopy</source>\r\n<document_content>#!/usr/bin/env node\r\n\r\nconst fs   = require('fs').promises\r\nconst nopt = require('nopt')\r\n\r\nconst { basename, dirname, join, relative } = require('path')\r\nconst canopy = require('../lib/canopy')\r\n\r\nObject.assign(canopy.builders, {\r\n  js: canopy.builders.javascript,\r\n  py: canopy.builders.python,\r\n  rb: canopy.builders.ruby\r\n})\r\n\r\nconst PEG_EXT = '.peg'\r\n\r\nconst options = nopt({\r\n  lang: String,\r\n  output: String\r\n}, {\r\n  l: '--lang',\r\n  o: '--output'\r\n})\r\n\r\nfunction resolvePaths () {\r\n  let input = relative(process.cwd(), options.argv.remain[0])\r\n  let output = options.output\r\n\r\n  if (output) {\r\n    output = relative(process.cwd(), output)\r\n  } else {\r\n    output = join(dirname(input), basename(input, PEG_EXT))\r\n  }\r\n  return [input, output]\r\n}\r\n\r\nasync function main () {\r\n  let [inputPath, outputPath] = resolvePaths()\r\n\r\n  let lang  = options.lang || 'js'\r\n\r\n  if (!canopy.builders.hasOwnProperty(lang))\r\n    throw new Error('Unrecognised target language: ' + lang)\r\n\r\n  let comment = [\r\n    'This file was generated from ' + inputPath,\r\n    'See https://canopy.jcoglan.com/ for documentation'\r\n  ]\r\n\r\n  let grammar = await fs.readFile(inputPath, 'utf8'),\r\n      builder = canopy.builders[lang].create(outputPath),\r\n      buffers = canopy.compile(grammar, builder)\r\n\r\n  for (let [name, source] of buffers) {\r\n    await fs.mkdir(dirname(name), { recursive: true })\r\n    let content = builder.comment(comment).join('\\n') + '\\n\\n' + source\r\n    await fs.writeFile(name, content)\r\n  }\r\n}\r\n\r\nasync function run () {\r\n  try {\r\n    await main()\r\n  } catch (err) {\r\n    console.error(err.message)\r\n    console.error(err.stack)\r\n    process.exit(1)\r\n  }\r\n}\r\n\r\nrun()\r\n</document_content>\r\n</document>\r\n<document index=\"2\">\r\n<source>CONTRIBUTING.md</source>\r\n<document_content># Building and testing Canopy\r\n\r\nTo build and test the project, you will need to install dependencies for several\r\nlanguages. The build and test suite only requires Node.js installed, and you\r\nonly need other languages and libraries installed to run the examples for those\r\nlanguages.\r\n\r\n## Getting the source code\r\n\r\n    git clone git://github.com/jcoglan/canopy.git\r\n\r\n## Installing dependencies\r\n\r\nTo install the dependencies for the build and test suite:\r\n\r\n    npm install\r\n\r\nTo install the dependencies for the Python examples:\r\n\r\n    pipenv install\r\n\r\nTo install the dependencies for the Ruby examples (and the tools used to build\r\nthe website):\r\n\r\n    bundle install\r\n\r\n## Building the project\r\n\r\nCanopy is self-hosting, which means it contains code that was generated by its\r\nown compiler. This means that it can be tricky to build, but I've tried to\r\narrange things so that it's difficult to end up with a working copy that won't\r\nexecute.\r\n\r\nAfter cloning the repo and running `npm install` you should immediately be able\r\nto run the tests:\r\n\r\n    make test\r\n\r\nThis only tests the code in `src`, which is the canonical source code and where\r\nyou should make changes. The code in `bin` is not tested, and the code in `src`\r\nis designed not to be tied to Node but to run on any JS platform. All file I/O\r\nhappens in `bin/canopy`.\r\n\r\nIf you want to run the `bin/canopy` script to run the command-line interface,\r\nyou need to bootstrap the project, which meeans taking a copy of the last-known\r\nworking instance of the code. To do this just run:\r\n\r\n    make\r\n\r\nThis runs the tests, and if they pass, it copies all the code from `src` into\r\n`lib`. `bin/canopy` loads code from `lib`, not `src`, so the compiler should\r\nalways have working source code to use.\r\n\r\nFinally, if you want to recompile Canopy's metagrammar, i.e. the grammar that\r\ndefines how grammars are written (that's the self-hosting bit), run:\r\n\r\n    make compile\r\n\r\nYou need to have bootstrapped the project for this to work.\r\n\r\nTo regenerate the example Canopy parsers:\r\n\r\n    make java\r\n    make js\r\n    make python\r\n    make ruby\r\n\r\nTo regenerate the example PEG.js parsers:\r\n\r\n    make pegjs\r\n\r\n## Running the examples\r\n\r\nTo run the Java examples:\r\n\r\n    javac examples/JavaExample.java && java examples.JavaExample\r\n\r\nTo run the JavaScript examples:\r\n\r\n    node examples/javascript.js\r\n\r\nTo run the Python examples:\r\n\r\n    pipenv shell\r\n    py.test examples/python.py\r\n\r\nTo run the Ruby examples:\r\n\r\n    ruby examples/ruby.rb\r\n</document_content>\r\n</document>\r\n<document index=\"3\">\r\n<source>Gemfile</source>\r\n<document_content>source 'https://rubygems.org'\r\n\r\ngem 'citrus'\r\ngem 'parslet'\r\ngem 'treetop'\r\ngem 'benchmark-ips'\r\n\r\ngem 'jekyll'\r\n</document_content>\r\n</document>\r\n<document index=\"4\">\r\n<source>lib/ast/action.js</source>\r\n<document_content>'use strict'\r\n\r\nclass Action {\r\n  constructor (expression, actionName) {\r\n    this._expression = expression\r\n    this._actionName = actionName\r\n  }\r\n\r\n  *[Symbol.iterator] () {\r\n    yield this._expression\r\n  }\r\n\r\n  compile (builder, address) {\r\n    this._expression.compile(builder, address, this._actionName)\r\n  }\r\n}\r\n\r\nmodule.exports = Action\r\n</document_content>\r\n</document>\r\n<document index=\"5\">\r\n<source>lib/ast/any_char.js</source>\r\n<document_content>'use strict'\r\n\r\nclass AnyChar {\r\n  compile (builder, address, action) {\r\n    builder.if_(builder.hasChars_(), () => {\r\n      let of = builder.offset_()\r\n      builder.syntaxNode_(address, of, of + ' + 1', null, action)\r\n    }, () => {\r\n      builder.failure_(address, '<any char>')\r\n    })\r\n  }\r\n}\r\n\r\nmodule.exports = AnyChar\r\n</document_content>\r\n</document>\r\n<document index=\"6\">\r\n<source>lib/ast/char_class.js</source>\r\n<document_content>'use strict'\r\n\r\nclass CharClass {\r\n  constructor (text, regex) {\r\n    this._text = text\r\n    this.regex = regex\r\n  }\r\n\r\n  compile (builder, address, action) {\r\n    let regex = this.constName || this.regex,\r\n        chunk = builder.chunk_(1)\r\n\r\n    builder.if_(builder.regexMatch_(regex, chunk), () => {\r\n      let of = builder.offset_()\r\n      builder.syntaxNode_(address, of, of + ' + 1', null, action)\r\n    }, () => {\r\n      builder.failure_(address, this._text)\r\n    })\r\n  }\r\n}\r\n\r\nmodule.exports = CharClass\r\n</document_content>\r\n</document>\r\n<document index=\"7\">\r\n<source>lib/ast/choice.js</source>\r\n<document_content>'use strict'\r\n\r\nclass Choice {\r\n  constructor (options) {\r\n    this._options = options\r\n  }\r\n\r\n  [Symbol.iterator] () {\r\n    return this._options[Symbol.iterator]()\r\n  }\r\n\r\n  compile (builder, address) {\r\n    let startOffset = builder.localVar_('index', builder.offset_())\r\n    this._compileChoices(builder, address, 0, startOffset)\r\n  }\r\n\r\n  _compileChoices (builder, address, index, startOffset) {\r\n    if (index === this._options.length) return\r\n\r\n    this._options[index].compile(builder, address)\r\n\r\n    builder.unlessNode_(address, () => {\r\n      builder.assign_(builder.offset_(), startOffset)\r\n      this._compileChoices(builder, address, index + 1, startOffset)\r\n    })\r\n  }\r\n}\r\n\r\nmodule.exports = Choice\r\n</document_content>\r\n</document>\r\n<document index=\"8\">\r\n<source>lib/ast/extension.js</source>\r\n<document_content>'use strict'\r\n\r\nclass Extension {\r\n  constructor (expression, typeName) {\r\n    this._expression = expression\r\n    this._typeName   = typeName\r\n  }\r\n\r\n  *[Symbol.iterator] () {\r\n    yield this._expression\r\n  }\r\n\r\n  compile (builder, address) {\r\n    this._expression.compile(builder, address)\r\n\r\n    builder.ifNode_(address, () => {\r\n      builder.extendNode_(address, this._typeName)\r\n    })\r\n  }\r\n}\r\n\r\nmodule.exports = Extension\r\n</document_content>\r\n</document>\r\n<document index=\"9\">\r\n<source>lib/ast/grammar.js</source>\r\n<document_content>'use strict'\r\n\r\nclass Grammar {\r\n  constructor (name, rules) {\r\n    this._name  = name\r\n    this._rules = rules\r\n  }\r\n\r\n  [Symbol.iterator] () {\r\n    return this._rules[Symbol.iterator]()\r\n  }\r\n\r\n  compile (builder) {\r\n    let [nodeLabels, actions, regexes] = this._gatherComponents()\r\n\r\n    builder.package_(this._name, [...actions].sort(), () => {\r\n      let nodeClassName = builder.syntaxNodeClass_()\r\n\r\n      for (let [i, labels] of nodeLabels.entries())\r\n        this._compileTreeNode(builder, nodeClassName, i, labels)\r\n\r\n      builder.grammarModule_(() => {\r\n        for (let [i, regex] of regexes.entries())\r\n          builder.compileRegex_(regex, 'REGEX_' + (i + 1))\r\n\r\n        for (let rule of this._rules)\r\n          rule.compile(builder)\r\n      })\r\n\r\n      let root = this._rules[0].name\r\n      builder.parserClass_(root)\r\n    })\r\n  }\r\n\r\n  _gatherComponents () {\r\n    let nodeLabels = [],\r\n        actions    = new Set(),\r\n        regexes    = []\r\n\r\n    this._scan(this, (node) => {\r\n      let labels = node.collectLabels && node.collectLabels()\r\n      if (labels) nodeLabels.push([node, labels])\r\n\r\n      if (node._actionName) actions.add(node._actionName)\r\n\r\n      if (node.regex) regexes.push(node)\r\n    })\r\n\r\n    return [nodeLabels, actions, regexes]\r\n  }\r\n\r\n  _compileTreeNode (builder, nodeClassName, i, [node, labels]) {\r\n    let className = nodeClassName + (i + 1)\r\n    node.setNodeClassName(className)\r\n\r\n    builder.class_(className, nodeClassName, () => {\r\n      builder.attributes_(labels.keys())\r\n\r\n      builder.constructor_(['text', 'offset', 'elements'], () => {\r\n        for (let [key, offset] of labels)\r\n          builder.attribute_(key, builder.arrayLookup_('elements', offset))\r\n      })\r\n    })\r\n  }\r\n\r\n  _scan (node, callback) {\r\n    callback(node)\r\n\r\n    if (node[Symbol.iterator]) {\r\n      for (let child of node) this._scan(child, callback)\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = Grammar\r\n</document_content>\r\n</document>\r\n<document index=\"10\">\r\n<source>lib/ast/maybe.js</source>\r\n<document_content>'use strict'\r\n\r\nclass Maybe {\r\n  constructor (expression) {\r\n    this._expression = expression\r\n  }\r\n\r\n  *[Symbol.iterator] () {\r\n    yield this._expression\r\n  }\r\n\r\n  compile (builder, address) {\r\n    let startOffset = builder.localVar_('index', builder.offset_())\r\n    this._expression.compile(builder, address)\r\n\r\n    builder.unlessNode_(address, () => {\r\n      builder.syntaxNode_(address, startOffset, startOffset, null)\r\n    })\r\n  }\r\n}\r\n\r\nmodule.exports = Maybe\r\n</document_content>\r\n</document>\r\n<document index=\"11\">\r\n<source>lib/ast/predicate.js</source>\r\n<document_content>'use strict'\r\n\r\nclass Predicate {\r\n  constructor (expression, positive) {\r\n    this._expression = expression\r\n    this._positive   = positive\r\n  }\r\n\r\n  *[Symbol.iterator] () {\r\n    yield this._expression\r\n  }\r\n\r\n  compile (builder, address) {\r\n    let startOffset = builder.localVar_('index', builder.offset_()),\r\n        branch      = this._positive ? 'ifNode_' : 'unlessNode_'\r\n\r\n    this._expression.compile(builder, address)\r\n    builder.assign_(builder.offset_(), startOffset)\r\n\r\n    builder[branch](address, () => {\r\n      let of = builder.offset_()\r\n      builder.syntaxNode_(address, of, of, null)\r\n    }, () => {\r\n      builder.assign_(address, builder.nullNode_())\r\n    })\r\n  }\r\n}\r\n\r\nmodule.exports = Predicate\r\n</document_content>\r\n</document>\r\n<document index=\"12\">\r\n<source>lib/ast/reference.js</source>\r\n<document_content>'use strict'\r\n\r\nclass Reference {\r\n  constructor (name) {\r\n    this.refName = name\r\n  }\r\n\r\n  referenceName () {\r\n    return this.refName\r\n  }\r\n\r\n  compile (builder, address) {\r\n    builder.jump_(address, this.refName)\r\n  }\r\n}\r\n\r\nmodule.exports = Reference\r\n</document_content>\r\n</document>\r\n<document index=\"13\">\r\n<source>lib/ast/repeat.js</source>\r\n<document_content>'use strict'\r\n\r\nclass Repeat {\r\n  constructor (expression, range) {\r\n    this._expression = expression\r\n    this._range      = range\r\n  }\r\n\r\n  *[Symbol.iterator] () {\r\n    yield this._expression\r\n  }\r\n\r\n  compile (builder, address, action) {\r\n    let temp = builder.localVars_({\r\n          index:     builder.offset_(),\r\n          elements:  builder.emptyList_(),\r\n          address:   builder.null_()\r\n        }),\r\n\r\n        startOffset = temp.index,\r\n        elements    = temp.elements,\r\n        elAddr      = temp.address\r\n\r\n    builder.loop_(() => {\r\n      this._expression.compile(builder, elAddr)\r\n\r\n      builder.ifNode_(elAddr, () => {\r\n        builder.append_(elements, elAddr)\r\n      }, () => {\r\n        builder.break_()\r\n      })\r\n    })\r\n\r\n    builder.if_(builder.sizeInRange_(elements, this._range), () => {\r\n      builder.syntaxNode_(address, startOffset, builder.offset_(), elements, action)\r\n    }, () => {\r\n      builder.assign_(address, builder.nullNode_())\r\n    })\r\n  }\r\n}\r\n\r\nmodule.exports = Repeat\r\n</document_content>\r\n</document>\r\n<document index=\"14\">\r\n<source>lib/ast/rule.js</source>\r\n<document_content>'use strict'\r\n\r\nclass Rule {\r\n  constructor (name, expression) {\r\n    this.name        = name\r\n    this._expression = expression\r\n  }\r\n\r\n  *[Symbol.iterator] () {\r\n    yield this._expression\r\n  }\r\n\r\n  compile (builder, address) {\r\n    builder.rule_(this.name, () => {\r\n      builder.method_('_read_' + this.name, [], () => {\r\n        builder.cache_(this.name, (address) => {\r\n          this._expression.compile(builder, address)\r\n        })\r\n      })\r\n    })\r\n  }\r\n}\r\n\r\nmodule.exports = Rule\r\n</document_content>\r\n</document>\r\n<document index=\"15\">\r\n<source>lib/ast/sequence.js</source>\r\n<document_content>'use strict'\r\n\r\nclass Sequence {\r\n  constructor (parts) {\r\n    this._parts = parts\r\n  }\r\n\r\n  [Symbol.iterator] () {\r\n    return this._parts[Symbol.iterator]()\r\n  }\r\n\r\n  countUnmuted () {\r\n    return this._parts.filter((p) => !p.muted()).length\r\n  }\r\n\r\n  collectLabels () {\r\n    let labels = new Map()\r\n    let parts = this._parts.filter((p) => !p.muted())\r\n\r\n    for (let [i, part] of parts.entries()) {\r\n      for (let label of part.labels())\r\n        labels.set(label, i)\r\n    }\r\n\r\n    return (labels.size === 0) ? null : labels\r\n  }\r\n\r\n  setNodeClassName (className) {\r\n    this._nodeClassName = className\r\n  }\r\n\r\n  compile (builder, address, action) {\r\n    let temp = builder.localVars_({\r\n      index:    builder.offset_(),\r\n      elements: builder.emptyList_(this.countUnmuted())\r\n    })\r\n\r\n    let startOffset = temp.index,\r\n        elements    = temp.elements,\r\n        klass       = this._nodeClassName\r\n\r\n    this._compileExpressions(builder, 0, 0, startOffset, elements)\r\n\r\n    builder.ifNull_(elements, () => {\r\n      builder.assign_(address, builder.nullNode_())\r\n    }, () => {\r\n      builder.syntaxNode_(address, startOffset, builder.offset_(), elements, action, klass)\r\n    })\r\n  }\r\n\r\n  _compileExpressions (builder, index, elIndex, startOffset, elements) {\r\n    let expAddr = builder.localVar_('address'),\r\n        expr    = this._parts[index],\r\n        muted   = expr.muted()\r\n\r\n    expr.compile(builder, expAddr)\r\n\r\n    builder.ifNode_(expAddr, () => {\r\n      if (!muted) {\r\n        builder.append_(elements, expAddr, elIndex)\r\n        elIndex += 1\r\n      }\r\n      if (index < this._parts.length - 1) {\r\n        this._compileExpressions(builder, index + 1, elIndex, startOffset, elements)\r\n      } else if (muted) {\r\n        builder.pass_()\r\n      }\r\n    }, () => {\r\n      builder.assign_(elements, builder.null_())\r\n      builder.assign_(builder.offset_(), startOffset)\r\n    })\r\n  }\r\n}\r\n\r\nmodule.exports = Sequence\r\n</document_content>\r\n</document>\r\n<document index=\"16\">\r\n<source>lib/ast/sequence_part.js</source>\r\n<document_content>'use strict'\r\n\r\nclass SequencePart {\r\n  constructor (expression, label, muted) {\r\n    this._expression = expression\r\n    this._label      = label\r\n    this._muted      = muted\r\n  }\r\n\r\n  *[Symbol.iterator] () {\r\n    yield this._expression\r\n  }\r\n\r\n  labels () {\r\n    let labels = []\r\n    if (this._label) labels.push(this._label)\r\n    if (this._expression.refName) labels.push(this._expression.refName)\r\n    return labels\r\n  }\r\n\r\n  muted () {\r\n    return this._muted\r\n  }\r\n\r\n  compile (builder, address) {\r\n    this._expression.compile(builder, address)\r\n  }\r\n}\r\n\r\nmodule.exports = SequencePart\r\n</document_content>\r\n</document>\r\n<document index=\"17\">\r\n<source>lib/ast/string.js</source>\r\n<document_content>'use strict'\r\n\r\nclass String {\r\n  constructor (text, value, ci) {\r\n    this._text  = text\r\n    this._value = value\r\n    this._ci    = ci\r\n  }\r\n\r\n  compile (builder, address, action) {\r\n    let value  = this._value,\r\n        length = value.length,\r\n        chunk  = builder.chunk_(length)\r\n\r\n    let condition = this._ci\r\n                  ? builder.stringMatchCI_(chunk, value)\r\n                  : builder.stringMatch_(chunk, value)\r\n\r\n    builder.if_(condition, () => {\r\n      let of = builder.offset_()\r\n      builder.syntaxNode_(address, of, of + ' + ' + length, null, action)\r\n    }, () => {\r\n      builder.failure_(address, this._text)\r\n    })\r\n  }\r\n}\r\n\r\nmodule.exports = String\r\n</document_content>\r\n</document>\r\n<document index=\"18\">\r\n<source>lib/builders/base.js</source>\r\n<document_content>'use strict'\r\n\r\nconst { readFileSync } = require('fs')\r\nconst { basename, dirname, join } = require('path')\r\nconst handlebars = require('handlebars')\r\n\r\nclass Scope {\r\n  constructor (parentScope, name, parentName) {\r\n    if (name) {\r\n      this.name = name\r\n      this.parent = parentName\r\n    } else if (parentScope) {\r\n      this.name = parentScope.name\r\n      this.parent = parentScope.parent\r\n    }\r\n    this.methodSeparator = ''\r\n    this._varIndex = {}\r\n  }\r\n\r\n  varName (name) {\r\n    this._varIndex[name] = this._varIndex[name] || 0\r\n    let varName = name + this._varIndex[name]\r\n    this._varIndex[name] += 1\r\n\r\n    return varName\r\n  }\r\n}\r\n\r\nclass Base {\r\n  static create (outputPath) {\r\n    return new this(outputPath)\r\n  }\r\n\r\n  constructor (outputPath) {\r\n    this._outputPath  = outputPath\r\n    this._indentLevel = 0\r\n\r\n    this._buffers = new Map()\r\n    this._currentBuffer = null\r\n\r\n    this._stack = [new Scope()]\r\n    this._currentScope = this._stack[0]\r\n  }\r\n\r\n  serialize () {\r\n    return this._buffers\r\n  }\r\n\r\n  attributes_ (names) {}\r\n\r\n  compileRegex_ (charClass, name) {}\r\n\r\n  rule_ (name, block) {\r\n    this._ruleName = name\r\n    block()\r\n  }\r\n\r\n  assign_ (name, value) {\r\n    this._line(name + ' = ' + value)\r\n  }\r\n\r\n  pass_ () {}\r\n\r\n  _tab () {\r\n    return '  '\r\n  }\r\n\r\n  _newBuffer (ext, name = null) {\r\n    if (name) {\r\n      this._currentBuffer = join(this._outputPath, name + '.' + ext)\r\n    } else {\r\n      this._currentBuffer = join(this._outputPath + '.' + ext)\r\n    }\r\n    let buffer = this._initBuffer(this._currentBuffer)\r\n    this._buffers.set(this._currentBuffer, buffer)\r\n  }\r\n\r\n  _initBuffer (pathname) {\r\n    return ''\r\n  }\r\n\r\n  _template (lang, name, args) {\r\n    let pathname = join(__dirname, '..', '..', 'templates', lang, name),\r\n        template = handlebars.compile(readFileSync(pathname, 'utf8')),\r\n        result   = template(args).replace(/\\s*$/, '')\r\n\r\n    for (let line of result.split(/\\n/))\r\n      this._line(line, false)\r\n  }\r\n\r\n  _write (string) {\r\n    let name = this._currentBuffer\r\n    this._buffers.set(name, this._buffers.get(name) + string)\r\n  }\r\n\r\n  _indent (block) {\r\n    this._indentLevel += 1\r\n    block()\r\n    this._indentLevel -= 1\r\n  }\r\n\r\n  _scope (block, name, parentName, indent) {\r\n    let parent = this._stack[this._stack.length - 1]\r\n    let scope = new Scope(parent, name, parentName)\r\n    this._stack.push(scope)\r\n    this._currentScope = scope\r\n\r\n    if (indent !== false) {\r\n      this._indent(block)\r\n    } else {\r\n      block()\r\n    }\r\n    this._stack.pop()\r\n    this._currentScope = parent\r\n  }\r\n\r\n  _varName (name) {\r\n    return this._currentScope.varName(name)\r\n  }\r\n\r\n  _line (source, semicolon = true) {\r\n    let i = this._indentLevel\r\n\r\n    if (source.length > 0) {\r\n      while (i--) this._write(this._tab())\r\n      this._write(source)\r\n      if (semicolon) this._write(';')\r\n    }\r\n    this._newline()\r\n  }\r\n\r\n  _newline () {\r\n    this._write('\\n')\r\n  }\r\n\r\n  _return (expression) {\r\n    this._line('return ' + expression)\r\n  }\r\n}\r\n\r\nmodule.exports = Base\r\n</document_content>\r\n</document>\r\n<document index=\"19\">\r\n<source>lib/builders/java.js</source>\r\n<document_content>'use strict'\r\n\r\nconst { sep } = require('path')\r\nconst Base = require('./base')\r\n\r\nconst TYPES = {\r\n  address:    'TreeNode',\r\n  chunk:      'String',\r\n  elements:   'List<TreeNode>',\r\n  index:      'int',\r\n  max:        'int'\r\n}\r\n\r\nclass Builder extends Base {\r\n  constructor (...args) {\r\n    super(...args)\r\n    this._labels = new Set()\r\n  }\r\n\r\n  _tab () {\r\n    return '    '\r\n  }\r\n\r\n  _initBuffer (pathname) {\r\n    let namespace = pathname.split(sep)\r\n    namespace.pop()\r\n    return 'package ' + namespace.join('.') + ';\\n\\n'\r\n  }\r\n\r\n  _quote (string) {\r\n    string = string.replace(/\\\\/g, '\\\\\\\\')\r\n                   .replace(/\"/g, '\\\\\"')\r\n                   .replace(/\\x08/g, '\\\\b')\r\n                   .replace(/\\t/g, '\\\\t')\r\n                   .replace(/\\n/g, '\\\\n')\r\n                   .replace(/\\f/g, '\\\\f')\r\n                   .replace(/\\r/g, '\\\\r')\r\n\r\n    return '\"' + string + '\"'\r\n  }\r\n\r\n  comment (lines) {\r\n    lines = lines.map((line) => ' * ' + line)\r\n    return ['/**'].concat(lines).concat([' */'])\r\n  }\r\n\r\n  package_ (name, actions, block) {\r\n    this._grammarName = name\r\n\r\n    this._newBuffer('java', 'Actions')\r\n    this._template('java', 'Actions.java', { actions })\r\n\r\n    this._newBuffer('java', 'CacheRecord')\r\n    this._template('java', 'CacheRecord.java')\r\n\r\n    block()\r\n  }\r\n\r\n  syntaxNodeClass_ () {\r\n    let name = 'TreeNode'\r\n\r\n    this._newBuffer('java', name)\r\n    this._template('java', 'TreeNode.java', { name })\r\n\r\n    return name\r\n  }\r\n\r\n  grammarModule_ (block) {\r\n    this._newBuffer('java', 'Grammar')\r\n\r\n    this._line('import java.util.ArrayList')\r\n    this._line('import java.util.HashMap')\r\n    this._line('import java.util.List')\r\n    this._line('import java.util.Map')\r\n    this._line('import java.util.regex.Pattern')\r\n    this._newline()\r\n\r\n    this._line('abstract class Grammar {', false)\r\n    this._indent(() => {\r\n      this.assign_('static TreeNode ' + this.nullNode_(), 'new TreeNode()')\r\n      this._newline()\r\n\r\n      this._line('int inputSize, offset, failure')\r\n      this._line('String input')\r\n      this._line('List<String[]> expected')\r\n      this._line('Map<Label, Map<Integer, CacheRecord>> cache')\r\n      this._line('Actions actions')\r\n      this._newline()\r\n      block()\r\n    })\r\n    this._line('}', false)\r\n  }\r\n\r\n  compileRegex_ (charClass, name) {\r\n    let regex  = charClass.regex,\r\n        source = regex.source.replace(/^\\^/, '\\\\A')\r\n\r\n    this.assign_('private static Pattern ' + name, 'Pattern.compile(' + this._quote(source) + ')')\r\n    charClass.constName = name\r\n  }\r\n\r\n  parserClass_ (root) {\r\n    this._newBuffer('java', 'ParseError')\r\n    this._template('java', 'ParseError.java')\r\n\r\n    let grammar = this._quote(this._grammarName)\r\n    let name = this._grammarName.replace(/\\./g, '')\r\n    this._newBuffer('java', name)\r\n    this._template('java', 'Parser.java', { grammar, root, name })\r\n\r\n    let labels = [...this._labels].sort()\r\n\r\n    this._newBuffer('java', 'Label')\r\n    this._template('java', 'Label.java', { labels })\r\n  }\r\n\r\n  class_ (name, parent, block) {\r\n    this._newline()\r\n    this._line('class ' + name + ' extends ' + parent + ' {', false)\r\n    this._scope(block, name)\r\n    this._line('}', false)\r\n  }\r\n\r\n  constructor_ (args, block) {\r\n    this._line(this._currentScope.name + '(String text, int offset, List<TreeNode> elements) {', false)\r\n    this._indent(() => {\r\n      this._line('super(text, offset, elements)')\r\n      block()\r\n    })\r\n    this._line('}', false)\r\n  }\r\n\r\n  method_ (name, args, block) {\r\n    this._newline()\r\n    this._line('TreeNode ' + name + '() {', false)\r\n    this._scope(block)\r\n    this._line('}', false)\r\n  }\r\n\r\n  cache_ (name, block) {\r\n    this._labels.add(name)\r\n\r\n    let temp    = this.localVars_({ address: this.nullNode_(), index: 'offset' }),\r\n        address = temp.address,\r\n        offset  = temp.index\r\n\r\n    this.assign_('Map<Integer, CacheRecord> rule', 'cache.get(Label.' + name + ')')\r\n    this.if_('rule == null', () => {\r\n      this.assign_('rule', 'new HashMap<Integer, CacheRecord>()')\r\n      this._line('cache.put(Label.' + name + ', rule)')\r\n    })\r\n    this.if_('rule.containsKey(offset)', () => {\r\n      this.assign_(address, 'rule.get(offset).node')\r\n      this.assign_('offset', 'rule.get(offset).tail')\r\n    }, () => {\r\n      block(address)\r\n      this._line('rule.put(' + offset + ', new CacheRecord(' + address + ', offset))')\r\n    })\r\n    this._return(address)\r\n  }\r\n\r\n  attribute_ (name, value) {\r\n    this._labels.add(name)\r\n    this._line('labelled.put(Label.' + name + ', ' + value + ')')\r\n  }\r\n\r\n  localVars_ (vars) {\r\n    let names = {}\r\n    for (let name in vars)\r\n      names[name] = this.localVar_(name, vars[name])\r\n    return names\r\n  }\r\n\r\n  localVar_ (name, value) {\r\n    let varName = this._varName(name)\r\n\r\n    if (value === undefined) value = this.nullNode_()\r\n    this.assign_(TYPES[name] + ' ' + varName, value)\r\n\r\n    return varName\r\n  }\r\n\r\n  chunk_ (length) {\r\n    let input = 'input',\r\n        ofs   = 'offset',\r\n        temp  = this.localVars_({ chunk: this.null_(), max: ofs + ' + ' + length })\r\n\r\n    this.if_(temp.max + ' <= inputSize', () => {\r\n      this._line(temp.chunk + ' = ' + input + '.substring(' + ofs + ', ' + temp.max + ')')\r\n    })\r\n    return temp.chunk\r\n  }\r\n\r\n  syntaxNode_ (address, start, end, elements, action, nodeClass) {\r\n    let args\r\n\r\n    if (action) {\r\n      action = 'actions.' + action\r\n      args   = ['input', start, end]\r\n    } else {\r\n      action = 'new ' + (nodeClass || 'TreeNode')\r\n      args   = ['input.substring(' + start + ', ' + end + ')', start]\r\n    }\r\n    args.push(elements || this.emptyList_())\r\n\r\n    this.assign_(address, action + '(' + args.join(', ') + ')')\r\n    this.assign_('offset', end)\r\n  }\r\n\r\n  ifNode_ (address, block, else_) {\r\n    this.if_(address + ' != ' + this.nullNode_(), block, else_)\r\n  }\r\n\r\n  unlessNode_ (address, block, else_) {\r\n    this.if_(address + ' == ' + this.nullNode_(), block, else_)\r\n  }\r\n\r\n  ifNull_ (elements, block, else_) {\r\n    this.if_(elements + ' == null', block, else_)\r\n  }\r\n\r\n  extendNode_ (address, nodeType) {\r\n    // TODO\r\n  }\r\n\r\n  failure_ (address, expected) {\r\n    let rule = this._quote(this._grammarName + '::' + this._ruleName)\r\n    expected = this._quote(expected)\r\n\r\n    this.assign_(address, this.nullNode_())\r\n\r\n    this.if_('offset > failure', () => {\r\n      this.assign_('failure', 'offset')\r\n      this.assign_('expected', 'new ArrayList<String[]>()')\r\n    })\r\n    this.if_('offset == failure', () => {\r\n      this.append_('expected', 'new String[] { ' + rule + ', ' + expected + ' }')\r\n    })\r\n  }\r\n\r\n  jump_ (address, rule) {\r\n    this.assign_(address, '_read_' + rule + '()')\r\n  }\r\n\r\n  _conditional (kwd, condition, block, else_) {\r\n    this._line(kwd + ' (' + condition + ') {', false)\r\n    this._indent(block)\r\n    if (else_) {\r\n      this._line('} else {', false)\r\n      this._indent(else_)\r\n    }\r\n    this._line('}', false)\r\n  }\r\n\r\n  if_ (condition, block, else_) {\r\n    this._conditional('if', condition, block, else_)\r\n  }\r\n\r\n  loop_ (block) {\r\n    this._conditional('while', 'true', block)\r\n  }\r\n\r\n  break_ () {\r\n    this._line('break')\r\n  }\r\n\r\n  sizeInRange_ (address, [min, max]) {\r\n    if (max === -1) {\r\n      return address + '.size() >= ' + min\r\n    } else if (max === 0) {\r\n      return address + '.size() == ' + min\r\n    } else {\r\n      return address + '.size() >= ' + min + ' && ' + address + '.size() <= ' + max\r\n    }\r\n  }\r\n\r\n  stringMatch_ (expression, string) {\r\n    return expression + ' != null && ' + expression + '.equals(' + this._quote(string) + ')'\r\n  }\r\n\r\n  stringMatchCI_ (expression, string) {\r\n    return expression + ' != null && ' + expression + '.toLowerCase().equals(' + this._quote(string) + '.toLowerCase())'\r\n  }\r\n\r\n  regexMatch_ (regex, string) {\r\n    return string + ' != null && ' + regex + '.matcher(' + string + ').matches()'\r\n  }\r\n\r\n  arrayLookup_ (expression, offset) {\r\n    return expression + '.get(' + offset + ')'\r\n  }\r\n\r\n  append_ (list, value, index) {\r\n    if (index === undefined)\r\n      this._line(list + '.add(' + value + ')')\r\n    else\r\n      this._line(list + '.add(' + index + ', ' + value + ')')\r\n  }\r\n\r\n  hasChars_ () {\r\n    return 'offset < inputSize'\r\n  }\r\n\r\n  nullNode_ () {\r\n    return 'FAILURE'\r\n  }\r\n\r\n  offset_ () {\r\n    return 'offset'\r\n  }\r\n\r\n  emptyList_ (size) {\r\n    return 'new ArrayList<TreeNode>(' + (size || '') + ')'\r\n  }\r\n\r\n  _emptyString () {\r\n    return '\"\"'\r\n  }\r\n\r\n  null_ () {\r\n    return 'null'\r\n  }\r\n}\r\n\r\nmodule.exports = Builder\r\n</document_content>\r\n</document>\r\n<document index=\"20\">\r\n<source>lib/builders/python.js</source>\r\n<document_content>'use strict'\r\n\r\nconst Base = require('./base')\r\n\r\nclass Builder extends Base {\r\n  _tab () {\r\n    return '    '\r\n  }\r\n\r\n  _line (source) {\r\n    super._line(source, false)\r\n  }\r\n\r\n  _quote (string) {\r\n    string = string.replace(/\\\\/g, '\\\\\\\\')\r\n                   .replace(/'/g, \"\\\\'\")\r\n                   .replace(/\\x07/g, '\\\\a')\r\n                   .replace(/\\x08/g, '\\\\b')\r\n                   .replace(/\\t/g, '\\\\t')\r\n                   .replace(/\\n/g, '\\\\n')\r\n                   .replace(/\\v/g, '\\\\v')\r\n                   .replace(/\\f/g, '\\\\f')\r\n                   .replace(/\\r/g, '\\\\r')\r\n                   .replace(/\\x1b/g, '\\\\e')\r\n\r\n    return \"'\" + string + \"'\"\r\n  }\r\n\r\n  comment (lines) {\r\n    return lines.map((line) => '# ' + line)\r\n  }\r\n\r\n  package_ (name, actions, block) {\r\n    this._grammarName = name\r\n    this._newBuffer('py')\r\n    \r\n    this._line('from collections import defaultdict')\r\n    this._line('import re')\r\n    this._newline()\r\n    this._newline()\r\n    block()\r\n  }\r\n\r\n  syntaxNodeClass_ () {\r\n    let name = 'TreeNode'\r\n\r\n    this._template('python', 'tree_node.py', { name })\r\n    this._newline()\r\n    this._newline()\r\n\r\n    return name\r\n  }\r\n\r\n  grammarModule_ (block) {\r\n    this.assign_(this.nullNode_(), 'object()')\r\n    this._newline()\r\n    this._newline()\r\n    this.class_('Grammar', 'object', block)\r\n  }\r\n\r\n  compileRegex_ (charClass, name) {\r\n    let regex = charClass.regex\r\n    this.assign_(name, 're.compile(' + this._quote(regex.source) + ')')\r\n    charClass.constName = name\r\n    this._currentScope.methodSeparator = '\\n'\r\n  }\r\n\r\n  parserClass_ (root) {\r\n    let grammar = this._quote(this._grammarName)\r\n    this._template('python', 'parser.py', { grammar, root })\r\n  }\r\n\r\n  class_ (name, parent, block) {\r\n    this._line('class ' + name + '(' + parent + '):')\r\n    this._scope(block, name, parent)\r\n    this._newline()\r\n    this._newline()\r\n  }\r\n\r\n  constructor_ (args, block) {\r\n    this.method_('__init__', args, () => {\r\n      this._line('super(' + this._currentScope.name + ', self).__init__(' + args.join(', ') + ')')\r\n      block()\r\n    })\r\n  }\r\n\r\n  method_ (name, args, block) {\r\n    this._write(this._currentScope.methodSeparator)\r\n    this._currentScope.methodSeparator = '\\n'\r\n    args = ['self'].concat(args).join(', ')\r\n    this._line('def ' + name + '(' + args + '):')\r\n    this._scope(block)\r\n  }\r\n\r\n  cache_ (name, block) {\r\n    let temp      = this.localVars_({ address: this.nullNode_(), index: 'self._offset' }),\r\n        address   = temp.address,\r\n        offset    = temp.index,\r\n        cacheMap  = \"self._cache['\" + name + \"']\",\r\n        cacheAddr = cacheMap + '[' + offset + ']'\r\n\r\n    this.assign_('cached', cacheMap + '.get(' + offset + ')')\r\n\r\n    this.if_('cached', () => {\r\n      this.assign_('self._offset', 'cached[1]')\r\n      this._return('cached[0]')\r\n    })\r\n\r\n    block(address)\r\n    this.assign_(cacheAddr, '(' + address + ', self._offset)')\r\n    this._return(address)\r\n  }\r\n\r\n  attribute_ (name, value) {\r\n    this.assign_('self.' + name, value)\r\n  }\r\n\r\n  localVars_ (vars) {\r\n    let names = {}, lhs = [], rhs = []\r\n    for (let name in vars) {\r\n      let varName = this._varName(name)\r\n      lhs.push(varName)\r\n      rhs.push(vars[name])\r\n      names[name] = varName\r\n    }\r\n    this.assign_(lhs.join(', '), rhs.join(', '))\r\n    return names\r\n  }\r\n\r\n  localVar_ (name, value) {\r\n    let varName = this._varName(name)\r\n\r\n    if (value === undefined) value = this.nullNode_()\r\n    this.assign_(varName, value)\r\n\r\n    return varName\r\n  }\r\n\r\n  chunk_ (length) {\r\n    let input = 'self._input',\r\n        ofs   = 'self._offset',\r\n        temp  = this.localVars_({ chunk: this.null_(), max: ofs + ' + ' + length })\r\n\r\n    this.if_(temp.max + ' <= self._input_size', () => {\r\n      this.assign_(temp.chunk, input + '[' + ofs + ':' + temp.max + ']')\r\n    })\r\n    return temp.chunk\r\n  }\r\n\r\n  syntaxNode_ (address, start, end, elements, action, nodeClass) {\r\n    let args\r\n\r\n    if (action) {\r\n      action = 'self._actions.' + action\r\n      args   = ['self._input', start, end]\r\n    } else {\r\n      action = nodeClass || 'TreeNode'\r\n      args   = ['self._input[' + start + ':' + end + ']', start]\r\n    }\r\n    args.push(elements || this.emptyList_())\r\n\r\n    this.assign_(address, action + '(' + args.join(', ') + ')')\r\n    this.assign_('self._offset', end)\r\n  }\r\n\r\n  ifNode_ (address, block, else_) {\r\n    this.if_(address + ' is not ' + this.nullNode_(), block, else_)\r\n  }\r\n\r\n  unlessNode_ (address, block, else_) {\r\n    this.if_(address + ' is ' + this.nullNode_(), block, else_)\r\n  }\r\n\r\n  ifNull_ (elements, block, else_) {\r\n    this.if_(elements + ' is None', block, else_)\r\n  }\r\n\r\n  extendNode_ (address, nodeType) {\r\n    let cls = this.localVar_('cls', 'type(' + address + ')')\r\n    this.assign_(address + '.__class__', \"type(\" + cls + \".__name__ + '\" + nodeType + \"', (\" + cls + \", self._types.\" + nodeType + \"), {})\")\r\n  }\r\n\r\n  failure_ (address, expected) {\r\n    let rule = this._quote(this._grammarName + '::' + this._ruleName)\r\n    expected = this._quote(expected)\r\n\r\n    this.assign_(address, this.nullNode_())\r\n\r\n    this.if_('self._offset > self._failure', () => {\r\n      this.assign_('self._failure', 'self._offset')\r\n      this.assign_('self._expected', '[]')\r\n    })\r\n    this.if_('self._offset == self._failure', () => {\r\n      this.append_('self._expected', '(' + rule + ', ' + expected + ')')\r\n    })\r\n  }\r\n\r\n  jump_ (address, name) {\r\n    this.assign_(address, 'self._read_' + name + '()')\r\n  }\r\n\r\n  _conditional (kwd, condition, block, else_) {\r\n    this._line(kwd + ' ' + condition + ':')\r\n    this._indent(block)\r\n    if (else_) {\r\n      this._line('else:')\r\n      this._indent(else_)\r\n    }\r\n  }\r\n\r\n  if_ (condition, block, else_) {\r\n    this._conditional('if', condition, block, else_)\r\n  }\r\n\r\n  loop_ (block) {\r\n    this._conditional('while', 'True', block)\r\n  }\r\n\r\n  break_ () {\r\n    this._line('break')\r\n  }\r\n\r\n  pass_ () {\r\n    this._line('pass')\r\n  }\r\n\r\n  sizeInRange_ (address, [min, max]) {\r\n    if (max === -1) {\r\n      return 'len(' + address + ') >= ' + min\r\n    } else if (max === 0) {\r\n      return 'len(' + address + ') == ' + min\r\n    } else {\r\n      return 'len(' + address + ') >= ' + min + ' and len(' + address + ') <= ' + max\r\n    }\r\n  }\r\n\r\n  stringMatch_ (expression, string) {\r\n    return expression + ' == ' + this._quote(string)\r\n  }\r\n\r\n  stringMatchCI_ (expression, string) {\r\n    return expression + ' is not None and ' +\r\n      expression + '.lower() == ' + this._quote(string) + '.lower()'\r\n  }\r\n\r\n  regexMatch_ (regex, string) {\r\n    return string + ' is not None and Grammar.' + regex + '.search(' + string + ')'\r\n  }\r\n\r\n  arrayLookup_ (expression, index) {\r\n    return expression + '[' + index + ']'\r\n  }\r\n\r\n  append_ (list, value) {\r\n    this._line(list + '.append(' + value + ')')\r\n  }\r\n\r\n  hasChars_ () {\r\n    return 'self._offset < self._input_size'\r\n  }\r\n\r\n  nullNode_ () {\r\n    return 'FAILURE'\r\n  }\r\n\r\n  offset_ () {\r\n    return 'self._offset'\r\n  }\r\n\r\n  emptyList_ () {\r\n    return '[]'\r\n  }\r\n\r\n  _emptyString () {\r\n    return \"''\"\r\n  }\r\n\r\n  null_ () {\r\n    return 'None'\r\n  }\r\n}\r\n\r\nmodule.exports = Builder\r\n</document_content>\r\n</document>\r\n<document index=\"21\">\r\n<source>lib/canopy.js</source>\r\n<document_content>'use strict'\r\n\r\nconst Compiler = require('./compiler')\r\n\r\nmodule.exports = {\r\n  builders: {\r\n    java:       require('./builders/java'),\r\n    javascript: require('./builders/javascript'),\r\n    python:     require('./builders/python'),\r\n    ruby:       require('./builders/ruby')\r\n  },\r\n\r\n  compile (grammar, builder) {\r\n    let compiler = new Compiler(grammar, builder)\r\n    return compiler.toSource()\r\n  }\r\n}\r\n</document_content>\r\n</document>\r\n<document index=\"22\">\r\n<source>lib/compiler.js</source>\r\n<document_content>'use strict'\r\n\r\nconst metagrammar = require('./meta_grammar')\r\n\r\nconst Grammar      = require('./ast/grammar'),\r\n      Rule         = require('./ast/rule'),\r\n      Choice       = require('./ast/choice'),\r\n      Extension    = require('./ast/extension'),\r\n      Action       = require('./ast/action'),\r\n      Sequence     = require('./ast/sequence'),\r\n      SequencePart = require('./ast/sequence_part'),\r\n      Predicate    = require('./ast/predicate'),\r\n      Repeat       = require('./ast/repeat'),\r\n      Maybe        = require('./ast/maybe'),\r\n      Reference    = require('./ast/reference'),\r\n      String       = require('./ast/string'),\r\n      CharClass    = require('./ast/char_class'),\r\n      AnyChar      = require('./ast/any_char')\r\n\r\nconst actions = {\r\n  grammar (text, a, b, [_, name, rules]) {\r\n    rules = rules.elements.map((e) => e.rule)\r\n    return new Grammar(name.id.text, rules)\r\n  },\r\n\r\n  rule (text, a, b, [name, _, body]) {\r\n    return new Rule(name.text, body)\r\n  },\r\n\r\n  paren_expr (text, a, b, [_, __, expr]) {\r\n    return expr\r\n  },\r\n\r\n  choice (text, a, b, [first, rest]) {\r\n    let parts = [first].concat(rest.elements.map((e) => e.expr))\r\n    return new Choice(parts)\r\n  },\r\n\r\n  extension (text, a, b, [expression, _, typeTag]) {\r\n    return new Extension(expression, typeTag.id.text)\r\n  },\r\n\r\n  action (text, a, b, [root, _, name]) {\r\n    let actionName = name.id.text\r\n\r\n    if (root instanceof Maybe)\r\n      return new Maybe(new Action(root._expression, actionName))\r\n    else\r\n      return new Action(root, actionName)\r\n  },\r\n\r\n  sequence (text, a, b, [first, rest]) {\r\n    let parts = [first].concat(rest.elements.map((e) => e.expr))\r\n    return new Sequence(parts)\r\n  },\r\n\r\n  sequence_part (text, a, b, [muted, label, expr]) {\r\n    muted = muted.text !== ''\r\n    label = label.id\r\n\r\n    return new SequencePart(expr, label && label.text, muted)\r\n  },\r\n\r\n  predicate (text, a, b, [pred, _, expr]) {\r\n    let polarities = { '&': true, '!': false }\r\n    return new Predicate(expr, polarities[pred.text])\r\n  },\r\n\r\n  repeat (text, a, b, [expr, _, quant]) {\r\n    let count\r\n    let range = quant.numeric_quantifier\r\n\r\n    if (quant.text === '*') {\r\n      count = [0, -1]\r\n    } else if (quant.text === '+') {\r\n      count = [1, -1]\r\n    } else if (range.max.text === '') {\r\n      count = [parseInt(range.min.text, 10), 0]\r\n    } else if (range.max.n.text === '') {\r\n      count = [parseInt(range.min.text, 10), -1]\r\n    } else {\r\n      count = [parseInt(range.min.text, 10), parseInt(range.max.n.text, 10)]\r\n    }\r\n    return new Repeat(expr, count)\r\n  },\r\n\r\n  maybe (text, a, b, [expr]) {\r\n    return new Maybe(expr)\r\n  },\r\n\r\n  reference (text, a, b, [expr]) {\r\n    return new Reference(expr.text)\r\n  },\r\n\r\n  string (text, a, b, elements) {\r\n    text = text.substring(a, b)\r\n    let value = eval(text)\r\n\r\n    return new String(text, value, false)\r\n  },\r\n\r\n  ci_string (text, a, b, [_, string]) {\r\n    text = text.substring(a, b)\r\n    let value = eval('\"' + string.text + '\"')\r\n\r\n    return new String(text, value, true)\r\n  },\r\n\r\n  char_class (text, a, b, elements) {\r\n    text = text.substring(a, b)\r\n    return new CharClass(text, new RegExp('^' + text))\r\n  },\r\n\r\n  any_char (text, a, b, elements) {\r\n    return new AnyChar()\r\n  }\r\n}\r\n\r\nclass Compiler {\r\n  constructor (grammarText, builder) {\r\n    this._grammarText = grammarText\r\n    this._builder = builder\r\n  }\r\n\r\n  parseTree () {\r\n    if (this._tree) return this._tree\r\n\r\n    this._tree = metagrammar.parse(this._grammarText, {actions: actions})\r\n    if (this._tree) return this._tree\r\n\r\n    let message = metagrammar.formatError(metagrammar.Parser.lastError)\r\n    throw new Error(message)\r\n  }\r\n\r\n  toSource () {\r\n    this.parseTree().compile(this._builder)\r\n    return this._builder.serialize()\r\n  }\r\n}\r\n\r\nmodule.exports = Compiler\r\n</document_content>\r\n</document>\r\n<document index=\"23\">\r\n<source>lib/meta_grammar.peg</source>\r\n<document_content>grammar Canopy.MetaGrammar\r\n\r\n# ==============================================================================\r\n\r\ngrammar               <-  _* grammar_name (_* rule)+ _* %grammar\r\n\r\ngrammar_name          <-  `grammar` \":\"? _+ id:object_identifier\r\n\r\nrule                  <-  identifier assignment parsing_expression %rule\r\n\r\nassignment            <-  _+ \"<-\" _+\r\n\r\n# ==============================================================================\r\n\r\n_                     <-  [ \\t\\n\\r] / comment\r\n\r\ncomment               <-  \"#\" [^\\n]*\r\n\r\nobject_identifier     <-  identifier (\".\" identifier)*\r\n\r\nidentifier            <-  [a-zA-Z_] [a-zA-Z0-9_]*\r\n\r\ninteger               <-  [1-9] [0-9]*\r\n\r\n# ==============================================================================\r\n\r\nparsing_expression    <-  choice\r\n                       /  choice_part\r\n\r\nchoice_part           <-  action_expression\r\n                       /  typed_expression\r\n                       /  sequence\r\n                       /  sequence_element\r\n\r\nsequence_element      <-  predicated_atom\r\n                       /  repeated_atom\r\n                       /  maybe_atom\r\n                       /  atom\r\n\r\natom                  <-  reference\r\n                       /  terminal\r\n                       /  paren_expression\r\n\r\nterminal              <-  literal_string\r\n                       /  ci_string\r\n                       /  char_class\r\n                       /  any_char\r\n\r\n# ==============================================================================\r\n\r\naction_expression     <-  actionable _+ action_tag %action\r\n\r\nactionable            <-  sequence\r\n                       /  repeated_atom\r\n                       /  maybe_atom\r\n                       /  terminal\r\n                       /  \"(\" _* actionable _* \")\" %paren_expr\r\n\r\naction_tag            <-  \"%\" id:identifier\r\n\r\n# ==============================================================================\r\n\r\ntyped_expression      <-  typable _+ type_tag %extension\r\n\r\ntypable               <-  sequence\r\n                       /  sequence_element\r\n\r\ntype_tag              <-  \"<\" id:object_identifier \">\"\r\n\r\n# ==============================================================================\r\n\r\nchoice                <-  choice_part (_* \"/\" _* expr:choice_part)+ %choice\r\n\r\n# ==============================================================================\r\n\r\nsequence              <-  sequence_part (_+ expr:sequence_part)+ %sequence\r\n\r\nsequence_part         <-  mute? label? sequence_element %sequence_part\r\n\r\nmute                  <-  \"@\"\r\n\r\nlabel                 <-  id:identifier \":\"\r\n\r\n# ==============================================================================\r\n\r\nrepeated_atom         <-  atom _* quantifier %repeat\r\n\r\nquantifier            <-  \"*\" / \"+\" / \"{\" _* numeric_quantifier _* \"}\"\r\n\r\nnumeric_quantifier    <-  min:integer max:(_* \",\" _* n:integer?)?\r\n\r\n# ==============================================================================\r\n\r\nparen_expression      <-  \"(\" _* parsing_expression _* \")\" %paren_expr\r\n\r\npredicated_atom       <-  (\"&\" / \"!\") _* atom %predicate\r\n\r\nmaybe_atom            <-  atom _* \"?\" %maybe\r\n\r\nreference             <-  identifier !assignment %reference\r\n\r\nliteral_string        <-  '\"' (\"\\\\\" . / [^\"])* '\"' %string\r\n                       /  \"'\" (\"\\\\\" . / [^'])* \"'\" %string\r\n\r\nci_string             <-  \"`\" (\"\\\\\" . / [^`])* \"`\" %ci_string\r\n\r\nchar_class            <-  \"[\" \"^\"? (\"\\\\\" . / [^\\]])+ \"]\" %char_class\r\n\r\nany_char              <-  \".\" %any_char\r\n</document_content>\r\n</document>\r\n<document index=\"24\">\r\n<source>LICENSE.md</source>\r\n<document_content>Mozilla Public License Version 2.0\r\n==================================\r\n\r\n1. Definitions\r\n--------------\r\n\r\n1.1. \"Contributor\"\r\n    means each individual or legal entity that creates, contributes to\r\n    the creation of, or owns Covered Software.\r\n\r\n1.2. \"Contributor Version\"\r\n    means the combination of the Contributions of others (if any) used\r\n    by a Contributor and that particular Contributor's Contribution.\r\n\r\n1.3. \"Contribution\"\r\n    means Covered Software of a particular Contributor.\r\n\r\n1.4. \"Covered Software\"\r\n    means Source Code Form to which the initial Contributor has attached\r\n    the notice in Exhibit A, the Executable Form of such Source Code\r\n    Form, and Modifications of such Source Code Form, in each case\r\n    including portions thereof.\r\n\r\n1.5. \"Incompatible With Secondary Licenses\"\r\n    means\r\n\r\n    (a) that the initial Contributor has attached the notice described\r\n        in Exhibit B to the Covered Software; or\r\n\r\n    (b) that the Covered Software was made available under the terms of\r\n        version 1.1 or earlier of the License, but not also under the\r\n        terms of a Secondary License.\r\n\r\n1.6. \"Executable Form\"\r\n    means any form of the work other than Source Code Form.\r\n\r\n1.7. \"Larger Work\"\r\n    means a work that combines Covered Software with other material, in \r\n    a separate file or files, that is not Covered Software.\r\n\r\n1.8. \"License\"\r\n    means this document.\r\n\r\n1.9. \"Licensable\"\r\n    means having the right to grant, to the maximum extent possible,\r\n    whether at the time of the initial grant or subsequently, any and\r\n    all of the rights conveyed by this License.\r\n\r\n1.10. \"Modifications\"\r\n    means any of the following:\r\n\r\n    (a) any file in Source Code Form that results from an addition to,\r\n        deletion from, or modification of the contents of Covered\r\n        Software; or\r\n\r\n    (b) any new file in Source Code Form that contains any Covered\r\n        Software.\r\n\r\n1.11. \"Patent Claims\" of a Contributor\r\n    means any patent claim(s), including without limitation, method,\r\n    process, and apparatus claims, in any patent Licensable by such\r\n    Contributor that would be infringed, but for the grant of the\r\n    License, by the making, using, selling, offering for sale, having\r\n    made, import, or transfer of either its Contributions or its\r\n    Contributor Version.\r\n\r\n1.12. \"Secondary License\"\r\n    means either the GNU General Public License, Version 2.0, the GNU\r\n    Lesser General Public License, Version 2.1, the GNU Affero General\r\n    Public License, Version 3.0, or any later versions of those\r\n    licenses.\r\n\r\n1.13. \"Source Code Form\"\r\n    means the form of the work preferred for making modifications.\r\n\r\n1.14. \"You\" (or \"Your\")\r\n    means an individual or a legal entity exercising rights under this\r\n    License. For legal entities, \"You\" includes any entity that\r\n    controls, is controlled by, or is under common control with You. For\r\n    purposes of this definition, \"control\" means (a) the power, direct\r\n    or indirect, to cause the direction or management of such entity,\r\n    whether by contract or otherwise, or (b) ownership of more than\r\n    fifty percent (50%) of the outstanding shares or beneficial\r\n    ownership of such entity.\r\n\r\n2. License Grants and Conditions\r\n--------------------------------\r\n\r\n2.1. Grants\r\n\r\nEach Contributor hereby grants You a world-wide, royalty-free,\r\nnon-exclusive license:\r\n\r\n(a) under intellectual property rights (other than patent or trademark)\r\n    Licensable by such Contributor to use, reproduce, make available,\r\n    modify, display, perform, distribute, and otherwise exploit its\r\n    Contributions, either on an unmodified basis, with Modifications, or\r\n    as part of a Larger Work; and\r\n\r\n(b) under Patent Claims of such Contributor to make, use, sell, offer\r\n    for sale, have made, import, and otherwise transfer either its\r\n    Contributions or its Contributor Version.\r\n\r\n2.2. Effective Date\r\n\r\nThe licenses granted in Section 2.1 with respect to any Contribution\r\nbecome effective for each Contribution on the date the Contributor first\r\ndistributes such Contribution.\r\n\r\n2.3. Limitations on Grant Scope\r\n\r\nThe licenses granted in this Section 2 are the only rights granted under\r\nthis License. No additional rights or licenses will be implied from the\r\ndistribution or licensing of Covered Software under this License.\r\nNotwithstanding Section 2.1(b) above, no patent license is granted by a\r\nContributor:\r\n\r\n(a) for any code that a Contributor has removed from Covered Software;\r\n    or\r\n\r\n(b) for infringements caused by: (i) Your and any other third party's\r\n    modifications of Covered Software, or (ii) the combination of its\r\n    Contributions with other software (except as part of its Contributor\r\n    Version); or\r\n\r\n(c) under Patent Claims infringed by Covered Software in the absence of\r\n    its Contributions.\r\n\r\nThis License does not grant any rights in the trademarks, service marks,\r\nor logos of any Contributor (except as may be necessary to comply with\r\nthe notice requirements in Section 3.4).\r\n\r\n2.4. Subsequent Licenses\r\n\r\nNo Contributor makes additional grants as a result of Your choice to\r\ndistribute the Covered Software under a subsequent version of this\r\nLicense (see Section 10.2) or under the terms of a Secondary License (if\r\npermitted under the terms of Section 3.3).\r\n\r\n2.5. Representation\r\n\r\nEach Contributor represents that the Contributor believes its\r\nContributions are its original creation(s) or it has sufficient rights\r\nto grant the rights to its Contributions conveyed by this License.\r\n\r\n2.6. Fair Use\r\n\r\nThis License is not intended to limit any rights You have under\r\napplicable copyright doctrines of fair use, fair dealing, or other\r\nequivalents.\r\n\r\n2.7. Conditions\r\n\r\nSections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted\r\nin Section 2.1.\r\n\r\n3. Responsibilities\r\n-------------------\r\n\r\n3.1. Distribution of Source Form\r\n\r\nAll distribution of Covered Software in Source Code Form, including any\r\nModifications that You create or to which You contribute, must be under\r\nthe terms of this License. You must inform recipients that the Source\r\nCode Form of the Covered Software is governed by the terms of this\r\nLicense, and how they can obtain a copy of this License. You may not\r\nattempt to alter or restrict the recipients' rights in the Source Code\r\nForm.\r\n\r\n3.2. Distribution of Executable Form\r\n\r\nIf You distribute Covered Software in Executable Form then:\r\n\r\n(a) such Covered Software must also be made available in Source Code\r\n    Form, as described in Section 3.1, and You must inform recipients of\r\n    the Executable Form how they can obtain a copy of such Source Code\r\n    Form by reasonable means in a timely manner, at a charge no more\r\n    than the cost of distribution to the recipient; and\r\n\r\n(b) You may distribute such Executable Form under the terms of this\r\n    License, or sublicense it under different terms, provided that the\r\n    license for the Executable Form does not attempt to limit or alter\r\n    the recipients' rights in the Source Code Form under this License.\r\n\r\n3.3. Distribution of a Larger Work\r\n\r\nYou may create and distribute a Larger Work under terms of Your choice,\r\nprovided that You also comply with the requirements of this License for\r\nthe Covered Software. If the Larger Work is a combination of Covered\r\nSoftware with a work governed by one or more Secondary Licenses, and the\r\nCovered Software is not Incompatible With Secondary Licenses, this\r\nLicense permits You to additionally distribute such Covered Software\r\nunder the terms of such Secondary License(s), so that the recipient of\r\nthe Larger Work may, at their option, further distribute the Covered\r\nSoftware under the terms of either this License or such Secondary\r\nLicense(s).\r\n\r\n3.4. Notices\r\n\r\nYou may not remove or alter the substance of any license notices\r\n(including copyright notices, patent notices, disclaimers of warranty,\r\nor limitations of liability) contained within the Source Code Form of\r\nthe Covered Software, except that You may alter any license notices to\r\nthe extent required to remedy known factual inaccuracies.\r\n\r\n3.5. Application of Additional Terms\r\n\r\nYou may choose to offer, and to charge a fee for, warranty, support,\r\nindemnity or liability obligations to one or more recipients of Covered\r\nSoftware. However, You may do so only on Your own behalf, and not on\r\nbehalf of any Contributor. You must make it absolutely clear that any\r\nsuch warranty, support, indemnity, or liability obligation is offered by\r\nYou alone, and You hereby agree to indemnify every Contributor for any\r\nliability incurred by such Contributor as a result of warranty, support,\r\nindemnity or liability terms You offer. You may include additional\r\ndisclaimers of warranty and limitations of liability specific to any\r\njurisdiction.\r\n\r\n4. Inability to Comply Due to Statute or Regulation\r\n---------------------------------------------------\r\n\r\nIf it is impossible for You to comply with any of the terms of this\r\nLicense with respect to some or all of the Covered Software due to\r\nstatute, judicial order, or regulation then You must: (a) comply with\r\nthe terms of this License to the maximum extent possible; and (b)\r\ndescribe the limitations and the code they affect. Such description must\r\nbe placed in a text file included with all distributions of the Covered\r\nSoftware under this License. Except to the extent prohibited by statute\r\nor regulation, such description must be sufficiently detailed for a\r\nrecipient of ordinary skill to be able to understand it.\r\n\r\n5. Termination\r\n--------------\r\n\r\n5.1. The rights granted under this License will terminate automatically\r\nif You fail to comply with any of its terms. However, if You become\r\ncompliant, then the rights granted under this License from a particular\r\nContributor are reinstated (a) provisionally, unless and until such\r\nContributor explicitly and finally terminates Your grants, and (b) on an\r\nongoing basis, if such Contributor fails to notify You of the\r\nnon-compliance by some reasonable means prior to 60 days after You have\r\ncome back into compliance. Moreover, Your grants from a particular\r\nContributor are reinstated on an ongoing basis if such Contributor\r\nnotifies You of the non-compliance by some reasonable means, this is the\r\nfirst time You have received notice of non-compliance with this License\r\nfrom such Contributor, and You become compliant prior to 30 days after\r\nYour receipt of the notice.\r\n\r\n5.2. If You initiate litigation against any entity by asserting a patent\r\ninfringement claim (excluding declaratory judgment actions,\r\ncounter-claims, and cross-claims) alleging that a Contributor Version\r\ndirectly or indirectly infringes any patent, then the rights granted to\r\nYou by any and all Contributors for the Covered Software under Section\r\n2.1 of this License shall terminate.\r\n\r\n5.3. In the event of termination under Sections 5.1 or 5.2 above, all\r\nend user license agreements (excluding distributors and resellers) which\r\nhave been validly granted by You or Your distributors under this License\r\nprior to termination shall survive termination.\r\n\r\n************************************************************************\r\n*                                                                      *\r\n*  6. Disclaimer of Warranty                                           *\r\n*  -------------------------                                           *\r\n*                                                                      *\r\n*  Covered Software is provided under this License on an \"as is\"       *\r\n*  basis, without warranty of any kind, either expressed, implied, or  *\r\n*  statutory, including, without limitation, warranties that the       *\r\n*  Covered Software is free of defects, merchantable, fit for a        *\r\n*  particular purpose or non-infringing. The entire risk as to the     *\r\n*  quality and performance of the Covered Software is with You.        *\r\n*  Should any Covered Software prove defective in any respect, You     *\r\n*  (not any Contributor) assume the cost of any necessary servicing,   *\r\n*  repair, or correction. This disclaimer of warranty constitutes an   *\r\n*  essential part of this License. No use of any Covered Software is   *\r\n*  authorized under this License except under this disclaimer.         *\r\n*                                                                      *\r\n************************************************************************\r\n\r\n************************************************************************\r\n*                                                                      *\r\n*  7. Limitation of Liability                                          *\r\n*  --------------------------                                          *\r\n*                                                                      *\r\n*  Under no circumstances and under no legal theory, whether tort      *\r\n*  (including negligence), contract, or otherwise, shall any           *\r\n*  Contributor, or anyone who distributes Covered Software as          *\r\n*  permitted above, be liable to You for any direct, indirect,         *\r\n*  special, incidental, or consequential damages of any character      *\r\n*  including, without limitation, damages for lost profits, loss of    *\r\n*  goodwill, work stoppage, computer failure or malfunction, or any    *\r\n*  and all other commercial damages or losses, even if such party      *\r\n*  shall have been informed of the possibility of such damages. This   *\r\n*  limitation of liability shall not apply to liability for death or   *\r\n*  personal injury resulting from such party's negligence to the       *\r\n*  extent applicable law prohibits such limitation. Some               *\r\n*  jurisdictions do not allow the exclusion or limitation of           *\r\n*  incidental or consequential damages, so this exclusion and          *\r\n*  limitation may not apply to You.                                    *\r\n*                                                                      *\r\n************************************************************************\r\n\r\n8. Litigation\r\n-------------\r\n\r\nAny litigation relating to this License may be brought only in the\r\ncourts of a jurisdiction where the defendant maintains its principal\r\nplace of business and such litigation shall be governed by laws of that\r\njurisdiction, without reference to its conflict-of-law provisions.\r\nNothing in this Section shall prevent a party's ability to bring\r\ncross-claims or counter-claims.\r\n\r\n9. Miscellaneous\r\n----------------\r\n\r\nThis License represents the complete agreement concerning the subject\r\nmatter hereof. If any provision of this License is held to be\r\nunenforceable, such provision shall be reformed only to the extent\r\nnecessary to make it enforceable. Any law or regulation which provides\r\nthat the language of a contract shall be construed against the drafter\r\nshall not be used to construe this License against a Contributor.\r\n\r\n10. Versions of the License\r\n---------------------------\r\n\r\n10.1. New Versions\r\n\r\nMozilla Foundation is the license steward. Except as provided in Section\r\n10.3, no one other than the license steward has the right to modify or\r\npublish new versions of this License. Each version will be given a\r\ndistinguishing version number.\r\n\r\n10.2. Effect of New Versions\r\n\r\nYou may distribute the Covered Software under the terms of the version\r\nof the License under which You originally received the Covered Software,\r\nor under the terms of any subsequent version published by the license\r\nsteward.\r\n\r\n10.3. Modified Versions\r\n\r\nIf you create software not governed by this License, and you want to\r\ncreate a new license for such software, you may create and use a\r\nmodified version of this License if you rename the license and remove\r\nany references to the name of the license steward (except to note that\r\nsuch modified license differs from this License).\r\n\r\n10.4. Distributing Source Code Form that is Incompatible With Secondary\r\nLicenses\r\n\r\nIf You choose to distribute Source Code Form that is Incompatible With\r\nSecondary Licenses under the terms of this version of the License, the\r\nnotice described in Exhibit B of this License must be attached.\r\n\r\nExhibit A - Source Code Form License Notice\r\n-------------------------------------------\r\n\r\n  This Source Code Form is subject to the terms of the Mozilla Public\r\n  License, v. 2.0. If a copy of the MPL was not distributed with this\r\n  file, You can obtain one at https://mozilla.org/MPL/2.0/.\r\n\r\nIf it is not possible or desirable to put the notice in a particular\r\nfile, then You may include the notice in a location (such as a LICENSE\r\nfile in a relevant directory) where a recipient would be likely to look\r\nfor such a notice.\r\n\r\nYou may add additional accurate notices of copyright ownership.\r\n\r\nExhibit B - \"Incompatible With Secondary Licenses\" Notice\r\n---------------------------------------------------------\r\n\r\n  This Source Code Form is \"Incompatible With Secondary Licenses\", as\r\n  defined by the Mozilla Public License, v. 2.0.\r\n</document_content>\r\n</document>\r\n<document index=\"25\">\r\n<source>Makefile</source>\r\n<document_content>SHELL := /bin/bash\r\n\r\n.PHONY: bootstrap compile test examples clean clean-test clean-examples\r\n\r\n\r\nsrc_files := $(shell find src -type f)\r\ntemplates := $(shell find templates -type f)\r\nlib_files := $(src_files:src/%=lib/%) node_modules $(templates)\r\n\r\nbootstrap: test $(lib_files)\r\n\r\ncompile:\r\n\t./bin/canopy src/meta_grammar.peg\r\n\r\ntest: node_modules test-js\r\n\r\nclean: clean-examples clean-test\r\n\r\n\r\nlib/%: src/%\r\n\t@mkdir -p $(@D)\r\n\tcp $< $@\r\n\r\nnode_modules:\r\n\tnpm install --no-save\r\n\r\nexamples/%.js: examples/%.peg $(lib_files)\r\n\t./bin/canopy --lang js $<\r\n\r\ntest/%.js: test/%.peg $(lib_files)\r\n\t./bin/canopy --lang js $<\r\n\r\n%/Grammar.java: %.peg $(lib_files)\r\n\t./bin/canopy --lang java $<\r\n\r\n%.py: %.peg $(lib_files)\r\n\t./bin/canopy --lang python $<\r\n\r\n%.rb: %.peg $(lib_files)\r\n\t./bin/canopy --lang ruby $<\r\n\r\n\r\ntest_grammars := $(wildcard test/grammars/*.peg)\r\n\r\ntest/javascript/node_modules:\r\n\tcd test/javascript && npm install --no-save\r\n\r\ntest-all: test-java test-js test-python test-ruby\r\n\r\ntest-java: $(test_grammars:%.peg=%/Grammar.java)\r\n\tcd test/java && mvn clean test\r\n\r\ntest-js: test/javascript/node_modules $(test_grammars:%.peg=%.js)\r\n\tcd test/javascript && npm test\r\n\r\ntest-python: $(test_grammars:%.peg=%.py)\r\n\tcd test && python -m unittest discover --pattern '*_test.py'\r\n\r\ntest-ruby: $(test_grammars:%.peg=%.rb)\r\n\tcd test/ruby && rake\r\n\r\nclean-test:\r\n\tfind test/grammars -type f -a ! -name '*.peg' -a ! -name __init__.py -exec rm {} \\;\r\n\r\n\r\nexample_grammars        := $(wildcard examples/canopy/*.peg)\r\nexample_grammars_js     := $(example_grammars:%.peg=%.js)\r\nexample_grammars_java   := $(example_grammars:%.peg=%/Grammar.java)\r\nexample_grammars_python := $(example_grammars:%.peg=%.py)\r\nexample_grammars_ruby   := $(example_grammars:%.peg=%.rb)\r\n\r\nexamples: $(example_grammars_js) \\\r\n\t$(example_grammars_java) \\\r\n\t$(example_grammars_python) \\\r\n\t$(example_grammars_ruby) \\\r\n\texamples/pegjs\r\n\r\nexamples/pegjs:\r\n\tfind examples/pegjs -name '*.peg' -exec pegjs --cache {} \\;\r\n\r\nclean-examples:\r\n\tfind examples -name '*.class' -o -name '*.pyc' -exec rm {} \\;\r\n</document_content>\r\n</document>\r\n<document index=\"26\">\r\n<source>package-lock.json</source>\r\n<document_content>{\r\n  \"name\": \"canopy\",\r\n  \"version\": \"0.4.0\",\r\n  \"lockfileVersion\": 3,\r\n  \"requires\": true,\r\n  \"packages\": {\r\n    \"\": {\r\n      \"name\": \"canopy\",\r\n      \"version\": \"0.4.0\",\r\n      \"license\": \"MPL-2.0\",\r\n      \"dependencies\": {\r\n        \"handlebars\": \">=4.0.0\",\r\n        \"nopt\": \"*\"\r\n      },\r\n      \"bin\": {\r\n        \"canopy\": \"bin/canopy\"\r\n      },\r\n      \"devDependencies\": {\r\n        \"benchmark\": \"\",\r\n        \"jstest\": \"\",\r\n        \"pegjs\": \"\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/abbrev\": {\r\n      \"version\": \"2.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/abbrev/-/abbrev-2.0.0.tgz\",\r\n      \"integrity\": \"sha512-6/mh1E2u2YgEsCHdY0Yx5oW+61gZU+1vXaoiHHrpKeuRNNgFvS+/jrwHiQhB5apAf5oB7UB7E19ol2R2LKH8hQ==\",\r\n      \"engines\": {\r\n        \"node\": \"^14.17.0 || ^16.13.0 || >=18.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/benchmark\": {\r\n      \"version\": \"2.1.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/benchmark/-/benchmark-2.1.4.tgz\",\r\n      \"integrity\": \"sha512-l9MlfN4M1K/H2fbhfMy3B7vJd6AGKJVQn2h6Sg/Yx+KckoUA7ewS5Vv6TjSq18ooE1kS9hhAlQRH3AkXIh/aOQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"lodash\": \"^4.17.4\",\r\n        \"platform\": \"^1.3.3\"\r\n      }\r\n    },\r\n    \"node_modules/handlebars\": {\r\n      \"version\": \"4.7.8\",\r\n      \"resolved\": \"https://registry.npmjs.org/handlebars/-/handlebars-4.7.8.tgz\",\r\n      \"integrity\": \"sha512-vafaFqs8MZkRrSX7sFVUdo3ap/eNiLnb4IakshzvP56X5Nr1iGKAIqdX6tMlm6HcNRIkr6AxO5jFEoJzzpT8aQ==\",\r\n      \"dependencies\": {\r\n        \"minimist\": \"^1.2.5\",\r\n        \"neo-async\": \"^2.6.2\",\r\n        \"source-map\": \"^0.6.1\",\r\n        \"wordwrap\": \"^1.0.0\"\r\n      },\r\n      \"bin\": {\r\n        \"handlebars\": \"bin/handlebars\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=0.4.7\"\r\n      },\r\n      \"optionalDependencies\": {\r\n        \"uglify-js\": \"^3.1.4\"\r\n      }\r\n    },\r\n    \"node_modules/jstest\": {\r\n      \"version\": \"1.0.5\",\r\n      \"resolved\": \"https://registry.npmjs.org/jstest/-/jstest-1.0.5.tgz\",\r\n      \"integrity\": \"sha512-f0zWx0FBVh7cM8ph2ZQKlzcYfiP0BAaB3UBuXKCJlChT0M7QD4Gbzvpg3C0+Dz05nc+xB4oJbEJq51cmzIfGqg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"nopt\": \"\"\r\n      },\r\n      \"bin\": {\r\n        \"jstest\": \"bin/jstest\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=0.4.0\"\r\n      }\r\n    },\r\n    \"node_modules/lodash\": {\r\n      \"version\": \"4.17.21\",\r\n      \"resolved\": \"https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz\",\r\n      \"integrity\": \"sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/minimist\": {\r\n      \"version\": \"1.2.8\",\r\n      \"resolved\": \"https://registry.npmjs.org/minimist/-/minimist-1.2.8.tgz\",\r\n      \"integrity\": \"sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==\",\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/ljharb\"\r\n      }\r\n    },\r\n    \"node_modules/neo-async\": {\r\n      \"version\": \"2.6.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/neo-async/-/neo-async-2.6.2.tgz\",\r\n      \"integrity\": \"sha512-Yd3UES5mWCSqR+qNT93S3UoYUkqAZ9lLg8a7g9rimsWmYGK8cVToA4/sF3RrshdyV3sAGMXVUmpMYOw+dLpOuw==\"\r\n    },\r\n    \"node_modules/nopt\": {\r\n      \"version\": \"7.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/nopt/-/nopt-7.2.0.tgz\",\r\n      \"integrity\": \"sha512-CVDtwCdhYIvnAzFoJ6NJ6dX3oga9/HyciQDnG1vQDjSLMeKLJ4A93ZqYKDrgYSr1FBY5/hMYC+2VCi24pgpkGA==\",\r\n      \"dependencies\": {\r\n        \"abbrev\": \"^2.0.0\"\r\n      },\r\n      \"bin\": {\r\n        \"nopt\": \"bin/nopt.js\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^14.17.0 || ^16.13.0 || >=18.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/pegjs\": {\r\n      \"version\": \"0.10.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/pegjs/-/pegjs-0.10.0.tgz\",\r\n      \"integrity\": \"sha512-qI5+oFNEGi3L5HAxDwN2LA4Gg7irF70Zs25edhjld9QemOgp0CbvMtbFcMvFtEo1OityPrcCzkQFB8JP/hxgow==\",\r\n      \"dev\": true,\r\n      \"bin\": {\r\n        \"pegjs\": \"bin/pegjs\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=0.10\"\r\n      }\r\n    },\r\n    \"node_modules/platform\": {\r\n      \"version\": \"1.3.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/platform/-/platform-1.3.6.tgz\",\r\n      \"integrity\": \"sha512-fnWVljUchTro6RiCFvCXBbNhJc2NijN7oIQxbwsyL0buWJPG85v81ehlHI9fXrJsMNgTofEoWIQeClKpgxFLrg==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/source-map\": {\r\n      \"version\": \"0.6.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz\",\r\n      \"integrity\": \"sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==\",\r\n      \"engines\": {\r\n        \"node\": \">=0.10.0\"\r\n      }\r\n    },\r\n    \"node_modules/uglify-js\": {\r\n      \"version\": \"3.17.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/uglify-js/-/uglify-js-3.17.4.tgz\",\r\n      \"integrity\": \"sha512-T9q82TJI9e/C1TAxYvfb16xO120tMVFZrGA3f9/P4424DNu6ypK103y0GPFVa17yotwSyZW5iYXgjYHkGrJW/g==\",\r\n      \"optional\": true,\r\n      \"bin\": {\r\n        \"uglifyjs\": \"bin/uglifyjs\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=0.8.0\"\r\n      }\r\n    },\r\n    \"node_modules/wordwrap\": {\r\n      \"version\": \"1.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/wordwrap/-/wordwrap-1.0.0.tgz\",\r\n      \"integrity\": \"sha512-gvVzJFlPycKc5dZN4yPkP8w7Dc37BtP1yczEneOb4uq34pXZcvrtRTmWV8W+Ume+XCxKgbjM+nevkyFPMybd4Q==\"\r\n    }\r\n  }\r\n}\r\n</document_content>\r\n</document>\r\n<document index=\"27\">\r\n<source>package.json</source>\r\n<document_content>{ \"name\"            : \"canopy\"\r\n, \"description\"     : \"PEG parser compiler for JavaScript\"\r\n, \"homepage\"        : \"https://canopy.jcoglan.com\"\r\n, \"author\"          : \"James Coglan <jcoglan@gmail.com> (http://jcoglan.com/)\"\r\n, \"keywords\"        : [\"parser\", \"compiler\", \"peg\"]\r\n, \"license\"         : \"MPL-2.0\"\r\n\r\n, \"version\"         : \"0.4.0\"\r\n, \"engines\"         : { \"node\": \">=8.0.0\" }\r\n, \"files\"           : [\"bin\", \"lib\", \"templates\"]\r\n, \"main\"            : \"./lib/canopy.js\"\r\n, \"bin\"             : { \"canopy\": \"./bin/canopy\" }\r\n\r\n, \"dependencies\"    : { \"handlebars\": \">=4.0.0\", \"nopt\": \"*\" }\r\n, \"devDependencies\" : { \"benchmark\": \"\", \"jstest\": \"\", \"pegjs\": \"\" }\r\n\r\n, \"bugs\"            : { \"url\": \"https://github.com/jcoglan/canopy/issues\" }\r\n\r\n, \"repository\"      : { \"type\"  : \"git\"\r\n                      , \"url\"   : \"git://github.com/jcoglan/canopy.git\"\r\n                      }\r\n}\r\n</document_content>\r\n</document>\r\n<document index=\"28\">\r\n<source>Pipfile</source>\r\n<document_content>[requires]\r\npython_version = \"3\"\r\n\r\n[packages]\r\nparsimonious = \"*\"\r\npytest-benchmark = \"*\"\r\n</document_content>\r\n</document>\r\n<document index=\"29\">\r\n<source>README.md</source>\r\n<document_content># Canopy\r\n\r\nCanopy is a parser compiler targeting Java, JavaScript, Python and Ruby. It\r\ntakes a file describing a [parsing expression grammar][1] and compiles it into a\r\nparser module in the target language. The generated parsers have no runtime\r\ndependency on Canopy itself.\r\n\r\nFor usage documentation see [canopy.jcoglan.com][2].\r\n\r\nSee `CONTRIBUTING.md` for instructions for building the project.\r\n\r\n[1]: http://en.wikipedia.org/wiki/Parsing_expression_grammar\r\n[2]: https://canopy.jcoglan.com\r\n</document_content>\r\n</document>\r\n<document index=\"30\">\r\n<source>site/langs/java.md</source>\r\n<document_content>---\r\nlayout: default\r\ntitle: Java\r\n---\r\n\r\n## Java\r\n\r\nTo get an overview of how to use Canopy with Java, consider this example of a\r\nsimplified grammar for URLs:\r\n\r\n###### url.peg\r\n\r\n    grammar URL\r\n      url       <-  scheme \"://\" host pathname search hash?\r\n      scheme    <-  \"http\" \"s\"?\r\n      host      <-  hostname port?\r\n      hostname  <-  segment (\".\" segment)*\r\n      segment   <-  [a-z0-9-]+\r\n      port      <-  \":\" [0-9]+\r\n      pathname  <-  \"/\" [^ ?]*\r\n      search    <-  (\"?\" query:[^ #]*)?\r\n      hash      <-  \"#\" [^ ]*\r\n\r\nWe can compile this grammar into a Java package using `canopy`:\r\n\r\n    $ canopy url.peg --lang java\r\n\r\nThis creates a package called `url` that contains all the parser logic. The\r\npackage name is based on the path to the `.peg` file when you run `canopy`, for\r\nexample if you run:\r\n\r\n    $ canopy com/jcoglan/canopy/url.peg --lang java\r\n\r\nthen you will get a package named `com.jcoglan.canopy.url`. The `--output`\r\noption can be used to override this:\r\n\r\n    $ canopy com/jcoglan/canopy/url.peg --lang java --output some/dir/url\r\n\r\nThis will write the generated files into the directory `some/dir/url` with the\r\npackage name `some.dir.url`.\r\n\r\nLet's try out our parser:\r\n\r\n```java\r\nimport url.URL;\r\nimport url.TreeNode;\r\nimport url.ParseError;\r\n\r\npublic class Example {\r\n    public static void main(String[] args) throws ParseError {\r\n        TreeNode tree = URL.parse(\"http://example.com/search?q=hello#page=1\");\r\n\r\n        for (TreeNode node : tree.elements) {\r\n            System.out.println(node.offset + \", \" + node.text);\r\n        }\r\n\r\n        /*  prints:\r\n\r\n            0, http\r\n            4, ://\r\n            7, example.com\r\n            18, /search\r\n            25, ?q=hello\r\n            33, #page=1       */\r\n    }\r\n}\r\n```\r\n\r\nThis little example shows a few important things:\r\n\r\nYou invoke the parser by calling the module's `parse()` function with a string.\r\n\r\nThe `parse()` method returns a tree of *nodes*.\r\n\r\nEach node has three properties:\r\n\r\n* `String text`, the snippet of the input text that node represents\r\n* `int offset`, the number of characters into the input text the node appears\r\n* `List<TreeNode> elements`, an array of nodes matching the sub-expressions\r\n\r\n## Walking the parse tree\r\n\r\nYou can use `elements` to walk into the structure of the tree, or, you can use\r\nthe labels that Canopy generates, which can make your code clearer:\r\n\r\n```java\r\nimport url.URL;\r\nimport url.TreeNode;\r\nimport url.ParseError;\r\nimport url.Label;\r\n\r\npublic class Example {\r\n    public static void main(String[] args) throws ParseError {\r\n        TreeNode tree = URL.parse(\"http://example.com/search?q=hello#page=1\");\r\n\r\n        System.out.println(tree.elements.get(4).elements.get(1).text);\r\n        // -> 'q=hello'\r\n\r\n        System.out.println(tree.get(Label.search).get(Label.query).text);\r\n        // -> 'q=hello'\r\n    }\r\n}\r\n```\r\n\r\n## Parsing errors\r\n\r\nIf you give the parser an input text that does not match the grammar, a\r\n`url.ParseError` is thrown. The error message will list any of the strings or\r\ncharacter classes the parser was expecting to find at the furthest position it\r\ngot to, along with the rule those expectations come from, and it will highlight\r\nthe line of the input where the syntax error occurs.\r\n\r\n```java\r\nimport url.URL;\r\nimport url.TreeNode;\r\nimport url.ParseError;\r\n\r\npublic class Example {\r\n    public static void main(String[] args) throws ParseError {\r\n        TreeNode tree = URL.parse(\"https://example.com./\");\r\n    }\r\n}\r\n\r\n// url.ParseError: Line 1: expected one of:\r\n//\r\n//     - [a-z0-9-] from URL::segment\r\n//\r\n//      1 | https://example.com./\r\n//                              ^\r\n```\r\n\r\n## Implementing actions\r\n\r\nSay you have a grammar that uses action annotations, for example:\r\n\r\n###### maps.peg\r\n\r\n    grammar Maps\r\n      map     <-  \"{\" string \":\" value \"}\" %make_map\r\n      string  <-  \"'\" [^']* \"'\" %make_string\r\n      value   <-  list / number\r\n      list    <-  \"[\" value (\",\" value)* \"]\" %make_list\r\n      number  <-  [0-9]+ %make_number\r\n\r\nIn Java, compiling the above grammar produces a package called `maps` that\r\ncontains classes called `Maps`, `TreeNode` and `ParseError`, an enum called\r\n`Label` and an interface called `Actions`. You supply the action functions to\r\nthe parser by implementing the `Actions` interface, which has one method for\r\neach action named in the grammar, each of which must return a `TreeNode`.\r\n`TreeNode` has a no-argument constructor so making subclasses of it is\r\nrelatively easy.\r\n\r\nThe following example parses the input `{'ints':[1,2,3]}`. It defines one\r\n`TreeNode` subclass for each kind of value in the tree:\r\n\r\n* `Pair` wraps a `Map<String, List<Integer>>`\r\n* `Text` wraps a `String`\r\n* `Array` wraps a `List<Integer>`\r\n* `Number` wraps an `int`\r\n\r\nIt then implements the `Actions` interface to generate values of these types\r\nfrom the parser matches.\r\n\r\n```java\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\nimport maps.Actions;\r\nimport maps.Label;\r\nimport maps.Maps;\r\nimport maps.ParseError;\r\nimport maps.TreeNode;\r\n\r\nclass Pair extends TreeNode {\r\n    Map<String, List<Integer>> pair;\r\n\r\n    Pair(String key, List<Integer> value) {\r\n        pair = new HashMap<String, List<Integer>>();\r\n        pair.put(key, value);\r\n    }\r\n}\r\n\r\nclass Text extends TreeNode {\r\n    String string;\r\n\r\n    Text(String string) {\r\n        this.string = string;\r\n    }\r\n}\r\n\r\nclass Array extends TreeNode {\r\n    List<Integer> list;\r\n\r\n    Array(List<Integer> list) {\r\n        this.list = list;\r\n    }\r\n}\r\n\r\nclass Number extends TreeNode {\r\n    int number;\r\n\r\n    Number(int number) {\r\n        this.number = number;\r\n    }\r\n}\r\n\r\nclass MapsActions implements Actions {\r\n    public Pair make_map(String input, int start, int end, List<TreeNode> elements) {\r\n        Text string = (Text)elements.get(1);\r\n        Array array = (Array)elements.get(3);\r\n        return new Pair(string.string, array.list);\r\n    }\r\n\r\n    public Text make_string(String input, int start, int end, List<TreeNode> elements) {\r\n        return new Text(elements.get(1).text);\r\n    }\r\n\r\n    public Array make_list(String input, int start, int end, List<TreeNode> elements) {\r\n        List<Integer> list = new ArrayList<Integer>();\r\n        list.add(((Number)elements.get(1)).number);\r\n        for (TreeNode el : elements.get(2)) {\r\n            Number number = (Number)el.get(Label.value);\r\n            list.add(number.number);\r\n        }\r\n        return new Array(list);\r\n    }\r\n\r\n    public Number make_number(String input, int start, int end, List<TreeNode> elements) {\r\n        return new Number(Integer.parseInt(input.substring(start, end), 10));\r\n    }\r\n}\r\n\r\npublic class Example {\r\n    public static void main(String[] args) throws ParseError {\r\n        Pair result = (Pair)Maps.parse(\"{'ints':[1,2,3]}\", new MapsActions());\r\n\r\n        System.out.println(result.pair);\r\n        // -> {ints=[1, 2, 3]}\r\n    }\r\n}\r\n```\r\n\r\n## Extended node types\r\n\r\nUsing the `<Type>` grammar annotation is not supported in the Java version.\r\n</document_content>\r\n</document>\r\n<document index=\"31\">\r\n<source>site/langs/python.md</source>\r\n<document_content>---\r\nlayout: default\r\ntitle: Python\r\n---\r\n\r\n## Python\r\n\r\nTo get an overview of how to use Canopy with Python, consider this example of a\r\nsimplified grammar for URLs:\r\n\r\n###### url.peg\r\n\r\n    grammar URL\r\n      url       <-  scheme \"://\" host pathname search hash?\r\n      scheme    <-  \"http\" \"s\"?\r\n      host      <-  hostname port?\r\n      hostname  <-  segment (\".\" segment)*\r\n      segment   <-  [a-z0-9-]+\r\n      port      <-  \":\" [0-9]+\r\n      pathname  <-  \"/\" [^ ?]*\r\n      search    <-  (\"?\" query:[^ #]*)?\r\n      hash      <-  \"#\" [^ ]*\r\n\r\nWe can compile this grammar into a Python module using `canopy`:\r\n\r\n    $ canopy url.peg --lang python\r\n\r\nThis creates a file called `url.py` that contains all the parser logic, and it\r\nworks in Node and in the browser. The `--output` option can be used to override\r\nthe default location:\r\n\r\n    $ canopy url.peg --lang python --output some/dir/url\r\n\r\nThis will write the generated parser into the file `some/dir/url.py`.\r\n\r\nLet's try our parser out:\r\n\r\n```py\r\nimport url\r\n\r\ntree = url.parse('http://example.com/search?q=hello#page=1')\r\n\r\nfor node in tree.elements:\r\n    print node.offset, node.text\r\n\r\n#   prints:\r\n\r\n#   0 http\r\n#   4 ://\r\n#   7 example.com\r\n#   18 /search\r\n#   25 ?q=hello\r\n#   33 #page=1\r\n```\r\n\r\nThis little example shows a few important things:\r\n\r\nYou invoke the parser by calling the module's `parse()` function with a string.\r\n\r\nThe `parse()` method returns a tree of *nodes*.\r\n\r\nEach node has three properties:\r\n\r\n* `text`, the snippet of the input text that node represents\r\n* `offset`, the number of characters into the input text the node appears\r\n* `elements`, an array of nodes matching the sub-expressions\r\n\r\n## Walking the parse tree\r\n\r\nYou can use `elements` to walk into the structure of the tree:\r\n\r\n```py\r\nprint tree.elements[4].elements[1].text\r\n# -> 'q=hello'\r\n```\r\n\r\nOr, you can use the labels that Canopy generates, which can make your code\r\nclearer:\r\n\r\n```py\r\nprint tree.search.query.text\r\n# -> 'q=hello'\r\n```\r\n\r\n## Parsing errors\r\n\r\nIf you give the parser an input text that does not match the grammar, a\r\n`url.ParseError` is thrown. The error message will list any of the strings or\r\ncharacter classes the parser was expecting to find at the furthest position it\r\ngot to, along with the rule those expectations come from, and it will highlight\r\nthe line of the input where the syntax error occurs.\r\n\r\n```py\r\nurl.parse('https://example.com./')\r\n\r\n# url.ParseError: Line 1: expected one of:\r\n#\r\n#     - [a-z0-9-] from URL::segment\r\n#\r\n#      1 | https://example.com./\r\n#                              ^\r\n```\r\n\r\n## Implementing actions\r\n\r\nSay you have a grammar that uses action annotations, for example:\r\n\r\n###### maps.peg\r\n\r\n    grammar Maps\r\n      map     <-  \"{\" string \":\" value \"}\" %make_map\r\n      string  <-  \"'\" [^']* \"'\" %make_string\r\n      value   <-  list / number\r\n      list    <-  \"[\" value (\",\" value)* \"]\" %make_list\r\n      number  <-  [0-9]+ %make_number\r\n\r\nIn Python, you give the action functions to the parser by using the `actions`\r\nkeyword argument, which should be an object implementing the named actions:\r\n\r\n```py\r\nimport maps\r\n\r\nclass Actions(object):\r\n    def make_map(self, input, start, end, elements):\r\n        return {elements[1]: elements[3]}\r\n\r\n    def make_string(self, input, start, end, elements):\r\n        return elements[1].text\r\n\r\n    def make_list(self, input, start, end, elements):\r\n        list = [elements[1]]\r\n        for el in elements[2]:\r\n            list.append(el.value)\r\n        return list\r\n\r\n    def make_number(self, input, start, end, elements):\r\n        return int(input[start:end], 10)\r\n\r\nresult = maps.parse(\"{'ints':[1,2,3]}\", actions=Actions())\r\n\r\nprint result\r\n# -> {'ints': [1, 2, 3]}\r\n```\r\n\r\n## Extended node types\r\n\r\nSay you have a grammar that contains type annotations:\r\n\r\n###### words.peg\r\n\r\n    grammar Words\r\n      root  <-  first:\"foo\" second:\"bar\" <Extension>\r\n\r\nTo use this parser, you must pass in an object containing implementations of the\r\nnamed types via the `types` option. Each defined type contains the methods that\r\nwill be added to the nodes.\r\n\r\nYou can import the types from a module:\r\n\r\n```py\r\n# node_types.py\r\n\r\nclass Extension(object):\r\n    def convert(self):\r\n        return self.first.text + self.second.text.upper()\r\n\r\n\r\n# example.py\r\n\r\nimport words\r\nimport node_types\r\n\r\nwords.parse('foobar', types=node_types).convert()\r\n# -> 'fooBAR'\r\n```\r\n\r\nOr, you can enclose the extension classes in another class that you pass to the\r\nparser:\r\n\r\n```py\r\nimport words\r\n\r\nclass Types:\r\n    class Extension(object):\r\n        def convert(self):\r\n            return self.first.text + self.second.text.upper()\r\n\r\nwords.parse('foobar', types=Types).convert()\r\n# -> 'fooBAR'\r\n```\r\n</document_content>\r\n</document>\r\n<document index=\"32\">\r\n<source>src/ast/action.js</source>\r\n<document_content>'use strict'\r\n\r\nclass Action {\r\n  constructor (expression, actionName) {\r\n    this._expression = expression\r\n    this._actionName = actionName\r\n  }\r\n\r\n  *[Symbol.iterator] () {\r\n    yield this._expression\r\n  }\r\n\r\n  compile (builder, address) {\r\n    this._expression.compile(builder, address, this._actionName)\r\n  }\r\n}\r\n\r\nmodule.exports = Action\r\n</document_content>\r\n</document>\r\n<document index=\"33\">\r\n<source>src/ast/any_char.js</source>\r\n<document_content>'use strict'\r\n\r\nclass AnyChar {\r\n  compile (builder, address, action) {\r\n    builder.if_(builder.hasChars_(), () => {\r\n      let of = builder.offset_()\r\n      builder.syntaxNode_(address, of, of + ' + 1', null, action)\r\n    }, () => {\r\n      builder.failure_(address, '<any char>')\r\n    })\r\n  }\r\n}\r\n\r\nmodule.exports = AnyChar\r\n</document_content>\r\n</document>\r\n<document index=\"34\">\r\n<source>src/ast/char_class.js</source>\r\n<document_content>'use strict'\r\n\r\nclass CharClass {\r\n  constructor (text, regex) {\r\n    this._text = text\r\n    this.regex = regex\r\n  }\r\n\r\n  compile (builder, address, action) {\r\n    let regex = this.constName || this.regex,\r\n        chunk = builder.chunk_(1)\r\n\r\n    builder.if_(builder.regexMatch_(regex, chunk), () => {\r\n      let of = builder.offset_()\r\n      builder.syntaxNode_(address, of, of + ' + 1', null, action)\r\n    }, () => {\r\n      builder.failure_(address, this._text)\r\n    })\r\n  }\r\n}\r\n\r\nmodule.exports = CharClass\r\n</document_content>\r\n</document>\r\n<document index=\"35\">\r\n<source>src/ast/choice.js</source>\r\n<document_content>'use strict'\r\n\r\nclass Choice {\r\n  constructor (options) {\r\n    this._options = options\r\n  }\r\n\r\n  [Symbol.iterator] () {\r\n    return this._options[Symbol.iterator]()\r\n  }\r\n\r\n  compile (builder, address) {\r\n    let startOffset = builder.localVar_('index', builder.offset_())\r\n    this._compileChoices(builder, address, 0, startOffset)\r\n  }\r\n\r\n  _compileChoices (builder, address, index, startOffset) {\r\n    if (index === this._options.length) return\r\n\r\n    this._options[index].compile(builder, address)\r\n\r\n    builder.unlessNode_(address, () => {\r\n      builder.assign_(builder.offset_(), startOffset)\r\n      this._compileChoices(builder, address, index + 1, startOffset)\r\n    })\r\n  }\r\n}\r\n\r\nmodule.exports = Choice\r\n</document_content>\r\n</document>\r\n<document index=\"36\">\r\n<source>src/ast/extension.js</source>\r\n<document_content>'use strict'\r\n\r\nclass Extension {\r\n  constructor (expression, typeName) {\r\n    this._expression = expression\r\n    this._typeName   = typeName\r\n  }\r\n\r\n  *[Symbol.iterator] () {\r\n    yield this._expression\r\n  }\r\n\r\n  compile (builder, address) {\r\n    this._expression.compile(builder, address)\r\n\r\n    builder.ifNode_(address, () => {\r\n      builder.extendNode_(address, this._typeName)\r\n    })\r\n  }\r\n}\r\n\r\nmodule.exports = Extension\r\n</document_content>\r\n</document>\r\n<document index=\"37\">\r\n<source>src/ast/grammar.js</source>\r\n<document_content>'use strict'\r\n\r\nclass Grammar {\r\n  constructor (name, rules) {\r\n    this._name  = name\r\n    this._rules = rules\r\n  }\r\n\r\n  [Symbol.iterator] () {\r\n    return this._rules[Symbol.iterator]()\r\n  }\r\n\r\n  compile (builder) {\r\n    let [nodeLabels, actions, regexes] = this._gatherComponents()\r\n\r\n    builder.package_(this._name, [...actions].sort(), () => {\r\n      let nodeClassName = builder.syntaxNodeClass_()\r\n\r\n      for (let [i, labels] of nodeLabels.entries())\r\n        this._compileTreeNode(builder, nodeClassName, i, labels)\r\n\r\n      builder.grammarModule_(() => {\r\n        for (let [i, regex] of regexes.entries())\r\n          builder.compileRegex_(regex, 'REGEX_' + (i + 1))\r\n\r\n        for (let rule of this._rules)\r\n          rule.compile(builder)\r\n      })\r\n\r\n      let root = this._rules[0].name\r\n      builder.parserClass_(root)\r\n    })\r\n  }\r\n\r\n  _gatherComponents () {\r\n    let nodeLabels = [],\r\n        actions    = new Set(),\r\n        regexes    = []\r\n\r\n    this._scan(this, (node) => {\r\n      let labels = node.collectLabels && node.collectLabels()\r\n      if (labels) nodeLabels.push([node, labels])\r\n\r\n      if (node._actionName) actions.add(node._actionName)\r\n\r\n      if (node.regex) regexes.push(node)\r\n    })\r\n\r\n    return [nodeLabels, actions, regexes]\r\n  }\r\n\r\n  _compileTreeNode (builder, nodeClassName, i, [node, labels]) {\r\n    let className = nodeClassName + (i + 1)\r\n    node.setNodeClassName(className)\r\n\r\n    builder.class_(className, nodeClassName, () => {\r\n      builder.attributes_(labels.keys())\r\n\r\n      builder.constructor_(['text', 'offset', 'elements'], () => {\r\n        for (let [key, offset] of labels)\r\n          builder.attribute_(key, builder.arrayLookup_('elements', offset))\r\n      })\r\n    })\r\n  }\r\n\r\n  _scan (node, callback) {\r\n    callback(node)\r\n\r\n    if (node[Symbol.iterator]) {\r\n      for (let child of node) this._scan(child, callback)\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = Grammar\r\n</document_content>\r\n</document>\r\n<document index=\"38\">\r\n<source>src/ast/maybe.js</source>\r\n<document_content>'use strict'\r\n\r\nclass Maybe {\r\n  constructor (expression) {\r\n    this._expression = expression\r\n  }\r\n\r\n  *[Symbol.iterator] () {\r\n    yield this._expression\r\n  }\r\n\r\n  compile (builder, address) {\r\n    let startOffset = builder.localVar_('index', builder.offset_())\r\n    this._expression.compile(builder, address)\r\n\r\n    builder.unlessNode_(address, () => {\r\n      builder.syntaxNode_(address, startOffset, startOffset, null)\r\n    })\r\n  }\r\n}\r\n\r\nmodule.exports = Maybe\r\n</document_content>\r\n</document>\r\n<document index=\"39\">\r\n<source>src/ast/predicate.js</source>\r\n<document_content>'use strict'\r\n\r\nclass Predicate {\r\n  constructor (expression, positive) {\r\n    this._expression = expression\r\n    this._positive   = positive\r\n  }\r\n\r\n  *[Symbol.iterator] () {\r\n    yield this._expression\r\n  }\r\n\r\n  compile (builder, address) {\r\n    let startOffset = builder.localVar_('index', builder.offset_()),\r\n        branch      = this._positive ? 'ifNode_' : 'unlessNode_'\r\n\r\n    this._expression.compile(builder, address)\r\n    builder.assign_(builder.offset_(), startOffset)\r\n\r\n    builder[branch](address, () => {\r\n      let of = builder.offset_()\r\n      builder.syntaxNode_(address, of, of, null)\r\n    }, () => {\r\n      builder.assign_(address, builder.nullNode_())\r\n    })\r\n  }\r\n}\r\n\r\nmodule.exports = Predicate\r\n</document_content>\r\n</document>\r\n<document index=\"40\">\r\n<source>src/ast/reference.js</source>\r\n<document_content>'use strict'\r\n\r\nclass Reference {\r\n  constructor (name) {\r\n    this.refName = name\r\n  }\r\n\r\n  referenceName () {\r\n    return this.refName\r\n  }\r\n\r\n  compile (builder, address) {\r\n    builder.jump_(address, this.refName)\r\n  }\r\n}\r\n\r\nmodule.exports = Reference\r\n</document_content>\r\n</document>\r\n<document index=\"41\">\r\n<source>src/ast/repeat.js</source>\r\n<document_content>'use strict'\r\n\r\nclass Repeat {\r\n  constructor (expression, range) {\r\n    this._expression = expression\r\n    this._range      = range\r\n  }\r\n\r\n  *[Symbol.iterator] () {\r\n    yield this._expression\r\n  }\r\n\r\n  compile (builder, address, action) {\r\n    let temp = builder.localVars_({\r\n          index:     builder.offset_(),\r\n          elements:  builder.emptyList_(),\r\n          address:   builder.null_()\r\n        }),\r\n\r\n        startOffset = temp.index,\r\n        elements    = temp.elements,\r\n        elAddr      = temp.address\r\n\r\n    builder.loop_(() => {\r\n      this._expression.compile(builder, elAddr)\r\n\r\n      builder.ifNode_(elAddr, () => {\r\n        builder.append_(elements, elAddr)\r\n      }, () => {\r\n        builder.break_()\r\n      })\r\n    })\r\n\r\n    builder.if_(builder.sizeInRange_(elements, this._range), () => {\r\n      builder.syntaxNode_(address, startOffset, builder.offset_(), elements, action)\r\n    }, () => {\r\n      builder.assign_(address, builder.nullNode_())\r\n    })\r\n  }\r\n}\r\n\r\nmodule.exports = Repeat\r\n</document_content>\r\n</document>\r\n<document index=\"42\">\r\n<source>src/ast/rule.js</source>\r\n<document_content>'use strict'\r\n\r\nclass Rule {\r\n  constructor (name, expression) {\r\n    this.name        = name\r\n    this._expression = expression\r\n  }\r\n\r\n  *[Symbol.iterator] () {\r\n    yield this._expression\r\n  }\r\n\r\n  compile (builder, address) {\r\n    builder.rule_(this.name, () => {\r\n      builder.method_('_read_' + this.name, [], () => {\r\n        builder.cache_(this.name, (address) => {\r\n          this._expression.compile(builder, address)\r\n        })\r\n      })\r\n    })\r\n  }\r\n}\r\n\r\nmodule.exports = Rule\r\n</document_content>\r\n</document>\r\n<document index=\"43\">\r\n<source>src/ast/sequence.js</source>\r\n<document_content>'use strict'\r\n\r\nclass Sequence {\r\n  constructor (parts) {\r\n    this._parts = parts\r\n  }\r\n\r\n  [Symbol.iterator] () {\r\n    return this._parts[Symbol.iterator]()\r\n  }\r\n\r\n  countUnmuted () {\r\n    return this._parts.filter((p) => !p.muted()).length\r\n  }\r\n\r\n  collectLabels () {\r\n    let labels = new Map()\r\n    let parts = this._parts.filter((p) => !p.muted())\r\n\r\n    for (let [i, part] of parts.entries()) {\r\n      for (let label of part.labels())\r\n        labels.set(label, i)\r\n    }\r\n\r\n    return (labels.size === 0) ? null : labels\r\n  }\r\n\r\n  setNodeClassName (className) {\r\n    this._nodeClassName = className\r\n  }\r\n\r\n  compile (builder, address, action) {\r\n    let temp = builder.localVars_({\r\n      index:    builder.offset_(),\r\n      elements: builder.emptyList_(this.countUnmuted())\r\n    })\r\n\r\n    let startOffset = temp.index,\r\n        elements    = temp.elements,\r\n        klass       = this._nodeClassName\r\n\r\n    this._compileExpressions(builder, 0, 0, startOffset, elements)\r\n\r\n    builder.ifNull_(elements, () => {\r\n      builder.assign_(address, builder.nullNode_())\r\n    }, () => {\r\n      builder.syntaxNode_(address, startOffset, builder.offset_(), elements, action, klass)\r\n    })\r\n  }\r\n\r\n  _compileExpressions (builder, index, elIndex, startOffset, elements) {\r\n    let expAddr = builder.localVar_('address'),\r\n        expr    = this._parts[index],\r\n        muted   = expr.muted()\r\n\r\n    expr.compile(builder, expAddr)\r\n\r\n    builder.ifNode_(expAddr, () => {\r\n      if (!muted) {\r\n        builder.append_(elements, expAddr, elIndex)\r\n        elIndex += 1\r\n      }\r\n      if (index < this._parts.length - 1) {\r\n        this._compileExpressions(builder, index + 1, elIndex, startOffset, elements)\r\n      } else if (muted) {\r\n        builder.pass_()\r\n      }\r\n    }, () => {\r\n      builder.assign_(elements, builder.null_())\r\n      builder.assign_(builder.offset_(), startOffset)\r\n    })\r\n  }\r\n}\r\n\r\nmodule.exports = Sequence\r\n</document_content>\r\n</document>\r\n<document index=\"44\">\r\n<source>src/ast/sequence_part.js</source>\r\n<document_content>'use strict'\r\n\r\nclass SequencePart {\r\n  constructor (expression, label, muted) {\r\n    this._expression = expression\r\n    this._label      = label\r\n    this._muted      = muted\r\n  }\r\n\r\n  *[Symbol.iterator] () {\r\n    yield this._expression\r\n  }\r\n\r\n  labels () {\r\n    let labels = []\r\n    if (this._label) labels.push(this._label)\r\n    if (this._expression.refName) labels.push(this._expression.refName)\r\n    return labels\r\n  }\r\n\r\n  muted () {\r\n    return this._muted\r\n  }\r\n\r\n  compile (builder, address) {\r\n    this._expression.compile(builder, address)\r\n  }\r\n}\r\n\r\nmodule.exports = SequencePart\r\n</document_content>\r\n</document>\r\n<document index=\"45\">\r\n<source>src/ast/string.js</source>\r\n<document_content>'use strict'\r\n\r\nclass String {\r\n  constructor (text, value, ci) {\r\n    this._text  = text\r\n    this._value = value\r\n    this._ci    = ci\r\n  }\r\n\r\n  compile (builder, address, action) {\r\n    let value  = this._value,\r\n        length = value.length,\r\n        chunk  = builder.chunk_(length)\r\n\r\n    let condition = this._ci\r\n                  ? builder.stringMatchCI_(chunk, value)\r\n                  : builder.stringMatch_(chunk, value)\r\n\r\n    builder.if_(condition, () => {\r\n      let of = builder.offset_()\r\n      builder.syntaxNode_(address, of, of + ' + ' + length, null, action)\r\n    }, () => {\r\n      builder.failure_(address, this._text)\r\n    })\r\n  }\r\n}\r\n\r\nmodule.exports = String\r\n</document_content>\r\n</document>\r\n<document index=\"46\">\r\n<source>src/builders/base.js</source>\r\n<document_content>'use strict'\r\n\r\nconst { readFileSync } = require('fs')\r\nconst { basename, dirname, join } = require('path')\r\nconst handlebars = require('handlebars')\r\n\r\nclass Scope {\r\n  constructor (parentScope, name, parentName) {\r\n    if (name) {\r\n      this.name = name\r\n      this.parent = parentName\r\n    } else if (parentScope) {\r\n      this.name = parentScope.name\r\n      this.parent = parentScope.parent\r\n    }\r\n    this.methodSeparator = ''\r\n    this._varIndex = {}\r\n  }\r\n\r\n  varName (name) {\r\n    this._varIndex[name] = this._varIndex[name] || 0\r\n    let varName = name + this._varIndex[name]\r\n    this._varIndex[name] += 1\r\n\r\n    return varName\r\n  }\r\n}\r\n\r\nclass Base {\r\n  static create (outputPath) {\r\n    return new this(outputPath)\r\n  }\r\n\r\n  constructor (outputPath) {\r\n    this._outputPath  = outputPath\r\n    this._indentLevel = 0\r\n\r\n    this._buffers = new Map()\r\n    this._currentBuffer = null\r\n\r\n    this._stack = [new Scope()]\r\n    this._currentScope = this._stack[0]\r\n  }\r\n\r\n  serialize () {\r\n    return this._buffers\r\n  }\r\n\r\n  attributes_ (names) {}\r\n\r\n  compileRegex_ (charClass, name) {}\r\n\r\n  rule_ (name, block) {\r\n    this._ruleName = name\r\n    block()\r\n  }\r\n\r\n  assign_ (name, value) {\r\n    this._line(name + ' = ' + value)\r\n  }\r\n\r\n  pass_ () {}\r\n\r\n  _tab () {\r\n    return '  '\r\n  }\r\n\r\n  _newBuffer (ext, name = null) {\r\n    if (name) {\r\n      this._currentBuffer = join(this._outputPath, name + '.' + ext)\r\n    } else {\r\n      this._currentBuffer = join(this._outputPath + '.' + ext)\r\n    }\r\n    let buffer = this._initBuffer(this._currentBuffer)\r\n    this._buffers.set(this._currentBuffer, buffer)\r\n  }\r\n\r\n  _initBuffer (pathname) {\r\n    return ''\r\n  }\r\n\r\n  _template (lang, name, args) {\r\n    let pathname = join(__dirname, '..', '..', 'templates', lang, name),\r\n        template = handlebars.compile(readFileSync(pathname, 'utf8')),\r\n        result   = template(args).replace(/\\s*$/, '')\r\n\r\n    for (let line of result.split(/\\n/))\r\n      this._line(line, false)\r\n  }\r\n\r\n  _write (string) {\r\n    let name = this._currentBuffer\r\n    this._buffers.set(name, this._buffers.get(name) + string)\r\n  }\r\n\r\n  _indent (block) {\r\n    this._indentLevel += 1\r\n    block()\r\n    this._indentLevel -= 1\r\n  }\r\n\r\n  _scope (block, name, parentName, indent) {\r\n    let parent = this._stack[this._stack.length - 1]\r\n    let scope = new Scope(parent, name, parentName)\r\n    this._stack.push(scope)\r\n    this._currentScope = scope\r\n\r\n    if (indent !== false) {\r\n      this._indent(block)\r\n    } else {\r\n      block()\r\n    }\r\n    this._stack.pop()\r\n    this._currentScope = parent\r\n  }\r\n\r\n  _varName (name) {\r\n    return this._currentScope.varName(name)\r\n  }\r\n\r\n  _line (source, semicolon = true) {\r\n    let i = this._indentLevel\r\n\r\n    if (source.length > 0) {\r\n      while (i--) this._write(this._tab())\r\n      this._write(source)\r\n      if (semicolon) this._write(';')\r\n    }\r\n    this._newline()\r\n  }\r\n\r\n  _newline () {\r\n    this._write('\\n')\r\n  }\r\n\r\n  _return (expression) {\r\n    this._line('return ' + expression)\r\n  }\r\n}\r\n\r\nmodule.exports = Base\r\n</document_content>\r\n</document>\r\n<document index=\"47\">\r\n<source>src/builders/java.js</source>\r\n<document_content>'use strict'\r\n\r\nconst { sep } = require('path')\r\nconst Base = require('./base')\r\n\r\nconst TYPES = {\r\n  address:    'TreeNode',\r\n  chunk:      'String',\r\n  elements:   'List<TreeNode>',\r\n  index:      'int',\r\n  max:        'int'\r\n}\r\n\r\nclass Builder extends Base {\r\n  constructor (...args) {\r\n    super(...args)\r\n    this._labels = new Set()\r\n  }\r\n\r\n  _tab () {\r\n    return '    '\r\n  }\r\n\r\n  _initBuffer (pathname) {\r\n    let namespace = pathname.split(sep)\r\n    namespace.pop()\r\n    return 'package ' + namespace.join('.') + ';\\n\\n'\r\n  }\r\n\r\n  _quote (string) {\r\n    string = string.replace(/\\\\/g, '\\\\\\\\')\r\n                   .replace(/\"/g, '\\\\\"')\r\n                   .replace(/\\x08/g, '\\\\b')\r\n                   .replace(/\\t/g, '\\\\t')\r\n                   .replace(/\\n/g, '\\\\n')\r\n                   .replace(/\\f/g, '\\\\f')\r\n                   .replace(/\\r/g, '\\\\r')\r\n\r\n    return '\"' + string + '\"'\r\n  }\r\n\r\n  comment (lines) {\r\n    lines = lines.map((line) => ' * ' + line)\r\n    return ['/**'].concat(lines).concat([' */'])\r\n  }\r\n\r\n  package_ (name, actions, block) {\r\n    this._grammarName = name\r\n\r\n    this._newBuffer('java', 'Actions')\r\n    this._template('java', 'Actions.java', { actions })\r\n\r\n    this._newBuffer('java', 'CacheRecord')\r\n    this._template('java', 'CacheRecord.java')\r\n\r\n    block()\r\n  }\r\n\r\n  syntaxNodeClass_ () {\r\n    let name = 'TreeNode'\r\n\r\n    this._newBuffer('java', name)\r\n    this._template('java', 'TreeNode.java', { name })\r\n\r\n    return name\r\n  }\r\n\r\n  grammarModule_ (block) {\r\n    this._newBuffer('java', 'Grammar')\r\n\r\n    this._line('import java.util.ArrayList')\r\n    this._line('import java.util.HashMap')\r\n    this._line('import java.util.List')\r\n    this._line('import java.util.Map')\r\n    this._line('import java.util.regex.Pattern')\r\n    this._newline()\r\n\r\n    this._line('abstract class Grammar {', false)\r\n    this._indent(() => {\r\n      this.assign_('static TreeNode ' + this.nullNode_(), 'new TreeNode()')\r\n      this._newline()\r\n\r\n      this._line('int inputSize, offset, failure')\r\n      this._line('String input')\r\n      this._line('List<String[]> expected')\r\n      this._line('Map<Label, Map<Integer, CacheRecord>> cache')\r\n      this._line('Actions actions')\r\n      this._newline()\r\n      block()\r\n    })\r\n    this._line('}', false)\r\n  }\r\n\r\n  compileRegex_ (charClass, name) {\r\n    let regex  = charClass.regex,\r\n        source = regex.source.replace(/^\\^/, '\\\\A')\r\n\r\n    this.assign_('private static Pattern ' + name, 'Pattern.compile(' + this._quote(source) + ')')\r\n    charClass.constName = name\r\n  }\r\n\r\n  parserClass_ (root) {\r\n    this._newBuffer('java', 'ParseError')\r\n    this._template('java', 'ParseError.java')\r\n\r\n    let grammar = this._quote(this._grammarName)\r\n    let name = this._grammarName.replace(/\\./g, '')\r\n    this._newBuffer('java', name)\r\n    this._template('java', 'Parser.java', { grammar, root, name })\r\n\r\n    let labels = [...this._labels].sort()\r\n\r\n    this._newBuffer('java', 'Label')\r\n    this._template('java', 'Label.java', { labels })\r\n  }\r\n\r\n  class_ (name, parent, block) {\r\n    this._newline()\r\n    this._line('class ' + name + ' extends ' + parent + ' {', false)\r\n    this._scope(block, name)\r\n    this._line('}', false)\r\n  }\r\n\r\n  constructor_ (args, block) {\r\n    this._line(this._currentScope.name + '(String text, int offset, List<TreeNode> elements) {', false)\r\n    this._indent(() => {\r\n      this._line('super(text, offset, elements)')\r\n      block()\r\n    })\r\n    this._line('}', false)\r\n  }\r\n\r\n  method_ (name, args, block) {\r\n    this._newline()\r\n    this._line('TreeNode ' + name + '() {', false)\r\n    this._scope(block)\r\n    this._line('}', false)\r\n  }\r\n\r\n  cache_ (name, block) {\r\n    this._labels.add(name)\r\n\r\n    let temp    = this.localVars_({ address: this.nullNode_(), index: 'offset' }),\r\n        address = temp.address,\r\n        offset  = temp.index\r\n\r\n    this.assign_('Map<Integer, CacheRecord> rule', 'cache.get(Label.' + name + ')')\r\n    this.if_('rule == null', () => {\r\n      this.assign_('rule', 'new HashMap<Integer, CacheRecord>()')\r\n      this._line('cache.put(Label.' + name + ', rule)')\r\n    })\r\n    this.if_('rule.containsKey(offset)', () => {\r\n      this.assign_(address, 'rule.get(offset).node')\r\n      this.assign_('offset', 'rule.get(offset).tail')\r\n    }, () => {\r\n      block(address)\r\n      this._line('rule.put(' + offset + ', new CacheRecord(' + address + ', offset))')\r\n    })\r\n    this._return(address)\r\n  }\r\n\r\n  attribute_ (name, value) {\r\n    this._labels.add(name)\r\n    this._line('labelled.put(Label.' + name + ', ' + value + ')')\r\n  }\r\n\r\n  localVars_ (vars) {\r\n    let names = {}\r\n    for (let name in vars)\r\n      names[name] = this.localVar_(name, vars[name])\r\n    return names\r\n  }\r\n\r\n  localVar_ (name, value) {\r\n    let varName = this._varName(name)\r\n\r\n    if (value === undefined) value = this.nullNode_()\r\n    this.assign_(TYPES[name] + ' ' + varName, value)\r\n\r\n    return varName\r\n  }\r\n\r\n  chunk_ (length) {\r\n    let input = 'input',\r\n        ofs   = 'offset',\r\n        temp  = this.localVars_({ chunk: this.null_(), max: ofs + ' + ' + length })\r\n\r\n    this.if_(temp.max + ' <= inputSize', () => {\r\n      this._line(temp.chunk + ' = ' + input + '.substring(' + ofs + ', ' + temp.max + ')')\r\n    })\r\n    return temp.chunk\r\n  }\r\n\r\n  syntaxNode_ (address, start, end, elements, action, nodeClass) {\r\n    let args\r\n\r\n    if (action) {\r\n      action = 'actions.' + action\r\n      args   = ['input', start, end]\r\n    } else {\r\n      action = 'new ' + (nodeClass || 'TreeNode')\r\n      args   = ['input.substring(' + start + ', ' + end + ')', start]\r\n    }\r\n    args.push(elements || this.emptyList_())\r\n\r\n    this.assign_(address, action + '(' + args.join(', ') + ')')\r\n    this.assign_('offset', end)\r\n  }\r\n\r\n  ifNode_ (address, block, else_) {\r\n    this.if_(address + ' != ' + this.nullNode_(), block, else_)\r\n  }\r\n\r\n  unlessNode_ (address, block, else_) {\r\n    this.if_(address + ' == ' + this.nullNode_(), block, else_)\r\n  }\r\n\r\n  ifNull_ (elements, block, else_) {\r\n    this.if_(elements + ' == null', block, else_)\r\n  }\r\n\r\n  extendNode_ (address, nodeType) {\r\n    // TODO\r\n  }\r\n\r\n  failure_ (address, expected) {\r\n    let rule = this._quote(this._grammarName + '::' + this._ruleName)\r\n    expected = this._quote(expected)\r\n\r\n    this.assign_(address, this.nullNode_())\r\n\r\n    this.if_('offset > failure', () => {\r\n      this.assign_('failure', 'offset')\r\n      this.assign_('expected', 'new ArrayList<String[]>()')\r\n    })\r\n    this.if_('offset == failure', () => {\r\n      this.append_('expected', 'new String[] { ' + rule + ', ' + expected + ' }')\r\n    })\r\n  }\r\n\r\n  jump_ (address, rule) {\r\n    this.assign_(address, '_read_' + rule + '()')\r\n  }\r\n\r\n  _conditional (kwd, condition, block, else_) {\r\n    this._line(kwd + ' (' + condition + ') {', false)\r\n    this._indent(block)\r\n    if (else_) {\r\n      this._line('} else {', false)\r\n      this._indent(else_)\r\n    }\r\n    this._line('}', false)\r\n  }\r\n\r\n  if_ (condition, block, else_) {\r\n    this._conditional('if', condition, block, else_)\r\n  }\r\n\r\n  loop_ (block) {\r\n    this._conditional('while', 'true', block)\r\n  }\r\n\r\n  break_ () {\r\n    this._line('break')\r\n  }\r\n\r\n  sizeInRange_ (address, [min, max]) {\r\n    if (max === -1) {\r\n      return address + '.size() >= ' + min\r\n    } else if (max === 0) {\r\n      return address + '.size() == ' + min\r\n    } else {\r\n      return address + '.size() >= ' + min + ' && ' + address + '.size() <= ' + max\r\n    }\r\n  }\r\n\r\n  stringMatch_ (expression, string) {\r\n    return expression + ' != null && ' + expression + '.equals(' + this._quote(string) + ')'\r\n  }\r\n\r\n  stringMatchCI_ (expression, string) {\r\n    return expression + ' != null && ' + expression + '.toLowerCase().equals(' + this._quote(string) + '.toLowerCase())'\r\n  }\r\n\r\n  regexMatch_ (regex, string) {\r\n    return string + ' != null && ' + regex + '.matcher(' + string + ').matches()'\r\n  }\r\n\r\n  arrayLookup_ (expression, offset) {\r\n    return expression + '.get(' + offset + ')'\r\n  }\r\n\r\n  append_ (list, value, index) {\r\n    if (index === undefined)\r\n      this._line(list + '.add(' + value + ')')\r\n    else\r\n      this._line(list + '.add(' + index + ', ' + value + ')')\r\n  }\r\n\r\n  hasChars_ () {\r\n    return 'offset < inputSize'\r\n  }\r\n\r\n  nullNode_ () {\r\n    return 'FAILURE'\r\n  }\r\n\r\n  offset_ () {\r\n    return 'offset'\r\n  }\r\n\r\n  emptyList_ (size) {\r\n    return 'new ArrayList<TreeNode>(' + (size || '') + ')'\r\n  }\r\n\r\n  _emptyString () {\r\n    return '\"\"'\r\n  }\r\n\r\n  null_ () {\r\n    return 'null'\r\n  }\r\n}\r\n\r\nmodule.exports = Builder\r\n</document_content>\r\n</document>\r\n<document index=\"48\">\r\n<source>src/builders/python.js</source>\r\n<document_content>'use strict'\r\n\r\nconst Base = require('./base')\r\n\r\nclass Builder extends Base {\r\n  _tab () {\r\n    return '    '\r\n  }\r\n\r\n  _line (source) {\r\n    super._line(source, false)\r\n  }\r\n\r\n  _quote (string) {\r\n    string = string.replace(/\\\\/g, '\\\\\\\\')\r\n                   .replace(/'/g, \"\\\\'\")\r\n                   .replace(/\\x07/g, '\\\\a')\r\n                   .replace(/\\x08/g, '\\\\b')\r\n                   .replace(/\\t/g, '\\\\t')\r\n                   .replace(/\\n/g, '\\\\n')\r\n                   .replace(/\\v/g, '\\\\v')\r\n                   .replace(/\\f/g, '\\\\f')\r\n                   .replace(/\\r/g, '\\\\r')\r\n                   .replace(/\\x1b/g, '\\\\e')\r\n\r\n    return \"'\" + string + \"'\"\r\n  }\r\n\r\n  comment (lines) {\r\n    return lines.map((line) => '# ' + line)\r\n  }\r\n\r\n  package_ (name, actions, block) {\r\n    this._grammarName = name\r\n    this._newBuffer('py')\r\n    \r\n    this._line('from collections import defaultdict')\r\n    this._line('import re')\r\n    this._newline()\r\n    this._newline()\r\n    block()\r\n  }\r\n\r\n  syntaxNodeClass_ () {\r\n    let name = 'TreeNode'\r\n\r\n    this._template('python', 'tree_node.py', { name })\r\n    this._newline()\r\n    this._newline()\r\n\r\n    return name\r\n  }\r\n\r\n  grammarModule_ (block) {\r\n    this.assign_(this.nullNode_(), 'object()')\r\n    this._newline()\r\n    this._newline()\r\n    this.class_('Grammar', 'object', block)\r\n  }\r\n\r\n  compileRegex_ (charClass, name) {\r\n    let regex = charClass.regex\r\n    this.assign_(name, 're.compile(' + this._quote(regex.source) + ')')\r\n    charClass.constName = name\r\n    this._currentScope.methodSeparator = '\\n'\r\n  }\r\n\r\n  parserClass_ (root) {\r\n    let grammar = this._quote(this._grammarName)\r\n    this._template('python', 'parser.py', { grammar, root })\r\n  }\r\n\r\n  class_ (name, parent, block) {\r\n    this._line('class ' + name + '(' + parent + '):')\r\n    this._scope(block, name, parent)\r\n    this._newline()\r\n    this._newline()\r\n  }\r\n\r\n  constructor_ (args, block) {\r\n    this.method_('__init__', args, () => {\r\n      this._line('super(' + this._currentScope.name + ', self).__init__(' + args.join(', ') + ')')\r\n      block()\r\n    })\r\n  }\r\n\r\n  method_ (name, args, block) {\r\n    this._write(this._currentScope.methodSeparator)\r\n    this._currentScope.methodSeparator = '\\n'\r\n    args = ['self'].concat(args).join(', ')\r\n    this._line('def ' + name + '(' + args + '):')\r\n    this._scope(block)\r\n  }\r\n\r\n  cache_ (name, block) {\r\n    let temp      = this.localVars_({ address: this.nullNode_(), index: 'self._offset' }),\r\n        address   = temp.address,\r\n        offset    = temp.index,\r\n        cacheMap  = \"self._cache['\" + name + \"']\",\r\n        cacheAddr = cacheMap + '[' + offset + ']'\r\n\r\n    this.assign_('cached', cacheMap + '.get(' + offset + ')')\r\n\r\n    this.if_('cached', () => {\r\n      this.assign_('self._offset', 'cached[1]')\r\n      this._return('cached[0]')\r\n    })\r\n\r\n    block(address)\r\n    this.assign_(cacheAddr, '(' + address + ', self._offset)')\r\n    this._return(address)\r\n  }\r\n\r\n  attribute_ (name, value) {\r\n    this.assign_('self.' + name, value)\r\n  }\r\n\r\n  localVars_ (vars) {\r\n    let names = {}, lhs = [], rhs = []\r\n    for (let name in vars) {\r\n      let varName = this._varName(name)\r\n      lhs.push(varName)\r\n      rhs.push(vars[name])\r\n      names[name] = varName\r\n    }\r\n    this.assign_(lhs.join(', '), rhs.join(', '))\r\n    return names\r\n  }\r\n\r\n  localVar_ (name, value) {\r\n    let varName = this._varName(name)\r\n\r\n    if (value === undefined) value = this.nullNode_()\r\n    this.assign_(varName, value)\r\n\r\n    return varName\r\n  }\r\n\r\n  chunk_ (length) {\r\n    let input = 'self._input',\r\n        ofs   = 'self._offset',\r\n        temp  = this.localVars_({ chunk: this.null_(), max: ofs + ' + ' + length })\r\n\r\n    this.if_(temp.max + ' <= self._input_size', () => {\r\n      this.assign_(temp.chunk, input + '[' + ofs + ':' + temp.max + ']')\r\n    })\r\n    return temp.chunk\r\n  }\r\n\r\n  syntaxNode_ (address, start, end, elements, action, nodeClass) {\r\n    let args\r\n\r\n    if (action) {\r\n      action = 'self._actions.' + action\r\n      args   = ['self._input', start, end]\r\n    } else {\r\n      action = nodeClass || 'TreeNode'\r\n      args   = ['self._input[' + start + ':' + end + ']', start]\r\n    }\r\n    args.push(elements || this.emptyList_())\r\n\r\n    this.assign_(address, action + '(' + args.join(', ') + ')')\r\n    this.assign_('self._offset', end)\r\n  }\r\n\r\n  ifNode_ (address, block, else_) {\r\n    this.if_(address + ' is not ' + this.nullNode_(), block, else_)\r\n  }\r\n\r\n  unlessNode_ (address, block, else_) {\r\n    this.if_(address + ' is ' + this.nullNode_(), block, else_)\r\n  }\r\n\r\n  ifNull_ (elements, block, else_) {\r\n    this.if_(elements + ' is None', block, else_)\r\n  }\r\n\r\n  extendNode_ (address, nodeType) {\r\n    let cls = this.localVar_('cls', 'type(' + address + ')')\r\n    this.assign_(address + '.__class__', \"type(\" + cls + \".__name__ + '\" + nodeType + \"', (\" + cls + \", self._types.\" + nodeType + \"), {})\")\r\n  }\r\n\r\n  failure_ (address, expected) {\r\n    let rule = this._quote(this._grammarName + '::' + this._ruleName)\r\n    expected = this._quote(expected)\r\n\r\n    this.assign_(address, this.nullNode_())\r\n\r\n    this.if_('self._offset > self._failure', () => {\r\n      this.assign_('self._failure', 'self._offset')\r\n      this.assign_('self._expected', '[]')\r\n    })\r\n    this.if_('self._offset == self._failure', () => {\r\n      this.append_('self._expected', '(' + rule + ', ' + expected + ')')\r\n    })\r\n  }\r\n\r\n  jump_ (address, name) {\r\n    this.assign_(address, 'self._read_' + name + '()')\r\n  }\r\n\r\n  _conditional (kwd, condition, block, else_) {\r\n    this._line(kwd + ' ' + condition + ':')\r\n    this._indent(block)\r\n    if (else_) {\r\n      this._line('else:')\r\n      this._indent(else_)\r\n    }\r\n  }\r\n\r\n  if_ (condition, block, else_) {\r\n    this._conditional('if', condition, block, else_)\r\n  }\r\n\r\n  loop_ (block) {\r\n    this._conditional('while', 'True', block)\r\n  }\r\n\r\n  break_ () {\r\n    this._line('break')\r\n  }\r\n\r\n  pass_ () {\r\n    this._line('pass')\r\n  }\r\n\r\n  sizeInRange_ (address, [min, max]) {\r\n    if (max === -1) {\r\n      return 'len(' + address + ') >= ' + min\r\n    } else if (max === 0) {\r\n      return 'len(' + address + ') == ' + min\r\n    } else {\r\n      return 'len(' + address + ') >= ' + min + ' and len(' + address + ') <= ' + max\r\n    }\r\n  }\r\n\r\n  stringMatch_ (expression, string) {\r\n    return expression + ' == ' + this._quote(string)\r\n  }\r\n\r\n  stringMatchCI_ (expression, string) {\r\n    return expression + ' is not None and ' +\r\n      expression + '.lower() == ' + this._quote(string) + '.lower()'\r\n  }\r\n\r\n  regexMatch_ (regex, string) {\r\n    return string + ' is not None and Grammar.' + regex + '.search(' + string + ')'\r\n  }\r\n\r\n  arrayLookup_ (expression, index) {\r\n    return expression + '[' + index + ']'\r\n  }\r\n\r\n  append_ (list, value) {\r\n    this._line(list + '.append(' + value + ')')\r\n  }\r\n\r\n  hasChars_ () {\r\n    return 'self._offset < self._input_size'\r\n  }\r\n\r\n  nullNode_ () {\r\n    return 'FAILURE'\r\n  }\r\n\r\n  offset_ () {\r\n    return 'self._offset'\r\n  }\r\n\r\n  emptyList_ () {\r\n    return '[]'\r\n  }\r\n\r\n  _emptyString () {\r\n    return \"''\"\r\n  }\r\n\r\n  null_ () {\r\n    return 'None'\r\n  }\r\n}\r\n\r\nmodule.exports = Builder\r\n</document_content>\r\n</document>\r\n<document index=\"49\">\r\n<source>src/canopy.js</source>\r\n<document_content>'use strict'\r\n\r\nconst Compiler = require('./compiler')\r\n\r\nmodule.exports = {\r\n  builders: {\r\n    java:       require('./builders/java'),\r\n    javascript: require('./builders/javascript'),\r\n    python:     require('./builders/python'),\r\n    ruby:       require('./builders/ruby')\r\n  },\r\n\r\n  compile (grammar, builder) {\r\n    let compiler = new Compiler(grammar, builder)\r\n    return compiler.toSource()\r\n  }\r\n}\r\n</document_content>\r\n</document>\r\n<document index=\"50\">\r\n<source>src/compiler.js</source>\r\n<document_content>'use strict'\r\n\r\nconst metagrammar = require('./meta_grammar')\r\n\r\nconst Grammar      = require('./ast/grammar'),\r\n      Rule         = require('./ast/rule'),\r\n      Choice       = require('./ast/choice'),\r\n      Extension    = require('./ast/extension'),\r\n      Action       = require('./ast/action'),\r\n      Sequence     = require('./ast/sequence'),\r\n      SequencePart = require('./ast/sequence_part'),\r\n      Predicate    = require('./ast/predicate'),\r\n      Repeat       = require('./ast/repeat'),\r\n      Maybe        = require('./ast/maybe'),\r\n      Reference    = require('./ast/reference'),\r\n      String       = require('./ast/string'),\r\n      CharClass    = require('./ast/char_class'),\r\n      AnyChar      = require('./ast/any_char')\r\n\r\nconst actions = {\r\n  grammar (text, a, b, [_, name, rules]) {\r\n    rules = rules.elements.map((e) => e.rule)\r\n    return new Grammar(name.id.text, rules)\r\n  },\r\n\r\n  rule (text, a, b, [name, _, body]) {\r\n    return new Rule(name.text, body)\r\n  },\r\n\r\n  paren_expr (text, a, b, [_, __, expr]) {\r\n    return expr\r\n  },\r\n\r\n  choice (text, a, b, [first, rest]) {\r\n    let parts = [first].concat(rest.elements.map((e) => e.expr))\r\n    return new Choice(parts)\r\n  },\r\n\r\n  extension (text, a, b, [expression, _, typeTag]) {\r\n    return new Extension(expression, typeTag.id.text)\r\n  },\r\n\r\n  action (text, a, b, [root, _, name]) {\r\n    let actionName = name.id.text\r\n\r\n    if (root instanceof Maybe)\r\n      return new Maybe(new Action(root._expression, actionName))\r\n    else\r\n      return new Action(root, actionName)\r\n  },\r\n\r\n  sequence (text, a, b, [first, rest]) {\r\n    let parts = [first].concat(rest.elements.map((e) => e.expr))\r\n    return new Sequence(parts)\r\n  },\r\n\r\n  sequence_part (text, a, b, [muted, label, expr]) {\r\n    muted = muted.text !== ''\r\n    label = label.id\r\n\r\n    return new SequencePart(expr, label && label.text, muted)\r\n  },\r\n\r\n  predicate (text, a, b, [pred, _, expr]) {\r\n    let polarities = { '&': true, '!': false }\r\n    return new Predicate(expr, polarities[pred.text])\r\n  },\r\n\r\n  repeat (text, a, b, [expr, _, quant]) {\r\n    let count\r\n    let range = quant.numeric_quantifier\r\n\r\n    if (quant.text === '*') {\r\n      count = [0, -1]\r\n    } else if (quant.text === '+') {\r\n      count = [1, -1]\r\n    } else if (range.max.text === '') {\r\n      count = [parseInt(range.min.text, 10), 0]\r\n    } else if (range.max.n.text === '') {\r\n      count = [parseInt(range.min.text, 10), -1]\r\n    } else {\r\n      count = [parseInt(range.min.text, 10), parseInt(range.max.n.text, 10)]\r\n    }\r\n    return new Repeat(expr, count)\r\n  },\r\n\r\n  maybe (text, a, b, [expr]) {\r\n    return new Maybe(expr)\r\n  },\r\n\r\n  reference (text, a, b, [expr]) {\r\n    return new Reference(expr.text)\r\n  },\r\n\r\n  string (text, a, b, elements) {\r\n    text = text.substring(a, b)\r\n    let value = eval(text)\r\n\r\n    return new String(text, value, false)\r\n  },\r\n\r\n  ci_string (text, a, b, [_, string]) {\r\n    text = text.substring(a, b)\r\n    let value = eval('\"' + string.text + '\"')\r\n\r\n    return new String(text, value, true)\r\n  },\r\n\r\n  char_class (text, a, b, elements) {\r\n    text = text.substring(a, b)\r\n    return new CharClass(text, new RegExp('^' + text))\r\n  },\r\n\r\n  any_char (text, a, b, elements) {\r\n    return new AnyChar()\r\n  }\r\n}\r\n\r\nclass Compiler {\r\n  constructor (grammarText, builder) {\r\n    this._grammarText = grammarText\r\n    this._builder = builder\r\n  }\r\n\r\n  parseTree () {\r\n    if (this._tree) return this._tree\r\n\r\n    this._tree = metagrammar.parse(this._grammarText, {actions: actions})\r\n    if (this._tree) return this._tree\r\n\r\n    let message = metagrammar.formatError(metagrammar.Parser.lastError)\r\n    throw new Error(message)\r\n  }\r\n\r\n  toSource () {\r\n    this.parseTree().compile(this._builder)\r\n    return this._builder.serialize()\r\n  }\r\n}\r\n\r\nmodule.exports = Compiler\r\n</document_content>\r\n</document>\r\n<document index=\"51\">\r\n<source>src/meta_grammar.peg</source>\r\n<document_content>grammar Canopy.MetaGrammar\r\n\r\n# ==============================================================================\r\n\r\ngrammar               <-  _* grammar_name (_* rule)+ _* %grammar\r\n\r\ngrammar_name          <-  `grammar` \":\"? _+ id:object_identifier\r\n\r\nrule                  <-  identifier assignment parsing_expression %rule\r\n\r\nassignment            <-  _+ \"<-\" _+\r\n\r\n# ==============================================================================\r\n\r\n_                     <-  [ \\t\\n\\r] / comment\r\n\r\ncomment               <-  \"#\" [^\\n]*\r\n\r\nobject_identifier     <-  identifier (\".\" identifier)*\r\n\r\nidentifier            <-  [a-zA-Z_] [a-zA-Z0-9_]*\r\n\r\ninteger               <-  [1-9] [0-9]*\r\n\r\n# ==============================================================================\r\n\r\nparsing_expression    <-  choice\r\n                       /  choice_part\r\n\r\nchoice_part           <-  action_expression\r\n                       /  typed_expression\r\n                       /  sequence\r\n                       /  sequence_element\r\n\r\nsequence_element      <-  predicated_atom\r\n                       /  repeated_atom\r\n                       /  maybe_atom\r\n                       /  atom\r\n\r\natom                  <-  reference\r\n                       /  terminal\r\n                       /  paren_expression\r\n\r\nterminal              <-  literal_string\r\n                       /  ci_string\r\n                       /  char_class\r\n                       /  any_char\r\n\r\n# ==============================================================================\r\n\r\naction_expression     <-  actionable _+ action_tag %action\r\n\r\nactionable            <-  sequence\r\n                       /  repeated_atom\r\n                       /  maybe_atom\r\n                       /  terminal\r\n                       /  \"(\" _* actionable _* \")\" %paren_expr\r\n\r\naction_tag            <-  \"%\" id:identifier\r\n\r\n# ==============================================================================\r\n\r\ntyped_expression      <-  typable _+ type_tag %extension\r\n\r\ntypable               <-  sequence\r\n                       /  sequence_element\r\n\r\ntype_tag              <-  \"<\" id:object_identifier \">\"\r\n\r\n# ==============================================================================\r\n\r\nchoice                <-  choice_part (_* \"/\" _* expr:choice_part)+ %choice\r\n\r\n# ==============================================================================\r\n\r\nsequence              <-  sequence_part (_+ expr:sequence_part)+ %sequence\r\n\r\nsequence_part         <-  mute? label? sequence_element %sequence_part\r\n\r\nmute                  <-  \"@\"\r\n\r\nlabel                 <-  id:identifier \":\"\r\n\r\n# ==============================================================================\r\n\r\nrepeated_atom         <-  atom _* quantifier %repeat\r\n\r\nquantifier            <-  \"*\" / \"+\" / \"{\" _* numeric_quantifier _* \"}\"\r\n\r\nnumeric_quantifier    <-  min:integer max:(_* \",\" _* n:integer?)?\r\n\r\n# ==============================================================================\r\n\r\nparen_expression      <-  \"(\" _* parsing_expression _* \")\" %paren_expr\r\n\r\npredicated_atom       <-  (\"&\" / \"!\") _* atom %predicate\r\n\r\nmaybe_atom            <-  atom _* \"?\" %maybe\r\n\r\nreference             <-  identifier !assignment %reference\r\n\r\nliteral_string        <-  '\"' (\"\\\\\" . / [^\"])* '\"' %string\r\n                       /  \"'\" (\"\\\\\" . / [^'])* \"'\" %string\r\n\r\nci_string             <-  \"`\" (\"\\\\\" . / [^`])* \"`\" %ci_string\r\n\r\nchar_class            <-  \"[\" \"^\"? (\"\\\\\" . / [^\\]])+ \"]\" %char_class\r\n\r\nany_char              <-  \".\" %any_char\r\n</document_content>\r\n</document>\r\n<document index=\"52\">\r\n<source>templates/java/Actions.java</source>\r\n<document_content>import java.util.List;\r\n\r\npublic interface Actions {\r\n{{#each actions}}\r\n    public TreeNode {{this}}(String input, int start, int end, List<TreeNode> elements);\r\n{{/each}}\r\n}\r\n</document_content>\r\n</document>\r\n<document index=\"53\">\r\n<source>templates/java/CacheRecord.java</source>\r\n<document_content>class CacheRecord {\r\n    TreeNode node;\r\n    int tail;\r\n\r\n    CacheRecord(TreeNode node, int tail) {\r\n        this.node = node;\r\n        this.tail = tail;\r\n    }\r\n}\r\n</document_content>\r\n</document>\r\n<document index=\"54\">\r\n<source>templates/java/Label.java</source>\r\n<document_content>public enum Label {\r\n{{#each labels}}\r\n    {{this}}{{#unless @last}},{{/unless}}\r\n{{/each}}\r\n}\r\n</document_content>\r\n</document>\r\n<document index=\"55\">\r\n<source>templates/java/ParseError.java</source>\r\n<document_content>public class ParseError extends Exception {\r\n    public ParseError(String message) {\r\n        super(message);\r\n    }\r\n}\r\n</document_content>\r\n</document>\r\n<document index=\"56\">\r\n<source>templates/java/Parser.java</source>\r\n<document_content>import java.util.ArrayList;\r\nimport java.util.EnumMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\npublic class {{name}} extends Grammar {\r\n    public {{name}}(String input, Actions actions) {\r\n        this.input = input;\r\n        this.inputSize = input.length();\r\n        this.actions = actions;\r\n        this.offset = 0;\r\n        this.cache = new EnumMap<Label, Map<Integer, CacheRecord>>(Label.class);\r\n        this.failure = 0;\r\n        this.expected = new ArrayList<String[]>();\r\n    }\r\n\r\n    public static TreeNode parse(String input, Actions actions) throws ParseError {\r\n        {{name}} parser = new {{name}}(input, actions);\r\n        return parser.parse();\r\n    }\r\n\r\n    public static TreeNode parse(String input) throws ParseError {\r\n        return parse(input, null);\r\n    }\r\n\r\n    private static String formatError(String input, int offset, List<String[]> expected) {\r\n        String[] lines = input.split(\"\\n\");\r\n        int lineNo = 0, position = 0;\r\n\r\n        while (position <= offset) {\r\n            position += lines[lineNo].length() + 1;\r\n            lineNo += 1;\r\n        }\r\n\r\n        String line = lines[lineNo - 1];\r\n        String message = \"Line \" + lineNo + \": expected one of:\\n\\n\";\r\n\r\n        for (String[] pair : expected) {\r\n            message += \"    - \" + pair[1] + \" from \" + pair[0] + \"\\n\";\r\n        }\r\n\r\n        String number = \"\" + lineNo;\r\n        while (number.length() < 6) number = \" \" + number;\r\n        message += \"\\n\" + number + \" | \" + line + \"\\n\";\r\n\r\n        position -= line.length() + 10;\r\n\r\n        while (position < offset) {\r\n            message += \" \";\r\n            position += 1;\r\n        }\r\n        return message + \"^\";\r\n    }\r\n\r\n    private TreeNode parse() throws ParseError {\r\n        TreeNode tree = _read_{{root}}();\r\n        if (tree != FAILURE && offset == inputSize) {\r\n            return tree;\r\n        }\r\n        if (expected.isEmpty()) {\r\n            failure = offset;\r\n            expected.add(new String[] { {{{grammar}}}, \"<EOF>\" });\r\n        }\r\n        throw new ParseError(formatError(input, failure, expected));\r\n    }\r\n}\r\n</document_content>\r\n</document>\r\n<document index=\"57\">\r\n<source>templates/java/TreeNode.java</source>\r\n<document_content>import java.util.ArrayList;\r\nimport java.util.EnumMap;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\npublic class {{name}} implements Iterable<{{name}}> {\r\n    public String text;\r\n    public int offset;\r\n    public List<{{name}}> elements;\r\n\r\n    Map<Label, {{name}}> labelled;\r\n\r\n    public {{name}}() {\r\n        this(\"\", -1, new ArrayList<{{name}}>(0));\r\n    }\r\n\r\n    public {{name}}(String text, int offset, List<{{name}}> elements) {\r\n        this.text = text;\r\n        this.offset = offset;\r\n        this.elements = elements;\r\n        this.labelled = new EnumMap<Label, {{name}}>(Label.class);\r\n    }\r\n\r\n    public {{name}} get(Label key) {\r\n        return labelled.get(key);\r\n    }\r\n\r\n    public Iterator<{{name}}> iterator() {\r\n        return elements.iterator();\r\n    }\r\n}\r\n</document_content>\r\n</document>\r\n<document index=\"58\">\r\n<source>templates/python/parser.py</source>\r\n<document_content>class Parser(Grammar):\r\n    def __init__(self, input, actions, types):\r\n        self._input = input\r\n        self._input_size = len(input)\r\n        self._actions = actions\r\n        self._types = types\r\n        self._offset = 0\r\n        self._cache = defaultdict(dict)\r\n        self._failure = 0\r\n        self._expected = []\r\n\r\n    def parse(self):\r\n        tree = self._read_{{root}}()\r\n        if tree is not FAILURE and self._offset == self._input_size:\r\n            return tree\r\n        if not self._expected:\r\n            self._failure = self._offset\r\n            self._expected.append(({{{grammar}}}, '<EOF>'))\r\n        raise ParseError(format_error(self._input, self._failure, self._expected))\r\n\r\n\r\nclass ParseError(SyntaxError):\r\n    pass\r\n\r\n\r\ndef parse(input, actions=None, types=None):\r\n    parser = Parser(input, actions, types)\r\n    return parser.parse()\r\n\r\ndef format_error(input, offset, expected):\r\n    lines = input.split('\\n')\r\n    line_no, position = 0, 0\r\n\r\n    while position <= offset:\r\n        position += len(lines[line_no]) + 1\r\n        line_no += 1\r\n\r\n    line = lines[line_no - 1]\r\n    message = 'Line ' + str(line_no) + ': expected one of:\\n\\n'\r\n\r\n    for pair in expected:\r\n        message += '    - ' + pair[1] + ' from ' + pair[0] + '\\n'\r\n\r\n    number = str(line_no)\r\n    while len(number) < 6:\r\n        number = ' ' + number\r\n\r\n    message += '\\n' + number + ' | ' + line + '\\n'\r\n    message += ' ' * (len(line) + 10 + offset - position)\r\n    return message + '^'\r\n</document_content>\r\n</document>\r\n<document index=\"59\">\r\n<source>templates/python/tree_node.py</source>\r\n<document_content>class {{name}}(object):\r\n    def __init__(self, text, offset, elements):\r\n        self.text = text\r\n        self.offset = offset\r\n        self.elements = elements\r\n\r\n    def __iter__(self):\r\n        for el in self.elements:\r\n            yield el\r\n</document_content>\r\n</document>\r\n<document index=\"60\">\r\n<source>test/grammars/choices.peg</source>\r\n<document_content>grammar Choices\r\n\r\ntest <- \"choice-abc: \" choice_abc\r\n      / \"choice-seq: \" choice_seq\r\n      / \"choice-rep: \" choice_rep\r\n      / \"choice-bind: \" choice_bind\r\n\r\nchoice_abc  <- \"a\" / \"b\" / \"c\"\r\nchoice_seq  <- (\"re\" / \"rep\") \"peat\"\r\nchoice_rep  <- (\"a\" / \"b\" / \"c\")+\r\nchoice_bind <- \"a\" \"b\" / \"c\" \"d\" / \"e\" \"f\"\r\n</document_content>\r\n</document>\r\n<document index=\"61\">\r\n<source>test/grammars/extensions.peg</source>\r\n<document_content>grammar Extensions\r\n\r\ntest <- \"ext-str: \" ext_str\r\n      / \"ext-class: \" ext_class\r\n      / \"ext-any: \" ext_any\r\n      / \"ext-maybe: \" ext_maybe\r\n      / \"ext-rep: \" ext_rep\r\n      / \"ext-seq: \" ext_seq\r\n      / \"ext-paren: \" ext_paren\r\n      / \"ext-choice: \" ext_choice\r\n      / \"ext-ref: \" ext_ref\r\n      / \"ext-ns: \" ext_ns\r\n\r\next_str    <- \"hello\" <Ext>\r\next_class  <- [a-z] <Ext>\r\next_any    <- . <Ext>\r\next_maybe  <- \"hello\"? <Ext>\r\next_rep    <- [a-z]+ <Ext>\r\next_seq    <- \"x\" \"y\" \"z\" <Ext>\r\next_paren  <- (((((.))))) <Ext>\r\next_choice <- (\"0\" / [1-9] [0-9]*) <Ext>\r\next_ref    <- hello <Ext>\r\nhello      <- \"hello\"\r\next_ns     <- hello <NS.Ext>\r\n</document_content>\r\n</document>\r\n<document index=\"62\">\r\n<source>test/grammars/node_actions.peg</source>\r\n<document_content>grammar NodeActions\r\n\r\ntest <- \"act-str: \" act_str\r\n      / \"act-class: \" act_class\r\n      / \"act-any: \" act_any\r\n      / \"act-maybe: \" act_maybe\r\n      / \"act-rep: \" act_rep\r\n      / \"act-seq: \" act_seq\r\n      / \"act-seq-mute: \" act_seq_mute\r\n      / \"act-paren: \" act_paren\r\n      / \"act-rep-paren: \" act_rep_paren\r\n      / \"act-choice: \" act_choice\r\n      / \"act-falsey: \" act_falsey\r\n      / \"act-falsey-pred: \" act_falsey_pred\r\n      / \"act-falsey-rep: \" act_falsey_rep\r\n      / \"act-falsey-opt: \" act_falsey_opt\r\n      / \"act-falsey-seq: \" act_falsey_seq\r\n      / \"act-falsey-choice: \" act_falsey_choice\r\n\r\nact_str       <- \"hello\" %make_str\r\nact_class     <- [a-z] %make_char\r\nact_any       <- . %make_any\r\nact_maybe     <- \"hello\"? %make_maybe\r\nact_rep       <- [a-z]+ %make_rep\r\nact_seq       <- \"x\" \"y\" \"z\" %make_seq\r\nact_seq_mute  <- \"x\" @\"y\" \"z\" %make_seq\r\nact_paren     <- (((((.))))) %make_paren\r\nact_rep_paren <- (\"a\" \"b\")+ %make_rep_paren\r\nact_choice    <- \"0\" %make_zero / [1-9] [0-9]* %make_int\r\n\r\nact_falsey <- \"null\"  %make_null\r\n            / \"false\" %make_false\r\n            / \"0\"     %make_0\r\n            / \"''\"    %make_empty_str\r\n            / \"[]\"    %make_empty_list\r\n\r\nact_falsey_pred   <- &act_falsey act_choice\r\nact_falsey_rep    <- act_falsey+\r\nact_falsey_opt    <- act_falsey?\r\nact_falsey_seq    <- \"(\" act_falsey \")\"\r\nact_falsey_choice <- act_falsey / \"a\"\r\n</document_content>\r\n</document>\r\n<document index=\"63\">\r\n<source>test/grammars/predicates.peg</source>\r\n<document_content>grammar Predicates\r\n\r\ntest <- \"pos-name: \" pos_name\r\n      / \"neg-name: \" neg_name\r\n      / \"pos-seq: \" pos_seq\r\n      / \"pos-ref: \" pos_ref\r\n      / \"neg-tail-str: \" neg_tail_str\r\n      / \"neg-tail-class: \" neg_tail_class\r\n      / \"neg-tail-any: \" neg_tail_any\r\n\r\npos_name <- &[A-Z] word\r\nneg_name <- ![A-Z] word\r\nword     <- [a-zA-Z]+\r\n\r\npos_ref  <- &alpha alphanum*\r\nalpha    <- [a-z]\r\nalphanum <- [a-z0-9]\r\n\r\npos_seq <- &(\"<\" [a-z]+) \"<\" [a-z0-9]* \">\"\r\n\r\nneg_tail_str   <- \"word\" !\"more text\"\r\nneg_tail_class <- \"word\" ![a-z]\r\nneg_tail_any   <- \"word\" !.\r\n</document_content>\r\n</document>\r\n<document index=\"64\">\r\n<source>test/grammars/quantifiers.peg</source>\r\n<document_content>grammar Quantifiers\r\n\r\ntest <- \"maybe: \" maybe\r\n      / \"rep-0: \" rep_0\r\n      / \"rep-1: \" rep_1\r\n      / \"greedy-0: \" greedy_0\r\n      / \"greedy-1: \" greedy_1\r\n      / \"rep-exact: \" rep_exact\r\n      / \"rep-min: \" rep_min\r\n      / \"rep-range: \" rep_range\r\n      / \"color-ref: \" color_ref\r\n      / \"color-choice: \" color_choice\r\n\r\nmaybe    <- [0-9]?\r\nrep_0    <- [a-z]*\r\nrep_1    <- [a-z]+\r\ngreedy_0 <- [a-z]* [a-z]\r\ngreedy_1 <- [a-z]+ [a-z]\r\n\r\nrep_exact <- [a-z]{3}\r\nrep_min   <- [a-z]{3,}\r\nrep_range <- [a-z]{3,5}\r\n\r\ncolor_ref    <- \"#\" hex+\r\ncolor_choice <- \"#\" ([0-9] / [a-f])+\r\nhex          <- [0-9a-f]\r\n</document_content>\r\n</document>\r\n<document index=\"65\">\r\n<source>test/grammars/sequences.peg</source>\r\n<document_content>grammar Sequences\r\n\r\ntest <- \"seq-str: \" seq_str\r\n      / \"seq-maybe-1: \" seq_maybe_1\r\n      / \"seq-maybe-2: \" seq_maybe_2\r\n      / \"seq-maybe-3: \" seq_maybe_3\r\n      / \"seq-rep-1: \" seq_repeat_1\r\n      / \"seq-rep-2: \" seq_repeat_2\r\n      / \"seq-rep-subseq: \" seq_repeat_seq\r\n      / \"seq-label: \" seq_label\r\n      / \"seq-label-subseq: \" seq_label_seq\r\n      / \"seq-mute-1: \" seq_mute_1\r\n      / \"seq-mute-2: \" seq_mute_2\r\n      / \"seq-mute-3: \" seq_mute_3\r\n      / \"seq-mute-4: \" seq_mute_4\r\n      / \"seq-mute-first: \" seq_mute_first\r\n      / \"seq-mute-last: \" seq_mute_last\r\n      / \"seq-refs: \" seq_refs\r\n      / \"seq-mute-refs: \" seq_mute_refs\r\n\r\nseq_str <- \"a\" \"b\" \"c\"\r\n\r\nseq_maybe_1 <- \"a\"? \"b\" \"c\"\r\nseq_maybe_2 <- \"a\" \"b\"? \"c\"\r\nseq_maybe_3 <- \"a\" \"b\" \"c\"?\r\n\r\nseq_repeat_1 <- [a-z]* \"0\"\r\nseq_repeat_2 <- [a-z]* \"z\"\r\n\r\nseq_repeat_seq <- \"a\" (\"b\" [0-9])* \"c\"\r\n\r\nseq_label     <- \"v\" num:[0-9]+\r\nseq_label_seq <- \"v\" (\".\" part:[A-Z]+)+\r\n\r\nseq_mute_1 <- [a-z]+ @\":\" @\" \"* [0-9]+\r\nseq_mute_2 <- [a-z]+ @(\":\" \" \"*) [0-9]+\r\nseq_mute_3 <- \"v\" (@\".\" [A-Z]+)+\r\nseq_mute_4 <- \"a\" @(\"b\" @\"c\" \"d\") \"e\"\r\n\r\nseq_mute_first <- @\"a\" \"b\" \"c\"\r\nseq_mute_last  <- \"a\" \"b\" @\"c\"\r\n\r\nseq_refs      <- a b:c\r\nseq_mute_refs <- a @c\r\na             <- \"a\"\r\nc             <- \"c\"\r\n</document_content>\r\n</document>\r\n<document index=\"66\">\r\n<source>test/grammars/terminals.peg</source>\r\n<document_content>grammar Terminals\r\n\r\ntest <- \"any: \" any_char\r\n      / \"pos-class: \" positive_class\r\n      / \"neg-class: \" negative_class\r\n      / \"str-1: \" single_quoted_string\r\n      / \"str-2: \" double_quoted_string\r\n      / \"str-ci: \" uncased_string\r\n\r\nany_char <- .\r\n\r\npositive_class <- [a-z]\r\nnegative_class <- [^a-z]\r\n\r\nsingle_quoted_string <- 'oat'\r\ndouble_quoted_string <- \"oat\"\r\nuncased_string       <- `oat`\r\n</document_content>\r\n</document>\r\n<document index=\"67\">\r\n<source>test/java/ChoicesTest.java</source>\r\n<document_content>package canopy.choices;\r\n\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\nimport static org.junit.jupiter.api.Assertions.assertThrows;\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport helpers.Node;\r\nimport helpers.NodeSpec;\r\n\r\nimport test.grammars.choices.Label;\r\nimport test.grammars.choices.ParseError;\r\nimport test.grammars.choices.Choices;\r\nimport test.grammars.choices.TreeNode;\r\n\r\nclass ChoiceStringsTest extends ParseHelper {\r\n    @Test\r\n    void parsesAnyOfTheChoiceOptions() throws ParseError {\r\n        expect(Choices.parse(\"choice-abc: a\")).toMatch(node(\"a\", 12));\r\n        expect(Choices.parse(\"choice-abc: b\")).toMatch(node(\"b\", 12));\r\n        expect(Choices.parse(\"choice-abc: c\")).toMatch(node(\"c\", 12));\r\n    }\r\n\r\n    @Test\r\n    void rejectsInputMatchingNoneOfTheOptions() {\r\n        assertThrows(ParseError.class, () -> Choices.parse(\"choice-abc: d\"));\r\n    }\r\n\r\n    @Test\r\n    void rejectsSuperstringsOfTheOptions() {\r\n        assertThrows(ParseError.class, () -> Choices.parse(\"choice-abc: ab\"));\r\n    }\r\n\r\n    @Test\r\n    void parsesAChoiceAsPartOfASequence() throws ParseError {\r\n        expect(Choices.parse(\"choice-seq: repeat\")).toMatch(\r\n            node(\"repeat\", 12)\r\n                .elem(node(\"re\", 12).noElems())\r\n                .elem(node(\"peat\", 14).noElems())\r\n        );\r\n    }\r\n\r\n    @Test\r\n    void doesNotBacktrackIfLaterRulesFail() {\r\n        assertThrows(ParseError.class, () -> Choices.parse(\"choice-seq: reppeat\"));\r\n    }\r\n}\r\n\r\nclass ChoiceRepetitionTest extends ParseHelper {\r\n    @Test\r\n    void parsesADifferentOptionOnEachIteration() throws ParseError {\r\n        expect(Choices.parse(\"choice-rep: abcabba\")).toMatch(\r\n            node(\"abcabba\", 12)\r\n                .elem(node(\"a\", 12).noElems())\r\n                .elem(node(\"b\", 13).noElems())\r\n                .elem(node(\"c\", 14).noElems())\r\n                .elem(node(\"a\", 15).noElems())\r\n                .elem(node(\"b\", 16).noElems())\r\n                .elem(node(\"b\", 17).noElems())\r\n                .elem(node(\"a\", 18).noElems())\r\n        );\r\n    }\r\n\r\n    @Test\r\n    void rejectsIfAnyIterationDoesNotMatchTheOptions() {\r\n        assertThrows(ParseError.class, () -> Choices.parse(\"choice-rep: abcadba\"));\r\n    }\r\n}\r\n\r\nclass ChoiceSequenceTest extends ParseHelper {\r\n    @Test\r\n    void parsesOneBranchOfTheChoice() throws ParseError {\r\n        expect(Choices.parse(\"choice-bind: ab\")).toMatch(\r\n            node(\"ab\", 13)\r\n                .elem(node(\"a\", 13).noElems())\r\n                .elem(node(\"b\", 14).noElems())\r\n        );\r\n    }\r\n\r\n    @Test\r\n    void testBindsSequencesTighterThanChoices() {\r\n        assertThrows(ParseError.class, () -> Choices.parse(\"choice-bind: abef\"));\r\n    }\r\n}\r\n\r\nclass ParseHelper {\r\n    Node<Label> expect(TreeNode node) {\r\n        return new NodeWrapper(node.elements.get(1));\r\n    }\r\n\r\n    NodeSpec<Label> node(String text, int offset) {\r\n        return new NodeSpec<Label>(text, offset);\r\n    }\r\n}\r\n\r\nclass NodeWrapper implements Node<Label> {\r\n    private TreeNode node;\r\n\r\n    NodeWrapper(TreeNode node) {\r\n        this.node = node;\r\n    }\r\n\r\n    public String text() {\r\n        return node.text;\r\n    }\r\n\r\n    public int offset() {\r\n        return node.offset;\r\n    }\r\n\r\n    public List<Node<Label>> elements() {\r\n        return node.elements.stream()\r\n            .map((elem) -> new NodeWrapper(elem))\r\n            .collect(Collectors.toList());\r\n    }\r\n\r\n    public Node<Label> get(Label key) {\r\n        return new NodeWrapper(node.get(key));\r\n    }\r\n}\r\n</document_content>\r\n</document>\r\n<document index=\"68\">\r\n<source>test/java/helpers/ElementsSpec.java</source>\r\n<document_content>package helpers;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport static org.junit.jupiter.api.Assertions.assertEquals;\r\n\r\npublic class ElementsSpec<L> {\r\n    private ArrayList<NodeSpec<L>> elements = null;\r\n\r\n    public void noElems() {\r\n        elements = new ArrayList<NodeSpec<L>>();\r\n    }\r\n\r\n    public void elem(NodeSpec<L> elem) {\r\n        if (elements == null) {\r\n            elements = new ArrayList<NodeSpec<L>>();\r\n        }\r\n        elements.add(elem);\r\n    }\r\n\r\n    public void check(Node<L> node) {\r\n        if (elements == null) {\r\n            return;\r\n        }\r\n\r\n        List<Node<L>> actualElems = node.elements();\r\n        assertEquals(elements.size(), actualElems.size());\r\n\r\n        for (int i = 0; i < elements.size(); i++) {\r\n            elements.get(i).assertMatches(actualElems.get(i));\r\n        }\r\n    }\r\n}\r\n</document_content>\r\n</document>\r\n<document index=\"69\">\r\n<source>test/java/helpers/Node.java</source>\r\n<document_content>package helpers;\r\n\r\nimport java.util.List;\r\n\r\npublic interface Node<L> {\r\n    public String text();\r\n    public int offset();\r\n    public List<Node<L>> elements();\r\n    public Node<L> get(L label);\r\n\r\n    default void toMatch(NodeSpec<L> spec) {\r\n        spec.assertMatches(this);\r\n    }\r\n}\r\n</document_content>\r\n</document>\r\n<document index=\"70\">\r\n<source>test/java/helpers/NodeSpec.java</source>\r\n<document_content>package helpers;\r\n\r\nimport java.util.HashMap;\r\nimport static org.junit.jupiter.api.Assertions.assertEquals;\r\n\r\npublic class NodeSpec<L> {\r\n    private String text;\r\n    private int offset;\r\n    private ElementsSpec<L> elements = new ElementsSpec<L>();\r\n    private HashMap<L, NodeSpec<L>> labelled = new HashMap<L, NodeSpec<L>>();\r\n\r\n    public NodeSpec(String text, int offset) {\r\n        this.text = text;\r\n        this.offset = offset;\r\n    }\r\n\r\n    public NodeSpec<L> text(String text) {\r\n        this.text = text;\r\n        return this;\r\n    }\r\n\r\n    public NodeSpec<L> offset(int offset) {\r\n        this.offset = offset;\r\n        return this;\r\n    }\r\n\r\n    public NodeSpec<L> noElems() {\r\n        elements.noElems();\r\n        return this;\r\n    }\r\n\r\n    public NodeSpec<L> elem(NodeSpec<L> elem) {\r\n        elements.elem(elem);\r\n        return this;\r\n    }\r\n\r\n    public NodeSpec<L> label(L label, NodeSpec<L> elem) {\r\n        labelled.put(label, elem);\r\n        return this;\r\n    }\r\n\r\n    void assertMatches(Node<L> node) {\r\n        assertEquals(text, node.text());\r\n        assertEquals(offset, node.offset());\r\n\r\n        elements.check(node);\r\n\r\n        for (L key : labelled.keySet()) {\r\n            labelled.get(key).assertMatches(node.get(key));\r\n        }\r\n    }\r\n}\r\n</document_content>\r\n</document>\r\n<document index=\"71\">\r\n<source>test/java/NodeActionsTest.java</source>\r\n<document_content>package canopy.node_actions;\r\n\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\nimport static org.junit.jupiter.api.Assertions.assertEquals;\r\nimport static org.junit.jupiter.api.Assertions.assertThrows;\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport helpers.ElementsSpec;\r\nimport helpers.Node;\r\nimport helpers.NodeSpec;\r\n\r\nimport test.grammars.node_actions.Actions;\r\nimport test.grammars.node_actions.Label;\r\nimport test.grammars.node_actions.ParseError;\r\nimport test.grammars.node_actions.NodeActions;\r\nimport test.grammars.node_actions.TreeNode;\r\n\r\nclass NodeActionsTest extends ParseHelper {\r\n    @Test\r\n    void makesNodesFromAString() throws ParseError {\r\n        String input = \"act-str: hello\";\r\n        CustomNode result = (CustomNode)NodeActions.parse(input, new TestActions()).elements.get(1);\r\n\r\n        assertNode(new CustomNode(\"str\", input, 9, 14).noElems(), result);\r\n    }\r\n\r\n    @Test\r\n    void makesNodesFromACharClass() throws ParseError {\r\n        String input = \"act-class: k\";\r\n        CustomNode result = (CustomNode)NodeActions.parse(input, new TestActions()).elements.get(1);\r\n\r\n        assertNode(new CustomNode(\"char\", input, 11, 12).noElems(), result);\r\n    }\r\n\r\n    @Test\r\n    void makesNodesFromAnyChar() throws ParseError {\r\n        String input = \"act-any: ?\";\r\n        CustomNode result = (CustomNode)NodeActions.parse(input, new TestActions()).elements.get(1);\r\n\r\n        assertNode(new CustomNode(\"any\", input, 9, 10).noElems(), result);\r\n    }\r\n\r\n    @Test\r\n    void makesNodesFromAMaybeRule() throws ParseError {\r\n        String input = \"act-maybe: hello\";\r\n        CustomNode result = (CustomNode)NodeActions.parse(input, new TestActions()).elements.get(1);\r\n\r\n        assertNode(new CustomNode(\"maybe\", input, 11, 16).noElems(), result);\r\n    }\r\n\r\n    @Test\r\n    void doesNotInvokeAnActionForAMaybeRuleWithNoMatch() throws ParseError {\r\n        String input = \"act-maybe: \";\r\n        TreeNode result = NodeActions.parse(input, new TestActions());\r\n\r\n        expect(result).toMatch(node(\"\", 11).noElems());\r\n    }\r\n\r\n    @Test\r\n    void makesNodesFromARepetition() throws ParseError {\r\n        String input = \"act-rep: abc\";\r\n        CustomNode result = (CustomNode)NodeActions.parse(input, new TestActions()).elements.get(1);\r\n\r\n        assertNode(\r\n            new CustomNode(\"rep\", input, 9, 12)\r\n                .elem(node(\"a\", 9).noElems())\r\n                .elem(node(\"b\", 10).noElems())\r\n                .elem(node(\"c\", 11).noElems()),\r\n            result\r\n        );\r\n    }\r\n\r\n    @Test\r\n    void makesNodesFromARepetitionInParentheses() throws ParseError {\r\n        String input = \"act-rep-paren: abab\";\r\n        CustomNode result = (CustomNode)NodeActions.parse(input, new TestActions()).elements.get(1);\r\n\r\n        assertNode(\r\n            new CustomNode(\"rep-paren\", input, 15, 19)\r\n                .elem(node(\"ab\", 15)\r\n                    .elem(node(\"a\", 15).noElems())\r\n                    .elem(node(\"b\", 16).noElems())\r\n                )\r\n                .elem(node(\"ab\", 17)\r\n                    .elem(node(\"a\", 17).noElems())\r\n                    .elem(node(\"b\", 18).noElems())\r\n                ),\r\n            result\r\n        );\r\n    }\r\n\r\n    @Test\r\n    void makesNodesFromASequence() throws ParseError {\r\n        String input = \"act-seq: xyz\";\r\n        CustomNode result = (CustomNode)NodeActions.parse(input, new TestActions()).elements.get(1);\r\n\r\n        assertNode(\r\n            new CustomNode(\"seq\", input, 9, 12)\r\n                .elem(node(\"x\", 9).noElems())\r\n                .elem(node(\"y\", 10).noElems())\r\n                .elem(node(\"z\", 11).noElems()),\r\n            result\r\n        );\r\n    }\r\n\r\n    @Test\r\n    void makesNodesFromASequenceWithMutedElements() throws ParseError {\r\n        String input = \"act-seq-mute: xyz\";\r\n        CustomNode result = (CustomNode)NodeActions.parse(input, new TestActions()).elements.get(1);\r\n\r\n        assertNode(\r\n            new CustomNode(\"seq\", input, 14, 17)\r\n                .elem(node(\"x\", 14).noElems())\r\n                .elem(node(\"z\", 16).noElems()),\r\n            result\r\n        );\r\n    }\r\n\r\n    @Test\r\n    void makesNodesFromAParenthesisedExpression() throws ParseError {\r\n        String input = \"act-paren: !\";\r\n        CustomNode result = (CustomNode)NodeActions.parse(input, new TestActions()).elements.get(1);\r\n\r\n        assertNode(new CustomNode(\"paren\", input, 11, 12).noElems(), result);\r\n    }\r\n\r\n    @Test\r\n    void bindsToTheOptionsOfAChoice() throws ParseError {\r\n        String input = \"act-choice: 0\";\r\n        CustomNode result = (CustomNode)NodeActions.parse(input, new TestActions()).elements.get(1);\r\n        assertNode(new CustomNode(\"zero\", input, 12, 13).noElems(), result);\r\n\r\n        input = \"act-choice: 42\";\r\n        result = (CustomNode)NodeActions.parse(input, new TestActions()).elements.get(1);\r\n\r\n        assertNode(\r\n            new CustomNode(\"int\", input, 12, 14)\r\n                .elem(node(\"4\", 12).noElems())\r\n                .elem(node(\"2\", 13)\r\n                    .elem(node(\"2\", 13).noElems())\r\n                ),\r\n            result\r\n        );\r\n    }\r\n\r\n    @Test\r\n    void treatsNullAsAValidResult() throws ParseError {\r\n        CustomNode result = (CustomNode)NodeActions.parse(\"act-falsey: null\", new TestActions()).elements.get(1);\r\n        assertEquals(null, result);\r\n    }\r\n\r\n    @Test\r\n    void treatsFalseAsAValidResult() throws ParseError {\r\n        CustomNode result = (CustomNode)NodeActions.parse(\"act-falsey: false\", new TestActions()).elements.get(1);\r\n        assertEquals(null, result);\r\n    }\r\n\r\n    @Test\r\n    void treatsZeroAsAValidResult() throws ParseError {\r\n        CustomNode result = (CustomNode)NodeActions.parse(\"act-falsey: 0\", new TestActions()).elements.get(1);\r\n        assertEquals(null, result);\r\n    }\r\n\r\n    @Test\r\n    void treatsEmptyStringsAsAValidResult() throws ParseError {\r\n        CustomNode result = (CustomNode)NodeActions.parse(\"act-falsey: ''\", new TestActions()).elements.get(1);\r\n        assertEquals(null, result);\r\n    }\r\n\r\n    @Test\r\n    void treatsEmptyListsAsAValidResult() throws ParseError {\r\n        CustomNode result = (CustomNode)NodeActions.parse(\"act-falsey: []\", new TestActions()).elements.get(1);\r\n        assertEquals(null, result);\r\n    }\r\n\r\n    @Test\r\n    void treatsFalseyValuesAsAcceptableLookaheadResults() throws ParseError {\r\n        String input = \"act-falsey-pred: 0\";\r\n        CustomNode result = (CustomNode)NodeActions.parse(input, new TestActions()).elements.get(1).elements.get(1);\r\n\r\n        assertNode(new CustomNode(\"zero\", input, 17, 18).noElems(), result);\r\n    }\r\n\r\n    @Test\r\n    void treatsFalseyValuesAsAcceptableRepetitionResults() throws ParseError {\r\n        String input = \"act-falsey-rep: null0false''[]\";\r\n        List<TreeNode> elements = NodeActions.parse(input, new TestActions()).elements.get(1).elements;\r\n\r\n        assertEquals(5, elements.size());\r\n        for (TreeNode elem : elements) {\r\n            assertEquals(null, elem);\r\n        }\r\n    }\r\n\r\n    @Test\r\n    void treatsFalseyValuesAsAcceptableMaybeResults() throws ParseError {\r\n        String input = \"act-falsey-opt: null\";\r\n        TreeNode result = NodeActions.parse(input, new TestActions()).elements.get(1);\r\n\r\n        assertEquals(null, result);\r\n    }\r\n\r\n    @Test\r\n    void treatsFalseyValuesAsAcceptableSequenceResults() throws ParseError {\r\n        String input = \"act-falsey-seq: (null)\";\r\n        TreeNode result = NodeActions.parse(input, new TestActions()).elements.get(1);\r\n\r\n        assertEquals(3, result.elements.size());\r\n        assertEquals(null, result.elements.get(1));\r\n    }\r\n\r\n    @Test\r\n    void treatsFalseyValuesAsAcceptableChoiceResults() throws ParseError {\r\n        String input = \"act-falsey-choice: null\";\r\n        TreeNode result = NodeActions.parse(input, new TestActions()).elements.get(1);\r\n\r\n        assertEquals(null, result);\r\n    }\r\n}\r\n\r\nclass TestActions implements Actions {\r\n    public CustomNode make_str(String input, int start, int end, List<TreeNode> elements) {\r\n        return new CustomNode(\"str\", input, start, end, elements);\r\n    }\r\n\r\n    public CustomNode make_char(String input, int start, int end, List<TreeNode> elements) {\r\n        return new CustomNode(\"char\", input, start, end, elements);\r\n    }\r\n\r\n    public CustomNode make_any(String input, int start, int end, List<TreeNode> elements) {\r\n        return new CustomNode(\"any\", input, start, end, elements);\r\n    }\r\n\r\n    public CustomNode make_maybe(String input, int start, int end, List<TreeNode> elements) {\r\n        return new CustomNode(\"maybe\", input, start, end, elements);\r\n    }\r\n\r\n    public CustomNode make_rep(String input, int start, int end, List<TreeNode> elements) {\r\n        return new CustomNode(\"rep\", input, start, end, elements);\r\n    }\r\n\r\n    public CustomNode make_seq(String input, int start, int end, List<TreeNode> elements) {\r\n        return new CustomNode(\"seq\", input, start, end, elements);\r\n    }\r\n\r\n    public CustomNode make_paren(String input, int start, int end, List<TreeNode> elements) {\r\n        return new CustomNode(\"paren\", input, start, end, elements);\r\n    }\r\n\r\n    public CustomNode make_rep_paren(String input, int start, int end, List<TreeNode> elements) {\r\n        return new CustomNode(\"rep-paren\", input, start, end, elements);\r\n    }\r\n\r\n    public CustomNode make_zero(String input, int start, int end, List<TreeNode> elements) {\r\n        return new CustomNode(\"zero\", input, start, end, elements);\r\n    }\r\n\r\n    public CustomNode make_int(String input, int start, int end, List<TreeNode> elements) {\r\n        return new CustomNode(\"int\", input, start, end, elements);\r\n    }\r\n\r\n    public CustomNode make_null(String input, int start, int end, List<TreeNode> elements) {\r\n        return null;\r\n    }\r\n\r\n    public CustomNode make_false(String input, int start, int end, List<TreeNode> elements) {\r\n        return null;\r\n    }\r\n\r\n    public CustomNode make_0(String input, int start, int end, List<TreeNode> elements) {\r\n        return null;\r\n    }\r\n\r\n    public CustomNode make_empty_str(String input, int start, int end, List<TreeNode> elements) {\r\n        return null;\r\n    }\r\n\r\n    public CustomNode make_empty_list(String input, int start, int end, List<TreeNode> elements) {\r\n        return null;\r\n    }\r\n}\r\n\r\nclass CustomNode extends TreeNode {\r\n    String type, input;\r\n    int start, end;\r\n    List<TreeNode> elements;\r\n    ElementsSpec<Label> elemsSpec = new ElementsSpec<Label>();\r\n\r\n    CustomNode(String type, String input, int start, int end) {\r\n        this(type, input, start, end, null);\r\n    }\r\n\r\n    CustomNode(String type, String input, int start, int end, List<TreeNode> elements) {\r\n        this.type = type;\r\n        this.input = input;\r\n        this.start = start;\r\n        this.end = end;\r\n        this.elements = elements;\r\n    }\r\n\r\n    CustomNode noElems() {\r\n        elemsSpec.noElems();\r\n        return this;\r\n    }\r\n\r\n    CustomNode elem(NodeSpec<Label> elem) {\r\n        elemsSpec.elem(elem);\r\n        return this;\r\n    }\r\n}\r\n\r\nclass ParseHelper {\r\n    Node<Label> expect(TreeNode node) {\r\n        return new NodeWrapper(node.elements.get(1));\r\n    }\r\n\r\n    NodeSpec<Label> node(String text, int offset) {\r\n        return new NodeSpec<Label>(text, offset);\r\n    }\r\n\r\n    void assertNode(CustomNode expected, CustomNode actual) {\r\n        assertEquals(expected.type, actual.type);\r\n        assertEquals(expected.input, actual.input);\r\n        assertEquals(expected.start, actual.start);\r\n        assertEquals(expected.end, actual.end);\r\n        expected.elemsSpec.check(new NodeWrapper(new TreeNode(\"\", 0, actual.elements)));\r\n    }\r\n}\r\n\r\nclass NodeWrapper implements Node<Label> {\r\n    private TreeNode node;\r\n\r\n    NodeWrapper(TreeNode node) {\r\n        this.node = node;\r\n    }\r\n\r\n    public String text() {\r\n        return node.text;\r\n    }\r\n\r\n    public int offset() {\r\n        return node.offset;\r\n    }\r\n\r\n    public List<Node<Label>> elements() {\r\n        return node.elements.stream()\r\n            .map((elem) -> new NodeWrapper(elem))\r\n            .collect(Collectors.toList());\r\n    }\r\n\r\n    public Node<Label> get(Label key) {\r\n        return new NodeWrapper(node.get(key));\r\n    }\r\n}\r\n</document_content>\r\n</document>\r\n<document index=\"72\">\r\n<source>test/java/pom.xml</source>\r\n<document_content><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project>\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <groupId>com.jcoglan.canopy</groupId>\r\n    <artifactId>test</artifactId>\r\n    <version>1.0</version>\r\n\r\n    <build>\r\n        <testSourceDirectory>..</testSourceDirectory>\r\n\r\n        <plugins>\r\n            <plugin>\r\n                <artifactId>maven-compiler-plugin</artifactId>\r\n                <configuration>\r\n                    <source>8</source>\r\n                    <target>8</target>\r\n                </configuration>\r\n            </plugin>\r\n\r\n            <plugin>\r\n                <artifactId>maven-surefire-plugin</artifactId>\r\n                <version>2.22.2</version>\r\n            </plugin>\r\n\r\n            <plugin>\r\n                <artifactId>maven-failsafe-plugin</artifactId>\r\n                <version>2.22.2</version>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.junit.jupiter</groupId>\r\n            <artifactId>junit-jupiter-api</artifactId>\r\n            <version>5.7.2</version>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.junit.jupiter</groupId>\r\n            <artifactId>junit-jupiter-engine</artifactId>\r\n            <version>5.7.2</version>\r\n        </dependency>\r\n    </dependencies>\r\n</project>\r\n</document_content>\r\n</document>\r\n<document index=\"73\">\r\n<source>test/java/PredicatesTest.java</source>\r\n<document_content>package canopy.predicates;\r\n\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\nimport static org.junit.jupiter.api.Assertions.assertThrows;\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport helpers.Node;\r\nimport helpers.NodeSpec;\r\n\r\nimport test.grammars.predicates.Label;\r\nimport test.grammars.predicates.ParseError;\r\nimport test.grammars.predicates.Predicates;\r\nimport test.grammars.predicates.TreeNode;\r\n\r\nclass PositiveLookAheadTest extends ParseHelper {\r\n    @Test\r\n    void checksTheFirstCharacterOfAWord() throws ParseError {\r\n        expect(Predicates.parse(\"pos-name: London\")).toMatch(\r\n            node(\"London\", 10)\r\n                .elem(node(\"\", 10).noElems())\r\n                .elem(node(\"London\", 10)\r\n                    .elem(node(\"L\", 10).noElems())\r\n                    .elem(node(\"o\", 11).noElems())\r\n                    .elem(node(\"n\", 12).noElems())\r\n                    .elem(node(\"d\", 13).noElems())\r\n                    .elem(node(\"o\", 14).noElems())\r\n                    .elem(node(\"n\", 15).noElems())\r\n                )\r\n        );\r\n    }\r\n\r\n    @Test\r\n    void rejectsWordsWhereThePredicateDoesNotMatch() {\r\n        assertThrows(ParseError.class, () -> Predicates.parse(\"pos-name: london\"));\r\n    }\r\n\r\n    @Test\r\n    void resetsTheCursorAfterMatching() throws ParseError {\r\n        expect(Predicates.parse(\"pos-seq: <abc123>\")).toMatch(\r\n            node(\"<abc123>\", 9)\r\n                .elem(node(\"\", 9).noElems())\r\n                .elem(node(\"<\", 9).noElems())\r\n                .elem(node(\"abc123\", 10)\r\n                    .elem(node(\"a\", 10).noElems())\r\n                    .elem(node(\"b\", 11).noElems())\r\n                    .elem(node(\"c\", 12).noElems())\r\n                    .elem(node(\"1\", 13).noElems())\r\n                    .elem(node(\"2\", 14).noElems())\r\n                    .elem(node(\"3\", 15).noElems())\r\n                )\r\n                .elem(node(\">\", 16).noElems())\r\n        );\r\n    }\r\n\r\n    @Test\r\n    void usesAReferenceAsAPredicate() throws ParseError {\r\n        expect(Predicates.parse(\"pos-ref: c99\")).toMatch(\r\n            node(\"c99\", 9)\r\n                .elem(node(\"\", 9).noElems())\r\n                .elem(node(\"c99\", 9)\r\n                    .elem(node(\"c\", 9).noElems())\r\n                    .elem(node(\"9\", 10).noElems())\r\n                    .elem(node(\"9\", 11).noElems())\r\n                )\r\n        );\r\n    }\r\n}\r\n\r\nclass NegativeLookAheadTest extends ParseHelper {\r\n    @Test\r\n    void checksTheFirstCharacterOfAWord() throws ParseError {\r\n        expect(Predicates.parse(\"neg-name: word\")).toMatch(\r\n            node(\"word\", 10)\r\n                .elem(node(\"\", 10).noElems())\r\n                .elem(node(\"word\", 10)\r\n                    .elem(node(\"w\", 10).noElems())\r\n                    .elem(node(\"o\", 11).noElems())\r\n                    .elem(node(\"r\", 12).noElems())\r\n                    .elem(node(\"d\", 13).noElems())\r\n                )\r\n        );\r\n    }\r\n\r\n    @Test\r\n    void rejectsWordsWhereThePredicateMatches() {\r\n        assertThrows(ParseError.class, () -> Predicates.parse(\"neg-name: Word\"));\r\n    }\r\n\r\n    @Test\r\n    void checksForAStringAtTheEnd() throws ParseError {\r\n        expect(Predicates.parse(\"neg-tail-str: word\")).toMatch(\r\n            node(\"word\", 14)\r\n                .elem(node(\"word\", 14).noElems())\r\n                .elem(node(\"\", 18).noElems())\r\n        );\r\n    }\r\n\r\n    @Test\r\n    void checksForAClassAtTheEnd() throws ParseError {\r\n        expect(Predicates.parse(\"neg-tail-class: word\")).toMatch(\r\n            node(\"word\", 16)\r\n                .elem(node(\"word\", 16).noElems())\r\n                .elem(node(\"\", 20).noElems())\r\n        );\r\n    }\r\n\r\n    @Test\r\n    void checksForAnyCharAtTheEnd() throws ParseError {\r\n        expect(Predicates.parse(\"neg-tail-any: word\")).toMatch(\r\n            node(\"word\", 14)\r\n                .elem(node(\"word\", 14).noElems())\r\n                .elem(node(\"\", 18).noElems())\r\n        );\r\n    }\r\n\r\n    @Test\r\n    void rejectsInputsThatMatchTheNegativePattern() {\r\n        assertThrows(ParseError.class, () -> Predicates.parse(\"neg-tail-str: wordmore text\"));\r\n        assertThrows(ParseError.class, () -> Predicates.parse(\"neg-tail-class: words\"));\r\n        assertThrows(ParseError.class, () -> Predicates.parse(\"neg-tail-any: word \"));\r\n    }\r\n}\r\n\r\nclass ParseHelper {\r\n    Node<Label> expect(TreeNode node) {\r\n        return new NodeWrapper(node.elements.get(1));\r\n    }\r\n\r\n    NodeSpec<Label> node(String text, int offset) {\r\n        return new NodeSpec<Label>(text, offset);\r\n    }\r\n}\r\n\r\nclass NodeWrapper implements Node<Label> {\r\n    private TreeNode node;\r\n\r\n    NodeWrapper(TreeNode node) {\r\n        this.node = node;\r\n    }\r\n\r\n    public String text() {\r\n        return node.text;\r\n    }\r\n\r\n    public int offset() {\r\n        return node.offset;\r\n    }\r\n\r\n    public List<Node<Label>> elements() {\r\n        return node.elements.stream()\r\n            .map((elem) -> new NodeWrapper(elem))\r\n            .collect(Collectors.toList());\r\n    }\r\n\r\n    public Node<Label> get(Label key) {\r\n        return new NodeWrapper(node.get(key));\r\n    }\r\n}\r\n</document_content>\r\n</document>\r\n<document index=\"74\">\r\n<source>test/java/QuantifiersTest.java</source>\r\n<document_content>package canopy.quantifiers;\r\n\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\nimport static org.junit.jupiter.api.Assertions.assertThrows;\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport helpers.Node;\r\nimport helpers.NodeSpec;\r\n\r\nimport test.grammars.quantifiers.Label;\r\nimport test.grammars.quantifiers.ParseError;\r\nimport test.grammars.quantifiers.Quantifiers;\r\nimport test.grammars.quantifiers.TreeNode;\r\n\r\nclass MaybeTest extends ParseHelper {\r\n    @Test\r\n    void parsesAMatchingCharacter() throws ParseError {\r\n        expect(Quantifiers.parse(\"maybe: 4\")).toMatch(node(\"4\", 7).noElems());\r\n    }\r\n\r\n    @Test\r\n    void parsesTheEmptyString() throws ParseError {\r\n        expect(Quantifiers.parse(\"maybe: \")).toMatch(node(\"\", 7).noElems());\r\n    }\r\n\r\n    @Test\r\n    void rejectsANonMatchingCharacter() {\r\n        assertThrows(ParseError.class, () -> Quantifiers.parse(\"maybe: a\"));\r\n    }\r\n}\r\n\r\nclass ZeroOrMoreTest extends ParseHelper {\r\n    @Test\r\n    void parsesTheEmptyString() throws ParseError {\r\n        expect(Quantifiers.parse(\"rep-0: \")).toMatch(node(\"\", 7).noElems());\r\n    }\r\n\r\n    @Test\r\n    void parsesOneOccurrenceOfThePattern() throws ParseError {\r\n        expect(Quantifiers.parse(\"rep-0: z\")).toMatch(\r\n            node(\"z\", 7)\r\n                .elem(node(\"z\", 7).noElems())\r\n        );\r\n    }\r\n\r\n    @Test\r\n    void parsesManyOccurrencesOfTheSameInstanceOfThePattern() throws ParseError {\r\n        expect(Quantifiers.parse(\"rep-0: zzzz\")).toMatch(\r\n            node(\"zzzz\", 7)\r\n                .elem(node(\"z\", 7).noElems())\r\n                .elem(node(\"z\", 8).noElems())\r\n                .elem(node(\"z\", 9).noElems())\r\n                .elem(node(\"z\", 10).noElems())\r\n        );\r\n    }\r\n\r\n    @Test\r\n    void parsesManyOccurrencesOfDifferentInstancesOfThePattern() throws ParseError {\r\n        expect(Quantifiers.parse(\"rep-0: wxyz\")).toMatch(\r\n            node(\"wxyz\", 7)\r\n                .elem(node(\"w\", 7).noElems())\r\n                .elem(node(\"x\", 8).noElems())\r\n                .elem(node(\"y\", 9).noElems())\r\n                .elem(node(\"z\", 10).noElems())\r\n        );\r\n    }\r\n\r\n    @Test\r\n    void rejectsStringsWithANonMatchingPrefix() {\r\n        assertThrows(ParseError.class, () -> Quantifiers.parse(\"rep-0: 4x\"));\r\n    }\r\n\r\n    @Test\r\n    void rejectsStringsWithANonMatchingSuffix() {\r\n        assertThrows(ParseError.class, () -> Quantifiers.parse(\"rep-0: x4\"));\r\n    }\r\n\r\n    @Test\r\n    void parsesRepeatingPatternsGreedily() {\r\n        assertThrows(ParseError.class, () -> Quantifiers.parse(\"greedy-0: xy\"));\r\n    }\r\n}\r\n\r\nclass OneOrMoreTest extends ParseHelper {\r\n    @Test\r\n    void rejectsTheEmptyString() throws ParseError {\r\n        assertThrows(ParseError.class, () -> Quantifiers.parse(\"rep-1: \"));\r\n    }\r\n\r\n    @Test\r\n    void parsesOneOccurrenceOfThePattern() throws ParseError {\r\n        expect(Quantifiers.parse(\"rep-1: z\")).toMatch(\r\n            node(\"z\", 7)\r\n                .elem(node(\"z\", 7).noElems())\r\n        );\r\n    }\r\n\r\n    @Test\r\n    void parsesManyOccurrencesOfTheSameInstanceOfThePattern() throws ParseError {\r\n        expect(Quantifiers.parse(\"rep-1: zzzz\")).toMatch(\r\n            node(\"zzzz\", 7)\r\n                .elem(node(\"z\", 7).noElems())\r\n                .elem(node(\"z\", 8).noElems())\r\n                .elem(node(\"z\", 9).noElems())\r\n                .elem(node(\"z\", 10).noElems())\r\n        );\r\n    }\r\n\r\n    @Test\r\n    void parsesManyOccurrencesOfDifferentInstancesOfThePattern() throws ParseError {\r\n        expect(Quantifiers.parse(\"rep-1: wxyz\")).toMatch(\r\n            node(\"wxyz\", 7)\r\n                .elem(node(\"w\", 7).noElems())\r\n                .elem(node(\"x\", 8).noElems())\r\n                .elem(node(\"y\", 9).noElems())\r\n                .elem(node(\"z\", 10).noElems())\r\n        );\r\n    }\r\n\r\n    @Test\r\n    void rejectsStringsWithANonMatchingPrefix() {\r\n        assertThrows(ParseError.class, () -> Quantifiers.parse(\"rep-1: 4x\"));\r\n    }\r\n\r\n    @Test\r\n    void rejectsStringsWithANonMatchingSuffix() {\r\n        assertThrows(ParseError.class, () -> Quantifiers.parse(\"rep-1: x4\"));\r\n    }\r\n\r\n    @Test\r\n    void parsesRepeatingPatternsGreedily() {\r\n        assertThrows(ParseError.class, () -> Quantifiers.parse(\"greedy-1: xy\"));\r\n    }\r\n\r\n    @Test\r\n    void parsesARepeatedReference() throws ParseError {\r\n        expect(Quantifiers.parse(\"color-ref: #abc123\")).toMatch(\r\n            node(\"#abc123\", 11)\r\n                .elem(node(\"#\", 11).noElems())\r\n                .elem(node(\"abc123\", 12)\r\n                    .elem(node(\"a\", 12).noElems())\r\n                    .elem(node(\"b\", 13).noElems())\r\n                    .elem(node(\"c\", 14).noElems())\r\n                    .elem(node(\"1\", 15).noElems())\r\n                    .elem(node(\"2\", 16).noElems())\r\n                    .elem(node(\"3\", 17).noElems())\r\n                )\r\n        );\r\n    }\r\n\r\n    @Test\r\n    void parsesARepeatedChoice() throws ParseError {\r\n        expect(Quantifiers.parse(\"color-choice: #abc123\")).toMatch(\r\n            node(\"#abc123\", 14)\r\n                .elem(node(\"#\", 14).noElems())\r\n                .elem(node(\"abc123\", 15)\r\n                    .elem(node(\"a\", 15).noElems())\r\n                    .elem(node(\"b\", 16).noElems())\r\n                    .elem(node(\"c\", 17).noElems())\r\n                    .elem(node(\"1\", 18).noElems())\r\n                    .elem(node(\"2\", 19).noElems())\r\n                    .elem(node(\"3\", 20).noElems())\r\n                )\r\n        );\r\n    }\r\n}\r\n\r\nclass ExactlyTest extends ParseHelper {\r\n    @Test\r\n    void rejectsTheEmptyString() throws ParseError {\r\n        assertThrows(ParseError.class, () -> Quantifiers.parse(\"rep-exact: \"));\r\n    }\r\n\r\n    @Test\r\n    void parsesTheRequiredNumberOfThePattern() throws ParseError {\r\n        expect(Quantifiers.parse(\"rep-exact: abc\")).toMatch(\r\n            node(\"abc\", 11)\r\n                .elem(node(\"a\", 11).noElems())\r\n                .elem(node(\"b\", 12).noElems())\r\n                .elem(node(\"c\", 13).noElems())\r\n        );\r\n    }\r\n\r\n    @Test\r\n    void rejectsTooFewCopiesOfThePattern() throws ParseError {\r\n        assertThrows(ParseError.class, () -> Quantifiers.parse(\"rep-exact: ab\"));\r\n    }\r\n\r\n    @Test\r\n    void rejectsTooManyCopiesOfThePattern() throws ParseError {\r\n        assertThrows(ParseError.class, () -> Quantifiers.parse(\"rep-exact: abcd\"));\r\n    }\r\n}\r\n\r\nclass MinimumTest extends ParseHelper {\r\n    @Test\r\n    void rejectsTheEmptyString() throws ParseError {\r\n        assertThrows(ParseError.class, () -> Quantifiers.parse(\"rep-min: \"));\r\n    }\r\n\r\n    @Test\r\n    void parsesTheRequiredNumberOfThePattern() throws ParseError {\r\n        expect(Quantifiers.parse(\"rep-min: abc\")).toMatch(\r\n            node(\"abc\", 9)\r\n                .elem(node(\"a\", 9).noElems())\r\n                .elem(node(\"b\", 10).noElems())\r\n                .elem(node(\"c\", 11).noElems())\r\n        );\r\n    }\r\n\r\n    @Test\r\n    void parsesMoreCopiesOfThePattern() throws ParseError {\r\n        expect(Quantifiers.parse(\"rep-min: abcdef\")).toMatch(\r\n            node(\"abcdef\", 9)\r\n                .elem(node(\"a\", 9).noElems())\r\n                .elem(node(\"b\", 10).noElems())\r\n                .elem(node(\"c\", 11).noElems())\r\n                .elem(node(\"d\", 12).noElems())\r\n                .elem(node(\"e\", 13).noElems())\r\n                .elem(node(\"f\", 14).noElems())\r\n        );\r\n    }\r\n\r\n    @Test\r\n    void rejectsTooFewCopiesOfThePattern() throws ParseError {\r\n        assertThrows(ParseError.class, () -> Quantifiers.parse(\"rep-min: ab\"));\r\n    }\r\n}\r\n\r\nclass RangeTest extends ParseHelper {\r\n    @Test\r\n    void rejectsTheEmptyString() throws ParseError {\r\n        assertThrows(ParseError.class, () -> Quantifiers.parse(\"rep-range: \"));\r\n    }\r\n\r\n    @Test\r\n    void parsesTheMinimumNumberOfThePattern() throws ParseError {\r\n        expect(Quantifiers.parse(\"rep-range: abc\")).toMatch(\r\n            node(\"abc\", 11)\r\n                .elem(node(\"a\", 11).noElems())\r\n                .elem(node(\"b\", 12).noElems())\r\n                .elem(node(\"c\", 13).noElems())\r\n        );\r\n    }\r\n\r\n    @Test\r\n    void parsesTheMaximumNumberOfThePattern() throws ParseError {\r\n        expect(Quantifiers.parse(\"rep-range: abcde\")).toMatch(\r\n            node(\"abcde\", 11)\r\n                .elem(node(\"a\", 11).noElems())\r\n                .elem(node(\"b\", 12).noElems())\r\n                .elem(node(\"c\", 13).noElems())\r\n                .elem(node(\"d\", 14).noElems())\r\n                .elem(node(\"e\", 15).noElems())\r\n        );\r\n    }\r\n\r\n    @Test\r\n    void rejectsTooFewCopiesOfThePattern() throws ParseError {\r\n        assertThrows(ParseError.class, () -> Quantifiers.parse(\"rep-range: ab\"));\r\n    }\r\n\r\n    @Test\r\n    void rejectsTooManyCopiesOfThePattern() throws ParseError {\r\n        assertThrows(ParseError.class, () -> Quantifiers.parse(\"rep-range: abcdef\"));\r\n    }\r\n}\r\n\r\nclass ParseHelper {\r\n    Node<Label> expect(TreeNode node) {\r\n        return new NodeWrapper(node.elements.get(1));\r\n    }\r\n\r\n    NodeSpec<Label> node(String text, int offset) {\r\n        return new NodeSpec<Label>(text, offset);\r\n    }\r\n}\r\n\r\nclass NodeWrapper implements Node<Label> {\r\n    private TreeNode node;\r\n\r\n    NodeWrapper(TreeNode node) {\r\n        this.node = node;\r\n    }\r\n\r\n    public String text() {\r\n        return node.text;\r\n    }\r\n\r\n    public int offset() {\r\n        return node.offset;\r\n    }\r\n\r\n    public List<Node<Label>> elements() {\r\n        return node.elements.stream()\r\n            .map((elem) -> new NodeWrapper(elem))\r\n            .collect(Collectors.toList());\r\n    }\r\n\r\n    public Node<Label> get(Label key) {\r\n        return new NodeWrapper(node.get(key));\r\n    }\r\n}\r\n</document_content>\r\n</document>\r\n<document index=\"75\">\r\n<source>test/java/SequencesTest.java</source>\r\n<document_content>package canopy.sequences;\r\n\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\nimport static org.junit.jupiter.api.Assertions.assertNull;\r\nimport static org.junit.jupiter.api.Assertions.assertThrows;\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport helpers.Node;\r\nimport helpers.NodeSpec;\r\n\r\nimport test.grammars.sequences.Label;\r\nimport test.grammars.sequences.ParseError;\r\nimport test.grammars.sequences.Sequences;\r\nimport test.grammars.sequences.TreeNode;\r\n\r\nclass SequenceStringsTest extends ParseHelper {\r\n    @Test\r\n    void parsesAMatchingSequence() throws ParseError {\r\n        expect(Sequences.parse(\"seq-str: abc\")).toMatch(\r\n            node(\"abc\", 9)\r\n                .elem(node(\"a\", 9).noElems())\r\n                .elem(node(\"b\", 10).noElems())\r\n                .elem(node(\"c\", 11).noElems())\r\n        );\r\n    }\r\n\r\n    @Test\r\n    void rejectsAMissingPrefix() {\r\n        assertThrows(ParseError.class, () -> Sequences.parse(\"seq-str: bc\"));\r\n    }\r\n\r\n    @Test\r\n    void rejectsAnAdditionalPrefix() {\r\n        assertThrows(ParseError.class, () -> Sequences.parse(\"seq-str: zabc\"));\r\n    }\r\n\r\n    @Test\r\n    void rejectsAMissingMiddle() {\r\n        assertThrows(ParseError.class, () -> Sequences.parse(\"seq-str: ac\"));\r\n    }\r\n\r\n    @Test\r\n    void rejectsAnAdditionalMiddle() {\r\n        assertThrows(ParseError.class, () -> Sequences.parse(\"seq-str: azbzc\"));\r\n    }\r\n\r\n    @Test\r\n    void rejectsAMissingSuffix() {\r\n        assertThrows(ParseError.class, () -> Sequences.parse(\"seq-str: ab\"));\r\n    }\r\n\r\n    @Test\r\n    void rejectsAnAdditionalSuffix() {\r\n        assertThrows(ParseError.class, () -> Sequences.parse(\"seq-str: abcz\"));\r\n    }\r\n}\r\n\r\nclass SequenceMaybesTest extends ParseHelper {\r\n    @Test\r\n    void parsesAtTheStart() throws ParseError {\r\n        expect(Sequences.parse(\"seq-maybe-1: bc\")).toMatch(\r\n            node(\"bc\", 13)\r\n                .elem(node(\"\", 13).noElems())\r\n                .elem(node(\"b\", 13).noElems())\r\n                .elem(node(\"c\", 14).noElems())\r\n        );\r\n    }\r\n\r\n    @Test\r\n    void parsesInTheMiddle() throws ParseError {\r\n        expect(Sequences.parse(\"seq-maybe-2: ac\")).toMatch(\r\n            node(\"ac\", 13)\r\n                .elem(node(\"a\", 13).noElems())\r\n                .elem(node(\"\", 14).noElems())\r\n                .elem(node(\"c\", 14).noElems())\r\n        );\r\n    }\r\n\r\n    @Test\r\n    void parsesAtTheEnd() throws ParseError {\r\n        expect(Sequences.parse(\"seq-maybe-3: ab\")).toMatch(\r\n            node(\"ab\", 13)\r\n                .elem(node(\"a\", 13).noElems())\r\n                .elem(node(\"b\", 14).noElems())\r\n                .elem(node(\"\", 15).noElems())\r\n        );\r\n    }\r\n}\r\n\r\nclass SequenceRepetitionTest extends ParseHelper {\r\n    @Test\r\n    void allowsEmptyMatches() throws ParseError {\r\n        expect(Sequences.parse(\"seq-rep-1: 0\")).toMatch(\r\n            node(\"0\", 11)\r\n                .elem(node(\"\", 11).noElems())\r\n                .elem(node(\"0\", 11).noElems())\r\n        );\r\n    }\r\n\r\n    @Test\r\n    void allowsNonEmptyMatches() throws ParseError {\r\n        expect(Sequences.parse(\"seq-rep-1: abc0\")).toMatch(\r\n            node(\"abc0\", 11)\r\n                .elem(node(\"abc\", 11)\r\n                    .elem(node(\"a\", 11).noElems())\r\n                    .elem(node(\"b\", 12).noElems())\r\n                    .elem(node(\"c\", 13).noElems())\r\n                )\r\n                .elem(node(\"0\", 14).noElems())\r\n        );\r\n    }\r\n\r\n    @Test\r\n    void parsesRepetitionsGreedily() {\r\n        assertThrows(ParseError.class, () -> Sequences.parse(\"seq-rep-2: aaa\"));\r\n    }\r\n}\r\n\r\nclass SequenceRepeatedSubSequenceTest extends ParseHelper {\r\n    @Test\r\n    void parsesANestedTree() throws ParseError {\r\n        expect(Sequences.parse(\"seq-rep-subseq: ab1b2b3c\")).toMatch(\r\n            node(\"ab1b2b3c\", 16)\r\n                .elem(node(\"a\", 16).noElems())\r\n                .elem(node(\"b1b2b3\", 17)\r\n                    .elem(node(\"b1\", 17)\r\n                        .elem(node(\"b\", 17).noElems())\r\n                        .elem(node(\"1\", 18).noElems())\r\n                    )\r\n                    .elem(node(\"b2\", 19)\r\n                        .elem(node(\"b\", 19).noElems())\r\n                        .elem(node(\"2\", 20).noElems())\r\n                    )\r\n                    .elem(node(\"b3\", 21)\r\n                        .elem(node(\"b\", 21).noElems())\r\n                        .elem(node(\"3\", 22).noElems())\r\n                    )\r\n                )\r\n                .elem(node(\"c\", 23).noElems())\r\n        );\r\n    }\r\n\r\n    @Test\r\n    void rejectsTheInputIfTheSubSequenceDoesNotMatch() {\r\n        assertThrows(ParseError.class, () -> Sequences.parse(\"seq-rep-subseq: ab1b2bc\"));\r\n    }\r\n}\r\n\r\nclass SequenceLabellingTest extends ParseHelper {\r\n    @Test\r\n    void createsNamedReferencesToChildNodes() throws ParseError {\r\n        expect(Sequences.parse(\"seq-label: v987\")).toMatch(\r\n            node(\"v987\", 11)\r\n                .elem(node(\"v\", 11).noElems())\r\n                .elem(node(\"987\", 12)\r\n                    .elem(node(\"9\", 12).noElems())\r\n                    .elem(node(\"8\", 13).noElems())\r\n                    .elem(node(\"7\", 14).noElems())\r\n                )\r\n                .label(Label.num, node(\"987\", 12)\r\n                    .elem(node(\"9\", 12).noElems())\r\n                    .elem(node(\"8\", 13).noElems())\r\n                    .elem(node(\"7\", 14).noElems())\r\n                )\r\n        );\r\n    }\r\n\r\n    @Test\r\n    void createsNamedReferencesInsideRepeatedSubSequences() throws ParseError {\r\n        expect(Sequences.parse(\"seq-label-subseq: v.AB.CD.EF\")).toMatch(\r\n            node(\"v.AB.CD.EF\", 18)\r\n                .elem(node(\"v\", 18).noElems())\r\n                .elem(node(\".AB.CD.EF\", 19)\r\n                    .elem(node(\".AB\", 19)\r\n                        .elem(node(\".\", 19))\r\n                        .elem(node(\"AB\", 20)\r\n                            .elem(node(\"A\", 20).noElems())\r\n                            .elem(node(\"B\", 21).noElems())\r\n                        )\r\n                        .label(Label.part, node(\"AB\", 20)\r\n                            .elem(node(\"A\", 20).noElems())\r\n                            .elem(node(\"B\", 21).noElems())\r\n                        )\r\n                    )\r\n                    .elem(node(\".CD\", 22)\r\n                        .elem(node(\".\", 22))\r\n                        .elem(node(\"CD\", 23)\r\n                            .elem(node(\"C\", 23).noElems())\r\n                            .elem(node(\"D\", 24).noElems())\r\n                        )\r\n                        .label(Label.part, node(\"CD\", 23)\r\n                            .elem(node(\"C\", 23).noElems())\r\n                            .elem(node(\"D\", 24).noElems())\r\n                        )\r\n                    )\r\n                    .elem(node(\".EF\", 25)\r\n                        .elem(node(\".\", 25))\r\n                        .elem(node(\"EF\", 26)\r\n                            .elem(node(\"E\", 26).noElems())\r\n                            .elem(node(\"F\", 27).noElems())\r\n                        )\r\n                        .label(Label.part, node(\"EF\", 26)\r\n                            .elem(node(\"E\", 26).noElems())\r\n                            .elem(node(\"F\", 27).noElems())\r\n                        )\r\n                    )\r\n                )\r\n        );\r\n    }\r\n}\r\n\r\nclass SequenceMutingTest extends ParseHelper {\r\n    @Test\r\n    void removesChildNodesFromTheSequence() throws ParseError {\r\n        expect(Sequences.parse(\"seq-mute-1: key: 42\")).toMatch(\r\n            node(\"key: 42\", 12)\r\n                .elem(node(\"key\", 12)\r\n                    .elem(node(\"k\", 12).noElems())\r\n                    .elem(node(\"e\", 13).noElems())\r\n                    .elem(node(\"y\", 14).noElems())\r\n                )\r\n                .elem(node(\"42\", 17)\r\n                    .elem(node(\"4\", 17).noElems())\r\n                    .elem(node(\"2\", 18).noElems())\r\n                )\r\n        );\r\n    }\r\n\r\n    @Test\r\n    void removesChildSequencesFromTheSequence() throws ParseError {\r\n        expect(Sequences.parse(\"seq-mute-2: key: 42\")).toMatch(\r\n            node(\"key: 42\", 12)\r\n                .elem(node(\"key\", 12)\r\n                    .elem(node(\"k\", 12).noElems())\r\n                    .elem(node(\"e\", 13).noElems())\r\n                    .elem(node(\"y\", 14).noElems())\r\n                )\r\n                .elem(node(\"42\", 17)\r\n                    .elem(node(\"4\", 17).noElems())\r\n                    .elem(node(\"2\", 18).noElems())\r\n                )\r\n        );\r\n    }\r\n\r\n    @Test\r\n    void removesNodesFromChildSequences() throws ParseError {\r\n        expect(Sequences.parse(\"seq-mute-3: v.AB.CD.EF\")).toMatch(\r\n            node(\"v.AB.CD.EF\", 12)\r\n                .elem(node(\"v\", 12).noElems())\r\n                .elem(node(\".AB.CD.EF\", 13)\r\n                    .elem(node(\".AB\", 13)\r\n                        .elem(node(\"AB\", 14)\r\n                            .elem(node(\"A\", 14).noElems())\r\n                            .elem(node(\"B\", 15).noElems())\r\n                        )\r\n                    )\r\n                    .elem(node(\".CD\", 16)\r\n                        .elem(node(\"CD\", 17)\r\n                            .elem(node(\"C\", 17).noElems())\r\n                            .elem(node(\"D\", 18).noElems())\r\n                        )\r\n                    )\r\n                    .elem(node(\".EF\", 19)\r\n                        .elem(node(\"EF\", 20)\r\n                            .elem(node(\"E\", 20).noElems())\r\n                            .elem(node(\"F\", 21).noElems())\r\n                        )\r\n                    )\r\n                )\r\n        );\r\n    }\r\n\r\n    @Test\r\n    void correctlyHandlesNestedExpressionsUsingMutes() throws ParseError {\r\n        expect(Sequences.parse(\"seq-mute-4: abcde\")).toMatch(\r\n            node(\"abcde\", 12)\r\n                .elem(node(\"a\", 12).noElems())\r\n                .elem(node(\"e\", 16).noElems())\r\n        );\r\n    }\r\n\r\n    @Test\r\n    void allowsTheFirstElementToBeMuted() throws ParseError {\r\n        expect(Sequences.parse(\"seq-mute-first: abc\")).toMatch(\r\n            node(\"abc\", 16)\r\n                .elem(node(\"b\", 17).noElems())\r\n                .elem(node(\"c\", 18).noElems())\r\n        );\r\n    }\r\n\r\n    @Test\r\n    void allowsTheLastElementToBeMuted() throws ParseError {\r\n        expect(Sequences.parse(\"seq-mute-last: abc\")).toMatch(\r\n            node(\"abc\", 15)\r\n                .elem(node(\"a\", 15).noElems())\r\n                .elem(node(\"b\", 16).noElems())\r\n        );\r\n    }\r\n\r\n    @Test\r\n    void rejectsInputMissingMutedExpressions() {\r\n        assertThrows(ParseError.class, () -> Sequences.parse(\"seq-mute-4: ae\"));\r\n        assertThrows(ParseError.class, () -> Sequences.parse(\"seq-mute-4: abde\"));\r\n    }\r\n}\r\n\r\nclass SequenceReferencesTest extends ParseHelper {\r\n    @Test\r\n    void assignsLabelsToReferenceExpressions() throws ParseError {\r\n        expect(Sequences.parse(\"seq-refs: ac\")).toMatch(\r\n            node(\"ac\", 10)\r\n                .elem(node(\"a\", 10).noElems())\r\n                .elem(node(\"c\", 11).noElems())\r\n                .label(Label.a, node(\"a\", 10).noElems())\r\n                .label(Label.b, node(\"c\", 11).noElems())\r\n                .label(Label.c, node(\"c\", 11).noElems())\r\n        );\r\n    }\r\n\r\n    @Test\r\n    void mutesReferencesFromGeneratingLabels() throws ParseError {\r\n        TreeNode tree = Sequences.parse(\"seq-mute-refs: ac\");\r\n\r\n        expect(tree).toMatch(\r\n            node(\"ac\", 15)\r\n                .elem(node(\"a\", 15).noElems())\r\n                .label(Label.a, node(\"a\", 15).noElems())\r\n        );\r\n\r\n        assertNull(tree.get(Label.c));\r\n    }\r\n}\r\n\r\nclass ParseHelper {\r\n    Node<Label> expect(TreeNode node) {\r\n        return new NodeWrapper(node.elements.get(1));\r\n    }\r\n\r\n    NodeSpec<Label> node(String text, int offset) {\r\n        return new NodeSpec<Label>(text, offset);\r\n    }\r\n}\r\n\r\nclass NodeWrapper implements Node<Label> {\r\n    private TreeNode node;\r\n\r\n    NodeWrapper(TreeNode node) {\r\n        this.node = node;\r\n    }\r\n\r\n    public String text() {\r\n        return node.text;\r\n    }\r\n\r\n    public int offset() {\r\n        return node.offset;\r\n    }\r\n\r\n    public List<Node<Label>> elements() {\r\n        return node.elements.stream()\r\n            .map((elem) -> new NodeWrapper(elem))\r\n            .collect(Collectors.toList());\r\n    }\r\n\r\n    public Node<Label> get(Label key) {\r\n        return new NodeWrapper(node.get(key));\r\n    }\r\n}\r\n</document_content>\r\n</document>\r\n<document index=\"76\">\r\n<source>test/java/TerminalsTest.java</source>\r\n<document_content>package canopy.terminals;\r\n\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\nimport static org.junit.jupiter.api.Assertions.assertThrows;\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport helpers.Node;\r\nimport helpers.NodeSpec;\r\n\r\nimport test.grammars.terminals.Label;\r\nimport test.grammars.terminals.ParseError;\r\nimport test.grammars.terminals.Terminals;\r\nimport test.grammars.terminals.TreeNode;\r\n\r\nclass AnyCharTest extends ParseHelper {\r\n    @Test\r\n    void parsesAnySingleCharacter() throws ParseError {\r\n        expect(Terminals.parse(\"any: a\")).toMatch(node(\"a\", 5));\r\n        expect(Terminals.parse(\"any: !\")).toMatch(node(\"!\", 5));\r\n    }\r\n\r\n    @Test\r\n    void rejectsTheEmptyString() {\r\n        assertThrows(ParseError.class, () -> Terminals.parse(\"any: \"));\r\n    }\r\n\r\n    @Test\r\n    void rejectsInputWithTooManyCharacters() {\r\n        assertThrows(ParseError.class, () -> Terminals.parse(\"any: ab\"));\r\n    }\r\n}\r\n\r\nclass CharClassTest extends ParseHelper {\r\n    @Test\r\n    void parsesCharactersWithinTheClass() throws ParseError {\r\n        expect(Terminals.parse(\"pos-class: x\")).toMatch(node(\"x\", 11));\r\n    }\r\n\r\n    @Test\r\n    void rejectsCharactersOutsideTheClass() {\r\n        assertThrows(ParseError.class, () -> Terminals.parse(\"pos-class: 0\"));\r\n    }\r\n\r\n    @Test\r\n    void matchesCharactersCaseSensitively() {\r\n        assertThrows(ParseError.class, () -> Terminals.parse(\"pos-class: A\"));\r\n    }\r\n\r\n    @Test\r\n    void parsesCharactersOutsideANegativeClass() throws ParseError {\r\n        expect(Terminals.parse(\"neg-class: 0\")).toMatch(node(\"0\", 11));\r\n    }\r\n\r\n    @Test\r\n    void rejectsCharactersWithinANegativeClass() {\r\n        assertThrows(ParseError.class, () -> Terminals.parse(\"neg-class: x\"));\r\n    }\r\n}\r\n\r\nclass SingleQuotedStringTest extends ParseHelper {\r\n    @Test\r\n    void parsesThatExactString() throws ParseError {\r\n        expect(Terminals.parse(\"str-1: oat\")).toMatch(node(\"oat\", 7));\r\n    }\r\n\r\n    @Test\r\n    void matchesStringsCaseSensitively() {\r\n        assertThrows(ParseError.class, () -> Terminals.parse(\"str-1: OAT\"));\r\n    }\r\n\r\n    @Test\r\n    void rejectsStringsWithAdditionalPrefixes() {\r\n        assertThrows(ParseError.class, () -> Terminals.parse(\"str-1: boat\"));\r\n    }\r\n\r\n    @Test\r\n    void rejectsStringsWithAdditionalSuffixes() {\r\n        assertThrows(ParseError.class, () -> Terminals.parse(\"str-1: oath\"));\r\n    }\r\n\r\n    @Test\r\n    void rejectsTheEmptyString() {\r\n        assertThrows(ParseError.class, () -> Terminals.parse(\"str-1: \"));\r\n    }\r\n\r\n    @Test\r\n    void rejectsPrefixesOfTheTargetString() {\r\n        assertThrows(ParseError.class, () -> Terminals.parse(\"str-1: oa\"));\r\n    }\r\n}\r\n\r\nclass DoubleQuotedStringTest extends ParseHelper {\r\n    @Test\r\n    void parsesThatExactString() throws ParseError {\r\n        expect(Terminals.parse(\"str-2: oat\")).toMatch(node(\"oat\", 7));\r\n    }\r\n\r\n    @Test\r\n    void matchesStringsCaseSensitively() {\r\n        assertThrows(ParseError.class, () -> Terminals.parse(\"str-2: OAT\"));\r\n    }\r\n\r\n    @Test\r\n    void rejectsStringsWithAdditionalPrefixes() {\r\n        assertThrows(ParseError.class, () -> Terminals.parse(\"str-2: boat\"));\r\n    }\r\n\r\n    @Test\r\n    void rejectsStringsWithAdditionalSuffixes() {\r\n        assertThrows(ParseError.class, () -> Terminals.parse(\"str-2: oath\"));\r\n    }\r\n\r\n    @Test\r\n    void rejectsTheEmptyString() {\r\n        assertThrows(ParseError.class, () -> Terminals.parse(\"str-2: \"));\r\n    }\r\n\r\n    @Test\r\n    void rejectsPrefixesOfTheTargetString() {\r\n        assertThrows(ParseError.class, () -> Terminals.parse(\"str-2: oa\"));\r\n    }\r\n}\r\n\r\nclass CaseInsensitiveStringTest extends ParseHelper {\r\n    @Test\r\n    void parsesThatExactString() throws ParseError {\r\n        expect(Terminals.parse(\"str-ci: oat\")).toMatch(node(\"oat\", 8));\r\n    }\r\n\r\n    @Test\r\n    void matchesStringsCaseInsensitively() throws ParseError {\r\n        expect(Terminals.parse(\"str-ci: OAT\")).toMatch(node(\"OAT\", 8));\r\n    }\r\n\r\n    @Test\r\n    void rejectsStringsWithAdditionalPrefixes() {\r\n        assertThrows(ParseError.class, () -> Terminals.parse(\"str-ci: boat\"));\r\n    }\r\n\r\n    @Test\r\n    void rejectsStringsWithAdditionalSuffixes() {\r\n        assertThrows(ParseError.class, () -> Terminals.parse(\"str-ci: oath\"));\r\n    }\r\n\r\n    @Test\r\n    void rejectsTheEmptyString() {\r\n        assertThrows(ParseError.class, () -> Terminals.parse(\"str-ci: \"));\r\n    }\r\n\r\n    @Test\r\n    void rejectsPrefixesOfTheTargetString() {\r\n        assertThrows(ParseError.class, () -> Terminals.parse(\"str-ci: oa\"));\r\n    }\r\n}\r\n\r\nclass ParseHelper {\r\n    Node<Label> expect(TreeNode node) {\r\n        return new NodeWrapper(node.elements.get(1));\r\n    }\r\n\r\n    NodeSpec<Label> node(String text, int offset) {\r\n        return new NodeSpec<Label>(text, offset);\r\n    }\r\n}\r\n\r\nclass NodeWrapper implements Node<Label> {\r\n    private TreeNode node;\r\n\r\n    NodeWrapper(TreeNode node) {\r\n        this.node = node;\r\n    }\r\n\r\n    public String text() {\r\n        return node.text;\r\n    }\r\n\r\n    public int offset() {\r\n        return node.offset;\r\n    }\r\n\r\n    public List<Node<Label>> elements() {\r\n        return node.elements.stream()\r\n            .map((elem) -> new NodeWrapper(elem))\r\n            .collect(Collectors.toList());\r\n    }\r\n\r\n    public Node<Label> get(Label key) {\r\n        return new NodeWrapper(node.get(key));\r\n    }\r\n}\r\n</document_content>\r\n</document>\r\n<document index=\"77\">\r\n<source>test/python/choices_test.py</source>\r\n<document_content>from unittest import TestCase\r\nfrom .parse_helper import ParseHelper\r\nfrom grammars import choices\r\n\r\n\r\nclass ChoiceStringsTest(TestCase, ParseHelper):\r\n    def test_parses_any_of_the_choice_options(self):\r\n        self.assertParse((\"a\", 12), choices.parse(\"choice-abc: a\"))\r\n        self.assertParse((\"b\", 12), choices.parse(\"choice-abc: b\"))\r\n        self.assertParse((\"c\", 12), choices.parse(\"choice-abc: c\"))\r\n\r\n    def test_rejects_input_matching_none_of_the_options(self):\r\n        with self.assertRaises(choices.ParseError):\r\n            choices.parse(\"choice-abc: d\")\r\n\r\n    def test_rejects_superstrings_of_the_options(self):\r\n        with self.assertRaises(choices.ParseError):\r\n            choices.parse(\"choice-abc: ab\")\r\n\r\n    def test_parses_a_choice_as_part_of_a_sequence(self):\r\n        self.assertParse(\r\n            (\"repeat\", 12, [\r\n                (\"re\", 12, []),\r\n                (\"peat\", 14, [])\r\n            ]),\r\n            choices.parse(\"choice-seq: repeat\")\r\n        )\r\n\r\n    def test_does_not_backtrack_if_later_rules_fail(self):\r\n        with self.assertRaises(choices.ParseError):\r\n            choices.parse(\"choice-seq: reppeat\")\r\n\r\n\r\nclass ChoiceRepetitionTest(TestCase, ParseHelper):\r\n    def test_parses_a_different_option_on_each_iteration(self):\r\n        self.assertParse(\r\n            (\"abcabba\", 12, [\r\n                (\"a\", 12, []),\r\n                (\"b\", 13, []),\r\n                (\"c\", 14, []),\r\n                (\"a\", 15, []),\r\n                (\"b\", 16, []),\r\n                (\"b\", 17, []),\r\n                (\"a\", 18, [])\r\n            ]),\r\n            choices.parse(\"choice-rep: abcabba\")\r\n        )\r\n\r\n    def test_rejects_if_any_iteration_does_not_match_the_options(self):\r\n        with self.assertRaises(choices.ParseError):\r\n            choices.parse(\"choice-rep: abcadba\")\r\n\r\n\r\nclass ChoiceSequenceTest(TestCase, ParseHelper):\r\n    def test_parses_one_branch_of_the_choice(self):\r\n        self.assertParse(\r\n            (\"ab\", 13, [\r\n                (\"a\", 13, []),\r\n                (\"b\", 14, [])\r\n            ]),\r\n            choices.parse(\"choice-bind: ab\")\r\n        )\r\n\r\n    def test_binds_sequences_tighter_than_choices(self):\r\n        with self.assertRaises(choices.ParseError):\r\n            choices.parse(\"choice-bind: abef\")\r\n</document_content>\r\n</document>\r\n<document index=\"78\">\r\n<source>test/python/extensions_test.py</source>\r\n<document_content>from unittest import TestCase\r\nfrom .parse_helper import ParseHelper\r\nfrom grammars import extensions\r\n\r\n\r\nclass ExtensionsTest(TestCase, ParseHelper):\r\n    def test_adds_methods_to_a_string(self):\r\n        input  = \"ext-str: hello\"\r\n        result = extensions.parse(input, types=Types).elements[1]\r\n\r\n        self.assertEqual((0, [\"h\", \"e\", \"l\", \"l\", \"o\"]), result.ext_func())\r\n\r\n    def test_adds_methods_to_a_char_class(self):\r\n        input  = \"ext-class: k\"\r\n        result = extensions.parse(input, types=Types).elements[1]\r\n\r\n        self.assertEqual((0, [\"k\"]), result.ext_func())\r\n\r\n    def test_adds_methods_to_any_char(self):\r\n        input  = \"ext-any: ?\"\r\n        result = extensions.parse(input, types=Types).elements[1]\r\n\r\n        self.assertEqual((0, [\"?\"]), result.ext_func())\r\n\r\n    def test_adds_methods_to_a_maybe_rule(self):\r\n        input  = \"ext-maybe: hello\"\r\n        result = extensions.parse(input, types=Types).elements[1]\r\n\r\n        self.assertEqual((0, [\"h\", \"e\", \"l\", \"l\", \"o\"]), result.ext_func())\r\n\r\n    def test_adds_methods_to_a_repetition(self):\r\n        input  = \"ext-rep: abc\"\r\n        result = extensions.parse(input, types=Types).elements[1]\r\n\r\n        self.assertEqual((3, [\"a\", \"b\", \"c\"]), result.ext_func())\r\n\r\n    def test_adds_methods_to_a_sequence(self):\r\n        input  = \"ext-seq: xyz\"\r\n        result = extensions.parse(input, types=Types).elements[1]\r\n\r\n        self.assertEqual((3, [\"x\", \"y\", \"z\"]), result.ext_func())\r\n\r\n    def test_adds_methods_to_a_parenthesised_expression(self):\r\n        input  = \"ext-paren: !\"\r\n        result = extensions.parse(input, types=Types).elements[1]\r\n\r\n        self.assertEqual((0, [\"!\"]), result.ext_func())\r\n\r\n    def test_adds_methods_to_the_options_of_a_choice(self):\r\n        input  = \"ext-choice: 0\"\r\n        result = extensions.parse(input, types=Types).elements[1]\r\n        self.assertEqual((0, [\"0\"]), result.ext_func())\r\n\r\n        input  = \"ext-choice: 42\"\r\n        result = extensions.parse(input, types=Types).elements[1]\r\n        self.assertEqual((2, [\"4\", \"2\"]), result.ext_func())\r\n\r\n    def test_adds_methods_to_the_result_of_a_reference(self):\r\n        input  = \"ext-ref: hello\"\r\n        result = extensions.parse(input, types=Types).elements[1]\r\n\r\n        self.assertEqual((0, [\"h\", \"e\", \"l\", \"l\", \"o\"]), result.ext_func())\r\n\r\n    def test_adds_from_a_namespaced_module(self):\r\n        input  = \"ext-ns: hello\"\r\n        result = extensions.parse(input, types=Types).elements[1]\r\n\r\n        self.assertEqual(True, result.ns_func())\r\n\r\n\r\nclass Types:\r\n    class Ext(object):\r\n        def ext_func(self):\r\n            return (len(self.elements), list(self.text))\r\n\r\n    class NS:\r\n        class Ext(object):\r\n            def ns_func(self):\r\n                return True\r\n</document_content>\r\n</document>\r\n<document index=\"79\">\r\n<source>test/python/node_actions_test.py</source>\r\n<document_content>from unittest import TestCase\r\nfrom .parse_helper import ParseHelper\r\nfrom grammars import node_actions\r\n\r\n\r\nclass NodeActionsTest(TestCase, ParseHelper):\r\n    def test_makes_nodes_from_a_string(self):\r\n        input  = \"act-str: hello\"\r\n        result = node_actions.parse(input, actions=TestActions()).elements[1]\r\n\r\n        self.assertEqual([\"str\", input, 9, 14, []], result)\r\n\r\n    def test_makes_nodes_from_a_char_class(self):\r\n        input  = \"act-class: k\"\r\n        result = node_actions.parse(input, actions=TestActions()).elements[1]\r\n\r\n        self.assertEqual([\"char\", input, 11, 12, []], result)\r\n\r\n    def test_makes_nodes_from_any_char(self):\r\n        input  = \"act-any: ?\"\r\n        result = node_actions.parse(input, actions=TestActions()).elements[1]\r\n\r\n        self.assertEqual([\"any\", input, 9, 10, []], result)\r\n\r\n    def test_makes_nodes_from_a_maybe_rule(self):\r\n        input  = \"act-maybe: hello\"\r\n        result = node_actions.parse(input, actions=TestActions()).elements[1]\r\n\r\n        self.assertEqual([\"maybe\", input, 11, 16, []], result)\r\n\r\n    def test_does_not_invoke_an_action_for_a_maybe_rule_with_no_match(self):\r\n        input  = \"act-maybe: \"\r\n        self.assertParse((\"\", 11, []), node_actions.parse(input, actions=TestActions()))\r\n\r\n    def test_makes_nodes_from_a_repetition(self):\r\n        input  = \"act-rep: abc\"\r\n        result = node_actions.parse(input, actions=TestActions()).elements[1]\r\n\r\n        self.assertEqual([\"rep\", input, 9, 12], result[0:4])\r\n\r\n        self.assertParseElements([\r\n            (\"a\", 9, []),\r\n            (\"b\", 10, []),\r\n            (\"c\", 11, [])\r\n        ], result)\r\n\r\n    def test_makes_nodes_from_a_repetition_in_parentheses(self):\r\n        input  = \"act-rep-paren: abab\"\r\n        result = node_actions.parse(input, actions=TestActions()).elements[1]\r\n\r\n        self.assertEqual([\"rep-paren\", input, 15, 19], result[0:4])\r\n\r\n        self.assertParseElements([\r\n            (\"ab\", 15, [\r\n                (\"a\", 15, []),\r\n                (\"b\", 16, [])\r\n            ]),\r\n            (\"ab\", 17, [\r\n                (\"a\", 17, []),\r\n                (\"b\", 18, [])\r\n            ])\r\n        ], result)\r\n\r\n    def test_makes_nodes_from_a_sequence(self):\r\n        input  = \"act-seq: xyz\"\r\n        result = node_actions.parse(input, actions=TestActions()).elements[1]\r\n\r\n        self.assertEqual([\"seq\", input, 9, 12], result[0:4])\r\n\r\n        self.assertParseElements([\r\n            (\"x\", 9, []),\r\n            (\"y\", 10, []),\r\n            (\"z\", 11, [])\r\n        ], result)\r\n\r\n    def test_makes_nodes_from_a_sequence_with_muted_elements(self):\r\n        input  = \"act-seq-mute: xyz\"\r\n        result = node_actions.parse(input, actions=TestActions()).elements[1]\r\n\r\n        self.assertEqual([\"seq\", input, 14, 17], result[0:4])\r\n\r\n        self.assertParseElements([\r\n            (\"x\", 14, []),\r\n            (\"z\", 16, [])\r\n        ], result)\r\n\r\n    def test_makes_nodes_from_a_parenthesised_expression(self):\r\n        input  = \"act-paren: !\"\r\n        result = node_actions.parse(input, actions=TestActions()).elements[1]\r\n\r\n        self.assertEqual([\"paren\", input, 11, 12, []], result)\r\n\r\n    def test_binds_to_the_options_of_a_choice(self):\r\n        input  = \"act-choice: 0\"\r\n        result = node_actions.parse(input, actions=TestActions()).elements[1]\r\n        self.assertEqual([\"zero\", input, 12, 13, []], result)\r\n\r\n        input  = \"act-choice: 42\"\r\n        result = node_actions.parse(input, actions=TestActions()).elements[1]\r\n\r\n        self.assertEqual([\"int\", input, 12, 14], result[0:4])\r\n\r\n        self.assertParseElements([\r\n            (\"4\", 12, []),\r\n            (\"2\", 13, [\r\n                (\"2\", 13, [])\r\n            ])\r\n        ], result)\r\n\r\n    def test_treats_null_as_a_valid_result(self):\r\n        result = node_actions.parse(\"act-falsey: null\", actions=TestActions()).elements[1]\r\n        self.assertEqual(None, result)\r\n\r\n    def test_treats_false_as_a_valid_result(self):\r\n        result = node_actions.parse(\"act-falsey: false\", actions=TestActions()).elements[1]\r\n        self.assertEqual(False, result)\r\n\r\n    def test_treats_zero_as_a_valid_result(self):\r\n        result = node_actions.parse(\"act-falsey: 0\", actions=TestActions()).elements[1]\r\n        self.assertEqual(0, result)\r\n\r\n    def test_treats_empty_strings_as_a_valid_result(self):\r\n        result = node_actions.parse(\"act-falsey: ''\", actions=TestActions()).elements[1]\r\n        self.assertEqual(\"\", result)\r\n\r\n    def test_treats_empty_lists_as_a_valid_result(self):\r\n        result = node_actions.parse(\"act-falsey: []\", actions=TestActions()).elements[1]\r\n        self.assertEqual([], result)\r\n\r\n    def test_treats_falsey_values_as_acceptable_lookahead_results(self):\r\n        input  = \"act-falsey-pred: 0\"\r\n        result = node_actions.parse(input, actions=TestActions()).elements[1].elements[1]\r\n\r\n        self.assertEqual([\"zero\", input, 17, 18, []], result)\r\n\r\n    def test_treats_falsey_values_as_acceptable_repetition_results(self):\r\n        result = node_actions.parse(\"act-falsey-rep: null0false''[]\", actions=TestActions())\r\n        self.assertEqual([None, 0, False, \"\", []], result.elements[1].elements)\r\n\r\n    def test_treats_falsey_values_as_acceptable_maybe_results(self):\r\n        input  = \"act-falsey-opt: null\"\r\n        result = node_actions.parse(input, actions=TestActions()).elements[1]\r\n\r\n        self.assertEqual(None, result)\r\n\r\n    def test_treats_falsey_values_as_acceptable_sequence_results(self):\r\n        input  = \"act-falsey-seq: (null)\"\r\n        result = node_actions.parse(input, actions=TestActions()).elements[1]\r\n\r\n        self.assertEqual(3, len(result.elements))\r\n        self.assertEqual(None, result.elements[1])\r\n\r\n    def test_treats_falsey_values_as_acceptable_choice_results(self):\r\n        input  = \"act-falsey-choice: null\"\r\n        result = node_actions.parse(input, actions=TestActions()).elements[1]\r\n\r\n        self.assertEqual(None, result)\r\n\r\n\r\nclass TestActions:\r\n    def make_str(self, *args):\r\n        return [\"str\"] + list(args)\r\n\r\n    def make_char(self, *args):\r\n        return [\"char\"] + list(args)\r\n\r\n    def make_any(self, *args):\r\n        return [\"any\"] + list(args)\r\n\r\n    def make_maybe(self, *args):\r\n        return [\"maybe\"] + list(args)\r\n\r\n    def make_rep(self, *args):\r\n        return [\"rep\"] + list(args)\r\n\r\n    def make_seq(self, *args):\r\n        return [\"seq\"] + list(args)\r\n\r\n    def make_paren(self, *args):\r\n        return [\"paren\"] + list(args)\r\n\r\n    def make_rep_paren(self, *args):\r\n        return [\"rep-paren\"] + list(args)\r\n\r\n    def make_zero(self, *args):\r\n        return [\"zero\"] + list(args)\r\n\r\n    def make_int(self, *args):\r\n        return [\"int\"] + list(args)\r\n\r\n    def make_null(*args):\r\n        return None\r\n\r\n    def make_false(*args):\r\n        return False\r\n\r\n    def make_0(*args):\r\n        return 0\r\n\r\n    def make_empty_str(*args):\r\n        return \"\"\r\n\r\n    def make_empty_list(*args):\r\n        return []\r\n</document_content>\r\n</document>\r\n<document index=\"80\">\r\n<source>test/python/parse_helper.py</source>\r\n<document_content>class ParseHelper:\r\n    def assertParse(self, tuple, actual):\r\n        self.assertParseInner(tuple, actual.elements[1])\r\n\r\n    def assertParseElements(self, elems, action_args):\r\n        self.assertEqual(5, len(action_args))\r\n        self.assertEqual(len(elems), len(action_args[4]))\r\n\r\n        for i, elem in enumerate(elems):\r\n            self.assertParseInner(elem, action_args[4][i])\r\n\r\n    def assertParseInner(self, tuple, actual):\r\n        text, offset = tuple[0:2]\r\n\r\n        self.assertEqual(text, actual.text)\r\n        self.assertEqual(offset, actual.offset)\r\n\r\n        if len(tuple) > 2:\r\n            elements = tuple[2]\r\n            self.assertEqual(len(elements), len(actual.elements))\r\n\r\n            for i, elem in enumerate(elements):\r\n                self.assertParseInner(elem, actual.elements[i])\r\n\r\n        if len(tuple) > 3:\r\n            labelled = tuple[3]\r\n            for key, value in labelled.items():\r\n                self.assertParseInner(value, getattr(actual, key))\r\n</document_content>\r\n</document>\r\n<document index=\"81\">\r\n<source>test/python/predicates_test.py</source>\r\n<document_content>from unittest import TestCase\r\nfrom .parse_helper import ParseHelper\r\nfrom grammars import predicates\r\n\r\n\r\nclass PostiveLookAheadTest(TestCase, ParseHelper):\r\n    def test_checks_the_first_character_of_a_word(self):\r\n        self.assertParse(\r\n            (\"London\", 10, [\r\n                (\"\", 10, []),\r\n                (\"London\", 10, [\r\n                    (\"L\", 10, []),\r\n                    (\"o\", 11, []),\r\n                    (\"n\", 12, []),\r\n                    (\"d\", 13, []),\r\n                    (\"o\", 14, []),\r\n                    (\"n\", 15, [])\r\n                ])\r\n            ]),\r\n            predicates.parse(\"pos-name: London\")\r\n        )\r\n\r\n    def test_rejects_words_where_the_predicate_does_not_match(self):\r\n        with self.assertRaises(predicates.ParseError):\r\n            predicates.parse(\"pos-name: london\")\r\n\r\n    def test_resets_the_cursor_after_matching(self):\r\n        self.assertParse(\r\n            (\"<abc123>\", 9, [\r\n                (\"\", 9, []),\r\n                (\"<\", 9, []),\r\n                (\"abc123\", 10, [\r\n                    (\"a\", 10, []),\r\n                    (\"b\", 11, []),\r\n                    (\"c\", 12, []),\r\n                    (\"1\", 13, []),\r\n                    (\"2\", 14, []),\r\n                    (\"3\", 15, [])\r\n                ]),\r\n                (\">\", 16, [])\r\n            ]),\r\n            predicates.parse(\"pos-seq: <abc123>\")\r\n        )\r\n\r\n    def test_uses_a_reference_as_a_predicate(self):\r\n        self.assertParse(\r\n            (\"c99\", 9, [\r\n                (\"\", 9, []),\r\n                (\"c99\", 9, [\r\n                    (\"c\", 9, []),\r\n                    (\"9\", 10, []),\r\n                    (\"9\", 11, [])\r\n                ])\r\n            ]),\r\n            predicates.parse(\"pos-ref: c99\")\r\n        )\r\n\r\n\r\nclass NegativeLookAheadTest(TestCase, ParseHelper):\r\n    def test_checks_the_first_character_of_a_word(self):\r\n        self.assertParse(\r\n            (\"word\", 10, [\r\n                (\"\", 10, []),\r\n                (\"word\", 10, [\r\n                    (\"w\", 10, []),\r\n                    (\"o\", 11, []),\r\n                    (\"r\", 12, []),\r\n                    (\"d\", 13, [])\r\n                ])\r\n            ]),\r\n            predicates.parse(\"neg-name: word\")\r\n        )\r\n\r\n    def test_rejects_words_where_the_predicate_matches(self):\r\n        with self.assertRaises(predicates.ParseError):\r\n            predicates.parse(\"neg-name: Word\")\r\n\r\n    def test_checks_for_a_string_at_the_end(self):\r\n        self.assertParse(\r\n            (\"word\", 14, [\r\n                (\"word\", 14, []),\r\n                (\"\", 18, [])\r\n            ]),\r\n            predicates.parse(\"neg-tail-str: word\")\r\n        )\r\n\r\n    def test_checks_for_a_class_at_the_end(self):\r\n        self.assertParse(\r\n            (\"word\", 16, [\r\n                (\"word\", 16, []),\r\n                (\"\", 20, [])\r\n            ]),\r\n            predicates.parse(\"neg-tail-class: word\")\r\n        )\r\n\r\n    def test_checks_for_any_char_at_the_end(self):\r\n        self.assertParse(\r\n            (\"word\", 14, [\r\n                (\"word\", 14, []),\r\n                (\"\", 18, [])\r\n            ]),\r\n            predicates.parse(\"neg-tail-any: word\")\r\n        )\r\n\r\n    def test_rejects_inputs_that_match_the_negative_pattern(self):\r\n        with self.assertRaises(predicates.ParseError):\r\n            predicates.parse(\"neg-tail-str: wordmore text\")\r\n        with self.assertRaises(predicates.ParseError):\r\n            predicates.parse(\"neg-tail-class: words\")\r\n        with self.assertRaises(predicates.ParseError):\r\n            predicates.parse(\"neg-tail-any: word \")\r\n</document_content>\r\n</document>\r\n<document index=\"82\">\r\n<source>test/python/quantifiers_test.py</source>\r\n<document_content>from unittest import TestCase\r\nfrom .parse_helper import ParseHelper\r\nfrom grammars import quantifiers\r\n\r\n\r\nclass MaybeTest(TestCase, ParseHelper):\r\n    def test_parses_a_matching_character(self):\r\n        self.assertParse((\"4\", 7, []), quantifiers.parse(\"maybe: 4\"))\r\n\r\n    def test_parses_the_empty_string(self):\r\n        self.assertParse((\"\", 7, []), quantifiers.parse(\"maybe: \"))\r\n\r\n    def test_rejects_a_non_matching_string(self):\r\n        with self.assertRaises(quantifiers.ParseError):\r\n            quantifiers.parse(\"maybe: a\")\r\n\r\n\r\nclass ZeroOrMoreTest(TestCase, ParseHelper):\r\n    def test_parses_the_empty_string(self):\r\n        self.assertParse((\"\", 7, []), quantifiers.parse(\"rep-0: \"))\r\n\r\n    def test_parses_one_occurrence_of_the_pattern(self):\r\n        self.assertParse(\r\n            (\"z\", 7, [\r\n                (\"z\", 7, [])\r\n            ]),\r\n            quantifiers.parse(\"rep-0: z\")\r\n        )\r\n\r\n    def test_parses_many_occurrences_of_the_same_instance_of_the_pattern(self):\r\n        self.assertParse(\r\n            (\"zzzz\", 7, [\r\n                (\"z\", 7, []),\r\n                (\"z\", 8, []),\r\n                (\"z\", 9, []),\r\n                (\"z\", 10, [])\r\n            ]),\r\n            quantifiers.parse(\"rep-0: zzzz\")\r\n        )\r\n\r\n    def test_parses_many_occurrences_of_different_instances_of_the_pattern(self):\r\n        self.assertParse(\r\n            (\"wxyz\", 7, [\r\n                (\"w\", 7, []),\r\n                (\"x\", 8, []),\r\n                (\"y\", 9, []),\r\n                (\"z\", 10, [])\r\n            ]),\r\n            quantifiers.parse(\"rep-0: wxyz\")\r\n        )\r\n\r\n    def test_rejects_strings_with_a_non_matching_prefix(self):\r\n        with self.assertRaises(quantifiers.ParseError):\r\n            quantifiers.parse(\"rep-0: 4x\")\r\n\r\n    def test_rejects_strings_with_a_non_matching_suffix(self):\r\n        with self.assertRaises(quantifiers.ParseError):\r\n            quantifiers.parse(\"rep-0: x4\")\r\n\r\n    def test_parses_repeating_patterns_greedily(self):\r\n        with self.assertRaises(quantifiers.ParseError):\r\n            quantifiers.parse(\"greedy-0: xy\")\r\n\r\n\r\nclass OneOrMoreTest(TestCase, ParseHelper):\r\n    def test_rejects_the_empty_string(self):\r\n        with self.assertRaises(quantifiers.ParseError):\r\n            quantifiers.parse(\"rep-1: \")\r\n\r\n    def test_parses_one_occurrence_of_the_pattern(self):\r\n        self.assertParse(\r\n            (\"z\", 7, [\r\n                (\"z\", 7, [])\r\n            ]),\r\n            quantifiers.parse(\"rep-1: z\")\r\n        )\r\n\r\n    def test_parses_many_occurrences_of_the_same_instance_of_the_pattern(self):\r\n        self.assertParse(\r\n            (\"zzzz\", 7, [\r\n                (\"z\", 7, []),\r\n                (\"z\", 8, []),\r\n                (\"z\", 9, []),\r\n                (\"z\", 10, [])\r\n            ]),\r\n            quantifiers.parse(\"rep-1: zzzz\")\r\n        )\r\n\r\n    def test_parses_many_occurrences_of_different_instances_of_the_pattern(self):\r\n        self.assertParse(\r\n            (\"wxyz\", 7, [\r\n                (\"w\", 7, []),\r\n                (\"x\", 8, []),\r\n                (\"y\", 9, []),\r\n                (\"z\", 10, [])\r\n            ]),\r\n            quantifiers.parse(\"rep-1: wxyz\")\r\n        )\r\n\r\n    def test_rejects_strings_with_a_non_matching_prefix(self):\r\n        with self.assertRaises(quantifiers.ParseError):\r\n            quantifiers.parse(\"rep-1: 4x\")\r\n\r\n    def test_rejects_strings_with_a_non_matching_suffix(self):\r\n        with self.assertRaises(quantifiers.ParseError):\r\n            quantifiers.parse(\"rep-1: x4\")\r\n\r\n    def test_parses_repeating_patterns_greedily(self):\r\n        with self.assertRaises(quantifiers.ParseError):\r\n            quantifiers.parse(\"greedy-1: xy\")\r\n\r\n    def test_parses_a_repeated_reference(self):\r\n        self.assertParse(\r\n            (\"#abc123\", 11, [\r\n                (\"#\", 11, []),\r\n                (\"abc123\", 12, [\r\n                    (\"a\", 12, []),\r\n                    (\"b\", 13, []),\r\n                    (\"c\", 14, []),\r\n                    (\"1\", 15, []),\r\n                    (\"2\", 16, []),\r\n                    (\"3\", 17, [])\r\n                ])\r\n            ]),\r\n            quantifiers.parse(\"color-ref: #abc123\")\r\n        )\r\n\r\n    def test_parses_a_repeated_choice(self):\r\n        self.assertParse(\r\n            (\"#abc123\", 14, [\r\n                (\"#\", 14, []),\r\n                (\"abc123\", 15, [\r\n                    (\"a\", 15, []),\r\n                    (\"b\", 16, []),\r\n                    (\"c\", 17, []),\r\n                    (\"1\", 18, []),\r\n                    (\"2\", 19, []),\r\n                    (\"3\", 20, [])\r\n                ])\r\n            ]),\r\n            quantifiers.parse(\"color-choice: #abc123\")\r\n        )\r\n\r\n\r\nclass ExactlyTest(TestCase, ParseHelper):\r\n    def test_rejects_the_empty_string(self):\r\n        with self.assertRaises(quantifiers.ParseError):\r\n            quantifiers.parse(\"rep-exact: \")\r\n\r\n    def test_parses_the_required_number_of_the_pattern(self):\r\n        self.assertParse(\r\n            (\"abc\", 11, [\r\n                (\"a\", 11, []),\r\n                (\"b\", 12, []),\r\n                (\"c\", 13, [])\r\n            ]),\r\n            quantifiers.parse(\"rep-exact: abc\")\r\n        )\r\n\r\n    def test_rejects_too_few_copies_of_the_pattern(self):\r\n        with self.assertRaises(quantifiers.ParseError):\r\n            quantifiers.parse(\"rep-exact: ab\")\r\n\r\n    def test_rejects_too_many_copies_of_the_pattern(self):\r\n        with self.assertRaises(quantifiers.ParseError):\r\n            quantifiers.parse(\"rep-exact: abcd\")\r\n\r\n\r\nclass MinimumTest(TestCase, ParseHelper):\r\n    def test_rejects_the_empty_string(self):\r\n        with self.assertRaises(quantifiers.ParseError):\r\n            quantifiers.parse(\"rep-min: \")\r\n\r\n    def test_parses_the_minimum_number_of_the_pattern(self):\r\n        self.assertParse(\r\n            (\"abc\", 9, [\r\n                (\"a\", 9, []),\r\n                (\"b\", 10, []),\r\n                (\"c\", 11, [])\r\n            ]),\r\n            quantifiers.parse(\"rep-min: abc\")\r\n        )\r\n\r\n    def test_parses_more_copies_of_the_pattern(self):\r\n        self.assertParse(\r\n            (\"abcdef\", 9, [\r\n                (\"a\", 9, []),\r\n                (\"b\", 10, []),\r\n                (\"c\", 11, []),\r\n                (\"d\", 12, []),\r\n                (\"e\", 13, []),\r\n                (\"f\", 14, [])\r\n            ]),\r\n            quantifiers.parse(\"rep-min: abcdef\")\r\n        )\r\n\r\n    def test_rejects_too_few_copies_of_the_pattern(self):\r\n        with self.assertRaises(quantifiers.ParseError):\r\n            quantifiers.parse(\"rep-min: ab\")\r\n\r\n\r\nclass RangeTest(TestCase, ParseHelper):\r\n    def test_rejects_the_empty_string(self):\r\n        with self.assertRaises(quantifiers.ParseError):\r\n            quantifiers.parse(\"rep-range: \")\r\n\r\n    def test_parses_the_minimum_number_of_the_pattern(self):\r\n        self.assertParse(\r\n            (\"abc\", 11, [\r\n                (\"a\", 11, []),\r\n                (\"b\", 12, []),\r\n                (\"c\", 13, [])\r\n            ]),\r\n            quantifiers.parse(\"rep-range: abc\")\r\n        )\r\n\r\n    def test_parses_the_maximum_number_of_the_pattern(self):\r\n        self.assertParse(\r\n            (\"abcde\", 11, [\r\n                (\"a\", 11, []),\r\n                (\"b\", 12, []),\r\n                (\"c\", 13, []),\r\n                (\"d\", 14, []),\r\n                (\"e\", 15, [])\r\n            ]),\r\n            quantifiers.parse(\"rep-range: abcde\")\r\n        )\r\n\r\n    def test_rejects_too_few_copies_of_the_pattern(self):\r\n        with self.assertRaises(quantifiers.ParseError):\r\n            quantifiers.parse(\"rep-range: ab\")\r\n\r\n    def test_rejects_too_many_copies_of_the_pattern(self):\r\n        with self.assertRaises(quantifiers.ParseError):\r\n            quantifiers.parse(\"rep-range: abcdef\")\r\n</document_content>\r\n</document>\r\n<document index=\"83\">\r\n<source>test/python/sequences_test.py</source>\r\n<document_content>from unittest import TestCase\r\nfrom .parse_helper import ParseHelper\r\nfrom grammars import sequences\r\n\r\n\r\nclass SequenceStringsTest(TestCase, ParseHelper):\r\n    def test_parses_a_matching_sequence(self):\r\n        self.assertParse(\r\n            (\"abc\", 9, [\r\n                (\"a\", 9, []),\r\n                (\"b\", 10, []),\r\n                (\"c\", 11, [])\r\n            ]),\r\n            sequences.parse(\"seq-str: abc\")\r\n        )\r\n\r\n    def test_rejects_a_missing_prefix(self):\r\n        with self.assertRaises(sequences.ParseError):\r\n            sequences.parse(\"seq-str: bc\")\r\n\r\n    def test_rejects_an_additional_prefix(self):\r\n        with self.assertRaises(sequences.ParseError):\r\n            sequences.parse(\"seq-str: zabc\")\r\n\r\n    def test_rejects_a_missing_middle(self):\r\n        with self.assertRaises(sequences.ParseError):\r\n            sequences.parse(\"seq-str: ac\")\r\n\r\n    def test_rejects_an_additional_middle(self):\r\n        with self.assertRaises(sequences.ParseError):\r\n            sequences.parse(\"seq-str: azbzc\")\r\n\r\n    def test_rejects_a_missing_suffix(self):\r\n        with self.assertRaises(sequences.ParseError):\r\n            sequences.parse(\"seq-str: ab\")\r\n\r\n    def test_rejects_an_additional_suffix(self):\r\n        with self.assertRaises(sequences.ParseError):\r\n            sequences.parse(\"seq-str: abcz\")\r\n\r\n\r\nclass SequenceMaybesTest(TestCase, ParseHelper):\r\n    def test_parses_at_the_start(self):\r\n        self.assertParse(\r\n            (\"bc\", 13, [\r\n                (\"\", 13, []),\r\n                (\"b\", 13, []),\r\n                (\"c\", 14, [])\r\n            ]),\r\n            sequences.parse(\"seq-maybe-1: bc\")\r\n        )\r\n\r\n    def test_parses_in_the_middle(self):\r\n        self.assertParse(\r\n            (\"ac\", 13, [\r\n                (\"a\", 13, []),\r\n                (\"\", 14, []),\r\n                (\"c\", 14, [])\r\n            ]),\r\n            sequences.parse(\"seq-maybe-2: ac\")\r\n        )\r\n\r\n    def test_parses_at_the_end(self):\r\n        self.assertParse(\r\n            (\"ab\", 13, [\r\n                (\"a\", 13, []),\r\n                (\"b\", 14, []),\r\n                (\"\", 15, [])\r\n            ]),\r\n            sequences.parse(\"seq-maybe-3: ab\")\r\n        )\r\n\r\n\r\nclass SequenceRepetitionTest(TestCase, ParseHelper):\r\n    def test_allows_empty_matches(self):\r\n        self.assertParse(\r\n            (\"0\", 11, [\r\n                (\"\", 11, []),\r\n                (\"0\", 11, [])\r\n            ]),\r\n            sequences.parse(\"seq-rep-1: 0\")\r\n        )\r\n\r\n    def test_allows_non_empty_matches(self):\r\n        self.assertParse(\r\n            (\"abc0\", 11, [\r\n                (\"abc\", 11, [ (\"a\", 11, []), (\"b\", 12, []), (\"c\", 13, []) ]),\r\n                (\"0\", 14, [])\r\n            ]),\r\n            sequences.parse(\"seq-rep-1: abc0\")\r\n        )\r\n\r\n    def test_parses_repetitions_greedily(self):\r\n        with self.assertRaises(sequences.ParseError):\r\n            sequences.parse(\"seq-rep-2: aaa\")\r\n\r\n\r\nclass SequenceRepeatedSubSequenceTest(TestCase, ParseHelper):\r\n    def test_parses_a_nested_tree(self):\r\n        self.assertParse(\r\n            (\"ab1b2b3c\", 16, [\r\n                (\"a\", 16, []),\r\n                (\"b1b2b3\", 17, [\r\n                    (\"b1\", 17, [ (\"b\", 17, []), (\"1\", 18, []) ]),\r\n                    (\"b2\", 19, [ (\"b\", 19, []), (\"2\", 20, []) ]),\r\n                    (\"b3\", 21, [ (\"b\", 21, []), (\"3\", 22, []) ])\r\n                ]),\r\n                (\"c\", 23, [])\r\n            ]),\r\n            sequences.parse(\"seq-rep-subseq: ab1b2b3c\")\r\n        )\r\n\r\n    def test_rejects_the_input_if_the_sub_sequence_does_not_match(self):\r\n        with self.assertRaises(sequences.ParseError):\r\n            sequences.parse(\"seq-rep-subseq: ab1b2bc\")\r\n\r\n\r\nclass SequenceLabellingTest(TestCase, ParseHelper):\r\n    def test_creates_named_references_to_child_nodes(self):\r\n        self.assertParse(\r\n            (\"v987\", 11, [\r\n                (\"v\", 11, []),\r\n                (\"987\", 12, [ (\"9\", 12, []), (\"8\", 13, []), (\"7\", 14, []) ])\r\n            ], {\r\n                \"num\": (\"987\", 12, [ (\"9\", 12, []), (\"8\", 13, []), (\"7\", 14, []) ])\r\n            }),\r\n            sequences.parse(\"seq-label: v987\")\r\n        )\r\n\r\n    def test_creates_named_references_inside_repeated_sub_sequences(self):\r\n        self.assertParse(\r\n            (\"v.AB.CD.EF\", 18, [\r\n                (\"v\", 18, []),\r\n                (\".AB.CD.EF\", 19, [\r\n                    (\".AB\", 19, [\r\n                        (\".\", 19),\r\n                        (\"AB\", 20, [ (\"A\", 20, []), (\"B\", 21, []) ])\r\n                    ], {\r\n                        \"part\": (\"AB\", 20, [ (\"A\", 20, []), (\"B\", 21, []) ])\r\n                    }),\r\n                    (\".CD\", 22, [\r\n                        (\".\", 22),\r\n                        (\"CD\", 23, [ (\"C\", 23, []), (\"D\", 24, []) ])\r\n                    ], {\r\n                        \"part\": (\"CD\", 23, [ (\"C\", 23, []), (\"D\", 24, []) ])\r\n                    }),\r\n                    (\".EF\", 25, [\r\n                        (\".\", 25),\r\n                        (\"EF\", 26, [ (\"E\", 26, []), (\"F\", 27, []) ])\r\n                    ], {\r\n                        \"part\": (\"EF\", 26, [ (\"E\", 26, []), (\"F\", 27, []) ])\r\n                    })\r\n                ])\r\n            ]),\r\n            sequences.parse(\"seq-label-subseq: v.AB.CD.EF\")\r\n        )\r\n\r\n\r\nclass SequenceMutingTest(TestCase, ParseHelper):\r\n    def test_removes_child_nodes_from_the_sequence(self):\r\n        self.assertParse(\r\n            (\"key: 42\", 12, [\r\n                (\"key\", 12, [ (\"k\", 12, []), (\"e\", 13, []), (\"y\", 14, []) ]),\r\n                (\"42\", 17, [ (\"4\", 17, []), (\"2\", 18, []) ])\r\n            ]),\r\n            sequences.parse(\"seq-mute-1: key: 42\")\r\n        )\r\n\r\n    def test_removes_child_sequences_from_the_sequence(self):\r\n        self.assertParse(\r\n            (\"key: 42\", 12, [\r\n                (\"key\", 12, [ (\"k\", 12, []), (\"e\", 13, []), (\"y\", 14, []) ]),\r\n                (\"42\", 17, [ (\"4\", 17, []), (\"2\", 18, []) ])\r\n            ]),\r\n            sequences.parse(\"seq-mute-2: key: 42\")\r\n        )\r\n\r\n    def test_removes_nodes_from_child_sequences(self):\r\n        self.assertParse(\r\n            (\"v.AB.CD.EF\", 12, [\r\n                (\"v\", 12, []),\r\n                (\".AB.CD.EF\", 13, [\r\n                    (\".AB\", 13, [\r\n                        (\"AB\", 14, [ (\"A\", 14, []), (\"B\", 15, []) ])\r\n                    ]),\r\n                    (\".CD\", 16, [\r\n                        (\"CD\", 17, [ (\"C\", 17, []), (\"D\", 18, []) ])\r\n                    ]),\r\n                    (\".EF\", 19, [\r\n                        (\"EF\", 20, [ (\"E\", 20, []), (\"F\", 21, []) ])\r\n                    ])\r\n                ])\r\n            ]),\r\n            sequences.parse(\"seq-mute-3: v.AB.CD.EF\")\r\n        )\r\n\r\n    def test_correctly_handles_nested_expressions_using_mutes(self):\r\n        self.assertParse(\r\n            (\"abcde\", 12, [\r\n                (\"a\", 12, []),\r\n                (\"e\", 16, [])\r\n            ]),\r\n            sequences.parse(\"seq-mute-4: abcde\")\r\n        )\r\n\r\n    def test_allows_the_first_element_to_be_muted(self):\r\n        self.assertParse(\r\n            (\"abc\", 16, [\r\n                (\"b\", 17, []),\r\n                (\"c\", 18, [])\r\n            ]),\r\n            sequences.parse(\"seq-mute-first: abc\")\r\n        )\r\n\r\n    def test_allows_the_last_element_to_be_muted(self):\r\n        self.assertParse(\r\n            (\"abc\", 15, [\r\n                (\"a\", 15, []),\r\n                (\"b\", 16, [])\r\n            ]),\r\n            sequences.parse(\"seq-mute-last: abc\")\r\n        )\r\n\r\n    def test_rejects_input_missing_muted_expressions(self):\r\n        with self.assertRaises(sequences.ParseError):\r\n            sequences.parse(\"seq-mute-4: ae\")\r\n\r\n        with self.assertRaises(sequences.ParseError):\r\n            sequences.parse(\"seq-mute-4: abde\")\r\n\r\n\r\nclass SequenceReferencesTest(TestCase, ParseHelper):\r\n    def test_assigns_labels_to_reference_expressions(self):\r\n        self.assertParse(\r\n            (\"ac\", 10, [\r\n                (\"a\", 10, []),\r\n                (\"c\", 11, [])\r\n            ], {\r\n                \"a\": (\"a\", 10, []),\r\n                \"b\": (\"c\", 11, []),\r\n                \"c\": (\"c\", 11, [])\r\n            }),\r\n            sequences.parse(\"seq-refs: ac\")\r\n        )\r\n\r\n    def test_mutes_references_from_generating_labels(self):\r\n        tree = sequences.parse(\"seq-mute-refs: ac\")\r\n\r\n        self.assertParse(\r\n            (\"ac\", 15, [\r\n                (\"a\", 15, []),\r\n            ], {\r\n                \"a\": (\"a\", 15, [])\r\n            }),\r\n            tree\r\n        )\r\n        self.assertFalse(hasattr(tree, 'c'))\r\n</document_content>\r\n</document>\r\n<document index=\"84\">\r\n<source>test/python/terminals_test.py</source>\r\n<document_content>from unittest import TestCase\r\nfrom .parse_helper import ParseHelper\r\nfrom grammars import terminals\r\n\r\n\r\nclass AnyCharTest(TestCase, ParseHelper):\r\n    def test_parses_any_single_character(self):\r\n        self.assertParse((\"a\", 5), terminals.parse(\"any: a\"))\r\n        self.assertParse((\"!\", 5), terminals.parse(\"any: !\"))\r\n\r\n    def test_rejects_the_empty_string(self):\r\n        with self.assertRaises(terminals.ParseError):\r\n            terminals.parse(\"any: \")\r\n\r\n    def test_rejects_input_with_too_many_characters(self):\r\n        with self.assertRaises(terminals.ParseError):\r\n            terminals.parse(\"any: ab\")\r\n\r\n\r\nclass CharClassTest(TestCase, ParseHelper):\r\n    def test_parses_characters_within_the_class(self):\r\n        self.assertParse((\"x\", 11), terminals.parse(\"pos-class: x\"))\r\n\r\n    def test_rejects_characters_outside_the_class(self):\r\n        with self.assertRaises(terminals.ParseError):\r\n            terminals.parse(\"pos-class: 0\")\r\n\r\n    def test_matches_characters_case_sensitively(self):\r\n        with self.assertRaises(terminals.ParseError):\r\n            terminals.parse(\"pos-class: A\")\r\n\r\n    def test_parses_characters_outside_a_negative_class(self):\r\n        self.assertParse((\"0\", 11), terminals.parse(\"neg-class: 0\"))\r\n\r\n    def test_rejects_characters_within_a_negative_class(self):\r\n        with self.assertRaises(terminals.ParseError):\r\n            terminals.parse(\"neg-class: x\")\r\n\r\n\r\nclass SingleQuotedStringTest(TestCase, ParseHelper):\r\n    def test_parses_that_exact_string(self):\r\n        self.assertParse((\"oat\", 7), terminals.parse(\"str-1: oat\"))\r\n\r\n    def test_matches_strings_case_sensitively(self):\r\n        with self.assertRaises(terminals.ParseError):\r\n            terminals.parse(\"str-1: OAT\")\r\n\r\n    def test_rejects_strings_with_additional_prefixes(self):\r\n        with self.assertRaises(terminals.ParseError):\r\n            terminals.parse(\"str-1: boat\")\r\n\r\n    def test_rejects_strings_with_additional_suffixes(self):\r\n        with self.assertRaises(terminals.ParseError):\r\n            terminals.parse(\"str-1: oath\")\r\n\r\n    def test_rejects_the_empty_string(self):\r\n        with self.assertRaises(terminals.ParseError):\r\n            terminals.parse(\"str-1: \")\r\n\r\n    def test_rejects_prefixes_of_the_target_string(self):\r\n        with self.assertRaises(terminals.ParseError):\r\n            terminals.parse(\"str-1: oa\")\r\n\r\n\r\nclass DoubleQuotedStringTest(TestCase, ParseHelper):\r\n    def test_parses_that_exact_string(self):\r\n        self.assertParse((\"oat\", 7), terminals.parse(\"str-2: oat\"))\r\n\r\n    def test_matches_strings_case_sensitively(self):\r\n        with self.assertRaises(terminals.ParseError):\r\n            terminals.parse(\"str-2: OAT\")\r\n\r\n    def test_rejects_strings_with_additional_prefixes(self):\r\n        with self.assertRaises(terminals.ParseError):\r\n            terminals.parse(\"str-2: boat\")\r\n\r\n    def test_rejects_strings_with_additional_suffixes(self):\r\n        with self.assertRaises(terminals.ParseError):\r\n            terminals.parse(\"str-2: oath\")\r\n\r\n    def test_rejects_the_empty_string(self):\r\n        with self.assertRaises(terminals.ParseError):\r\n            terminals.parse(\"str-2: \")\r\n\r\n    def test_rejects_prefixes_of_the_target_string(self):\r\n        with self.assertRaises(terminals.ParseError):\r\n            terminals.parse(\"str-2: oa\")\r\n\r\n\r\nclass CaseInsensitiveStringTest(TestCase, ParseHelper):\r\n    def test_parses_that_exact_string(self):\r\n        self.assertParse((\"oat\", 8), terminals.parse(\"str-ci: oat\"))\r\n\r\n    def test_matches_strings_case_insensitively(self):\r\n        self.assertParse((\"OAT\", 8), terminals.parse(\"str-ci: OAT\"))\r\n\r\n    def test_rejects_strings_with_additional_prefixes(self):\r\n        with self.assertRaises(terminals.ParseError):\r\n            terminals.parse(\"str-ci: boat\")\r\n\r\n    def test_rejects_strings_with_additional_suffixes(self):\r\n        with self.assertRaises(terminals.ParseError):\r\n            terminals.parse(\"str-ci: oath\")\r\n\r\n    def test_rejects_the_empty_string(self):\r\n        with self.assertRaises(terminals.ParseError):\r\n            terminals.parse(\"str-ci: \")\r\n\r\n    def test_rejects_prefixes_of_the_target_string(self):\r\n        with self.assertRaises(terminals.ParseError):\r\n            terminals.parse(\"str-ci: oa\")\r\n</document_content>\r\n</document>\r\n<document index=\"85\">\r\n<source>test/python/__init__.py</source>\r\n<document_content></document_content>\r\n</document>\r\n</documents>\r\n"
}
