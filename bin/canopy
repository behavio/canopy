#!/usr/bin/env node

const fs   = require('fs').promises
const nopt = require('nopt')

const { basename, dirname, join, relative } = require('path')
const canopy = require('../lib/canopy')

Object.assign(canopy.builders, {
  js: canopy.builders.javascript,
  py: canopy.builders.python,
  rb: canopy.builders.ruby
})

const PEG_EXT = '.peg'

const options = nopt({
  lang: String,
  output: String
}, {
  l: '--lang',
  o: '--output'
})

function resolvePaths () {
  let input = relative(process.cwd(), options.argv.remain[0])
  let output = options.output

  if (output) {
    output = relative(process.cwd(), output)
  } else {
    output = join(dirname(input), basename(input, PEG_EXT))
  }
  return [input, output]
}

async function main () {
  let [inputPath, outputPath] = resolvePaths()

  let lang  = options.lang || 'js'

  if (!canopy.builders.hasOwnProperty(lang))
    throw new Error('Unrecognised target language: ' + lang)

  let comment = [
    'This file was generated from ' + inputPath,
    'See https://canopy.jcoglan.com/ for documentation'
  ]

  let grammar = await fs.readFile(inputPath, 'utf8'),
      builder = canopy.builders[lang].create(outputPath),
      buffers = canopy.compile(grammar, builder)

  for (let [name, source] of buffers) {
    await fs.mkdir(dirname(name), { recursive: true })
    let content = builder.comment(comment).join('\n') + '\n\n' + source
    await fs.writeFile(name, content)
  }
}

async function run () {
  try {
    await main()
  } catch (err) {
    console.error(err.message)
    console.error(err.stack)
    process.exit(1)
  }
}

run()
