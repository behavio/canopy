<documents>
<document index="1">
<source>bin/canopy</source>
<document_content>#!/usr/bin/env node

const fs   = require('fs').promises
const nopt = require('nopt')

const { basename, dirname, join, relative } = require('path')
const canopy = require('../lib/canopy')

Object.assign(canopy.builders, {
  js: canopy.builders.javascript,
  py: canopy.builders.python,
  rb: canopy.builders.ruby
})

const PEG_EXT = '.peg'

const options = nopt({
  lang: String,
  output: String
}, {
  l: '--lang',
  o: '--output'
})

function resolvePaths () {
  let input = relative(process.cwd(), options.argv.remain[0])
  let output = options.output

  if (output) {
    output = relative(process.cwd(), output)
  } else {
    output = join(dirname(input), basename(input, PEG_EXT))
  }
  return [input, output]
}

async function main () {
  let [inputPath, outputPath] = resolvePaths()

  let lang  = options.lang || 'js'

  if (!canopy.builders.hasOwnProperty(lang))
    throw new Error('Unrecognised target language: ' + lang)

  let comment = [
    'This file was generated from ' + inputPath,
    'See https://canopy.jcoglan.com/ for documentation'
  ]

  let grammar = await fs.readFile(inputPath, 'utf8'),
      builder = canopy.builders[lang].create(outputPath),
      buffers = canopy.compile(grammar, builder)

  for (let [name, source] of buffers) {
    await fs.mkdir(dirname(name), { recursive: true })
    let content = builder.comment(comment).join('\n') + '\n\n' + source
    await fs.writeFile(name, content)
  }
}

async function run () {
  try {
    await main()
  } catch (err) {
    console.error(err.message)
    console.error(err.stack)
    process.exit(1)
  }
}

run()
</document_content>
</document>
<document index="2">
<source>CONTRIBUTING.md</source>
<document_content># Building and testing Canopy

To build and test the project, you will need to install dependencies for several
languages. The build and test suite only requires Node.js installed, and you
only need other languages and libraries installed to run the examples for those
languages.

## Getting the source code

    git clone git://github.com/jcoglan/canopy.git

## Installing dependencies

To install the dependencies for the build and test suite:

    npm install

To install the dependencies for the Python examples:

    pipenv install

To install the dependencies for the Ruby examples (and the tools used to build
the website):

    bundle install

## Building the project

Canopy is self-hosting, which means it contains code that was generated by its
own compiler. This means that it can be tricky to build, but I've tried to
arrange things so that it's difficult to end up with a working copy that won't
execute.

After cloning the repo and running `npm install` you should immediately be able
to run the tests:

    make test

This only tests the code in `src`, which is the canonical source code and where
you should make changes. The code in `bin` is not tested, and the code in `src`
is designed not to be tied to Node but to run on any JS platform. All file I/O
happens in `bin/canopy`.

If you want to run the `bin/canopy` script to run the command-line interface,
you need to bootstrap the project, which meeans taking a copy of the last-known
working instance of the code. To do this just run:

    make

This runs the tests, and if they pass, it copies all the code from `src` into
`lib`. `bin/canopy` loads code from `lib`, not `src`, so the compiler should
always have working source code to use.

Finally, if you want to recompile Canopy's metagrammar, i.e. the grammar that
defines how grammars are written (that's the self-hosting bit), run:

    make compile

You need to have bootstrapped the project for this to work.

To regenerate the example Canopy parsers:

    make java
    make js
    make python
    make ruby

To regenerate the example PEG.js parsers:

    make pegjs

## Running the examples

To run the Java examples:

    javac examples/JavaExample.java && java examples.JavaExample

To run the JavaScript examples:

    node examples/javascript.js

To run the Python examples:

    pipenv shell
    py.test examples/python.py

To run the Ruby examples:

    ruby examples/ruby.rb
</document_content>
</document>
<document index="3">
<source>Gemfile</source>
<document_content>source 'https://rubygems.org'

gem 'citrus'
gem 'parslet'
gem 'treetop'
gem 'benchmark-ips'

gem 'jekyll'
</document_content>
</document>
<document index="4">
<source>lib/ast/action.js</source>
<document_content>'use strict'

class Action {
  constructor (expression, actionName) {
    this._expression = expression
    this._actionName = actionName
  }

  *[Symbol.iterator] () {
    yield this._expression
  }

  compile (builder, address) {
    this._expression.compile(builder, address, this._actionName)
  }
}

module.exports = Action
</document_content>
</document>
<document index="5">
<source>lib/ast/any_char.js</source>
<document_content>'use strict'

class AnyChar {
  compile (builder, address, action) {
    builder.if_(builder.hasChars_(), () => {
      let of = builder.offset_()
      builder.syntaxNode_(address, of, of + ' + 1', null, action)
    }, () => {
      builder.failure_(address, '<any char>')
    })
  }
}

module.exports = AnyChar
</document_content>
</document>
<document index="6">
<source>lib/ast/char_class.js</source>
<document_content>'use strict'

class CharClass {
  constructor (text, regex) {
    this._text = text
    this.regex = regex
  }

  compile (builder, address, action) {
    let regex = this.constName || this.regex,
        chunk = builder.chunk_(1)

    builder.if_(builder.regexMatch_(regex, chunk), () => {
      let of = builder.offset_()
      builder.syntaxNode_(address, of, of + ' + 1', null, action)
    }, () => {
      builder.failure_(address, this._text)
    })
  }
}

module.exports = CharClass
</document_content>
</document>
<document index="7">
<source>lib/ast/choice.js</source>
<document_content>'use strict'

class Choice {
  constructor (options) {
    this._options = options
  }

  [Symbol.iterator] () {
    return this._options[Symbol.iterator]()
  }

  compile (builder, address) {
    let startOffset = builder.localVar_('index', builder.offset_())
    this._compileChoices(builder, address, 0, startOffset)
  }

  _compileChoices (builder, address, index, startOffset) {
    if (index === this._options.length) return

    this._options[index].compile(builder, address)

    builder.unlessNode_(address, () => {
      builder.assign_(builder.offset_(), startOffset)
      this._compileChoices(builder, address, index + 1, startOffset)
    })
  }
}

module.exports = Choice
</document_content>
</document>
<document index="8">
<source>lib/ast/extension.js</source>
<document_content>'use strict'

class Extension {
  constructor (expression, typeName) {
    this._expression = expression
    this._typeName   = typeName
  }

  *[Symbol.iterator] () {
    yield this._expression
  }

  compile (builder, address) {
    this._expression.compile(builder, address)

    builder.ifNode_(address, () => {
      builder.extendNode_(address, this._typeName)
    })
  }
}

module.exports = Extension
</document_content>
</document>
<document index="9">
<source>lib/ast/grammar.js</source>
<document_content>'use strict'

class Grammar {
  constructor (name, rules) {
    this._name  = name
    this._rules = rules
  }

  [Symbol.iterator] () {
    return this._rules[Symbol.iterator]()
  }

  compile (builder) {
    let [nodeLabels, actions, regexes] = this._gatherComponents()

    builder.package_(this._name, [...actions].sort(), () => {
      let nodeClassName = builder.syntaxNodeClass_()

      for (let [i, labels] of nodeLabels.entries())
        this._compileTreeNode(builder, nodeClassName, i, labels)

      builder.grammarModule_(() => {
        for (let [i, regex] of regexes.entries())
          builder.compileRegex_(regex, 'REGEX_' + (i + 1))

        for (let rule of this._rules)
          rule.compile(builder)
      })

      let root = this._rules[0].name
      builder.parserClass_(root)
    })
  }

  _gatherComponents () {
    let nodeLabels = [],
        actions    = new Set(),
        regexes    = []

    this._scan(this, (node) => {
      let labels = node.collectLabels && node.collectLabels()
      if (labels) nodeLabels.push([node, labels])

      if (node._actionName) actions.add(node._actionName)

      if (node.regex) regexes.push(node)
    })

    return [nodeLabels, actions, regexes]
  }

  _compileTreeNode (builder, nodeClassName, i, [node, labels]) {
    let className = nodeClassName + (i + 1)
    node.setNodeClassName(className)

    builder.class_(className, nodeClassName, () => {
      builder.attributes_(labels.keys())

      builder.constructor_(['text', 'offset', 'elements'], () => {
        for (let [key, offset] of labels)
          builder.attribute_(key, builder.arrayLookup_('elements', offset))
      })
    })
  }

  _scan (node, callback) {
    callback(node)

    if (node[Symbol.iterator]) {
      for (let child of node) this._scan(child, callback)
    }
  }
}

module.exports = Grammar
</document_content>
</document>
<document index="10">
<source>lib/ast/maybe.js</source>
<document_content>'use strict'

class Maybe {
  constructor (expression) {
    this._expression = expression
  }

  *[Symbol.iterator] () {
    yield this._expression
  }

  compile (builder, address) {
    let startOffset = builder.localVar_('index', builder.offset_())
    this._expression.compile(builder, address)

    builder.unlessNode_(address, () => {
      builder.syntaxNode_(address, startOffset, startOffset, null)
    })
  }
}

module.exports = Maybe
</document_content>
</document>
<document index="11">
<source>lib/ast/predicate.js</source>
<document_content>'use strict'

class Predicate {
  constructor (expression, positive) {
    this._expression = expression
    this._positive   = positive
  }

  *[Symbol.iterator] () {
    yield this._expression
  }

  compile (builder, address) {
    let startOffset = builder.localVar_('index', builder.offset_()),
        branch      = this._positive ? 'ifNode_' : 'unlessNode_'

    this._expression.compile(builder, address)
    builder.assign_(builder.offset_(), startOffset)

    builder[branch](address, () => {
      let of = builder.offset_()
      builder.syntaxNode_(address, of, of, null)
    }, () => {
      builder.assign_(address, builder.nullNode_())
    })
  }
}

module.exports = Predicate
</document_content>
</document>
<document index="12">
<source>lib/ast/reference.js</source>
<document_content>'use strict'

class Reference {
  constructor (name) {
    this.refName = name
  }

  referenceName () {
    return this.refName
  }

  compile (builder, address) {
    builder.jump_(address, this.refName)
  }
}

module.exports = Reference
</document_content>
</document>
<document index="13">
<source>lib/ast/repeat.js</source>
<document_content>'use strict'

class Repeat {
  constructor (expression, range) {
    this._expression = expression
    this._range      = range
  }

  *[Symbol.iterator] () {
    yield this._expression
  }

  compile (builder, address, action) {
    let temp = builder.localVars_({
          index:     builder.offset_(),
          elements:  builder.emptyList_(),
          address:   builder.null_()
        }),

        startOffset = temp.index,
        elements    = temp.elements,
        elAddr      = temp.address

    builder.loop_(() => {
      this._expression.compile(builder, elAddr)

      builder.ifNode_(elAddr, () => {
        builder.append_(elements, elAddr)
      }, () => {
        builder.break_()
      })
    })

    builder.if_(builder.sizeInRange_(elements, this._range), () => {
      builder.syntaxNode_(address, startOffset, builder.offset_(), elements, action)
    }, () => {
      builder.assign_(address, builder.nullNode_())
    })
  }
}

module.exports = Repeat
</document_content>
</document>
<document index="14">
<source>lib/ast/rule.js</source>
<document_content>'use strict'

class Rule {
  constructor (name, expression) {
    this.name        = name
    this._expression = expression
  }

  *[Symbol.iterator] () {
    yield this._expression
  }

  compile (builder, address) {
    builder.rule_(this.name, () => {
      builder.method_('_read_' + this.name, [], () => {
        builder.cache_(this.name, (address) => {
          this._expression.compile(builder, address)
        })
      })
    })
  }
}

module.exports = Rule
</document_content>
</document>
<document index="15">
<source>lib/ast/sequence.js</source>
<document_content>'use strict'

class Sequence {
  constructor (parts) {
    this._parts = parts
  }

  [Symbol.iterator] () {
    return this._parts[Symbol.iterator]()
  }

  countUnmuted () {
    return this._parts.filter((p) => !p.muted()).length
  }

  collectLabels () {
    let labels = new Map()
    let parts = this._parts.filter((p) => !p.muted())

    for (let [i, part] of parts.entries()) {
      for (let label of part.labels())
        labels.set(label, i)
    }

    return (labels.size === 0) ? null : labels
  }

  setNodeClassName (className) {
    this._nodeClassName = className
  }

  compile (builder, address, action) {
    let temp = builder.localVars_({
      index:    builder.offset_(),
      elements: builder.emptyList_(this.countUnmuted())
    })

    let startOffset = temp.index,
        elements    = temp.elements,
        klass       = this._nodeClassName

    this._compileExpressions(builder, 0, 0, startOffset, elements)

    builder.ifNull_(elements, () => {
      builder.assign_(address, builder.nullNode_())
    }, () => {
      builder.syntaxNode_(address, startOffset, builder.offset_(), elements, action, klass)
    })
  }

  _compileExpressions (builder, index, elIndex, startOffset, elements) {
    let expAddr = builder.localVar_('address'),
        expr    = this._parts[index],
        muted   = expr.muted()

    expr.compile(builder, expAddr)

    builder.ifNode_(expAddr, () => {
      if (!muted) {
        builder.append_(elements, expAddr, elIndex)
        elIndex += 1
      }
      if (index < this._parts.length - 1) {
        this._compileExpressions(builder, index + 1, elIndex, startOffset, elements)
      } else if (muted) {
        builder.pass_()
      }
    }, () => {
      builder.assign_(elements, builder.null_())
      builder.assign_(builder.offset_(), startOffset)
    })
  }
}

module.exports = Sequence
</document_content>
</document>
<document index="16">
<source>lib/ast/sequence_part.js</source>
<document_content>'use strict'

class SequencePart {
  constructor (expression, label, muted) {
    this._expression = expression
    this._label      = label
    this._muted      = muted
  }

  *[Symbol.iterator] () {
    yield this._expression
  }

  labels () {
    let labels = []
    if (this._label) labels.push(this._label)
    if (this._expression.refName) labels.push(this._expression.refName)
    return labels
  }

  muted () {
    return this._muted
  }

  compile (builder, address) {
    this._expression.compile(builder, address)
  }
}

module.exports = SequencePart
</document_content>
</document>
<document index="17">
<source>lib/ast/string.js</source>
<document_content>'use strict'

class String {
  constructor (text, value, ci) {
    this._text  = text
    this._value = value
    this._ci    = ci
  }

  compile (builder, address, action) {
    let value  = this._value,
        length = value.length,
        chunk  = builder.chunk_(length)

    let condition = this._ci
                  ? builder.stringMatchCI_(chunk, value)
                  : builder.stringMatch_(chunk, value)

    builder.if_(condition, () => {
      let of = builder.offset_()
      builder.syntaxNode_(address, of, of + ' + ' + length, null, action)
    }, () => {
      builder.failure_(address, this._text)
    })
  }
}

module.exports = String
</document_content>
</document>
<document index="18">
<source>lib/builders/base.js</source>
<document_content>'use strict'

const { readFileSync } = require('fs')
const { basename, dirname, join } = require('path')
const handlebars = require('handlebars')

class Scope {
  constructor (parentScope, name, parentName) {
    if (name) {
      this.name = name
      this.parent = parentName
    } else if (parentScope) {
      this.name = parentScope.name
      this.parent = parentScope.parent
    }
    this.methodSeparator = ''
    this._varIndex = {}
  }

  varName (name) {
    this._varIndex[name] = this._varIndex[name] || 0
    let varName = name + this._varIndex[name]
    this._varIndex[name] += 1

    return varName
  }
}

class Base {
  static create (outputPath) {
    return new this(outputPath)
  }

  constructor (outputPath) {
    this._outputPath  = outputPath
    this._indentLevel = 0

    this._buffers = new Map()
    this._currentBuffer = null

    this._stack = [new Scope()]
    this._currentScope = this._stack[0]
  }

  serialize () {
    return this._buffers
  }

  attributes_ (names) {}

  compileRegex_ (charClass, name) {}

  rule_ (name, block) {
    this._ruleName = name
    block()
  }

  assign_ (name, value) {
    this._line(name + ' = ' + value)
  }

  pass_ () {}

  _tab () {
    return '  '
  }

  _newBuffer (ext, name = null) {
    if (name) {
      this._currentBuffer = join(this._outputPath, name + '.' + ext)
    } else {
      this._currentBuffer = join(this._outputPath + '.' + ext)
    }
    let buffer = this._initBuffer(this._currentBuffer)
    this._buffers.set(this._currentBuffer, buffer)
  }

  _initBuffer (pathname) {
    return ''
  }

  _template (lang, name, args) {
    let pathname = join(__dirname, '..', '..', 'templates', lang, name),
        template = handlebars.compile(readFileSync(pathname, 'utf8')),
        result   = template(args).replace(/\s*$/, '')

    for (let line of result.split(/\n/))
      this._line(line, false)
  }

  _write (string) {
    let name = this._currentBuffer
    this._buffers.set(name, this._buffers.get(name) + string)
  }

  _indent (block) {
    this._indentLevel += 1
    block()
    this._indentLevel -= 1
  }

  _scope (block, name, parentName, indent) {
    let parent = this._stack[this._stack.length - 1]
    let scope = new Scope(parent, name, parentName)
    this._stack.push(scope)
    this._currentScope = scope

    if (indent !== false) {
      this._indent(block)
    } else {
      block()
    }
    this._stack.pop()
    this._currentScope = parent
  }

  _varName (name) {
    return this._currentScope.varName(name)
  }

  _line (source, semicolon = true) {
    let i = this._indentLevel

    if (source.length > 0) {
      while (i--) this._write(this._tab())
      this._write(source)
      if (semicolon) this._write(';')
    }
    this._newline()
  }

  _newline () {
    this._write('\n')
  }

  _return (expression) {
    this._line('return ' + expression)
  }
}

module.exports = Base
</document_content>
</document>
<document index="19">
<source>lib/builders/java.js</source>
<document_content>'use strict'

const { sep } = require('path')
const Base = require('./base')

const TYPES = {
  address:    'TreeNode',
  chunk:      'String',
  elements:   'List<TreeNode>',
  index:      'int',
  max:        'int'
}

class Builder extends Base {
  constructor (...args) {
    super(...args)
    this._labels = new Set()
  }

  _tab () {
    return '    '
  }

  _initBuffer (pathname) {
    let namespace = pathname.split(sep)
    namespace.pop()
    return 'package ' + namespace.join('.') + ';\n\n'
  }

  _quote (string) {
    string = string.replace(/\\/g, '\\\\')
                   .replace(/"/g, '\\"')
                   .replace(/\x08/g, '\\b')
                   .replace(/\t/g, '\\t')
                   .replace(/\n/g, '\\n')
                   .replace(/\f/g, '\\f')
                   .replace(/\r/g, '\\r')

    return '"' + string + '"'
  }

  comment (lines) {
    lines = lines.map((line) => ' * ' + line)
    return ['/**'].concat(lines).concat([' */'])
  }

  package_ (name, actions, block) {
    this._grammarName = name

    this._newBuffer('java', 'Actions')
    this._template('java', 'Actions.java', { actions })

    this._newBuffer('java', 'CacheRecord')
    this._template('java', 'CacheRecord.java')

    block()
  }

  syntaxNodeClass_ () {
    let name = 'TreeNode'

    this._newBuffer('java', name)
    this._template('java', 'TreeNode.java', { name })

    return name
  }

  grammarModule_ (block) {
    this._newBuffer('java', 'Grammar')

    this._line('import java.util.ArrayList')
    this._line('import java.util.HashMap')
    this._line('import java.util.List')
    this._line('import java.util.Map')
    this._line('import java.util.regex.Pattern')
    this._newline()

    this._line('abstract class Grammar {', false)
    this._indent(() => {
      this.assign_('static TreeNode ' + this.nullNode_(), 'new TreeNode()')
      this._newline()

      this._line('int inputSize, offset, failure')
      this._line('String input')
      this._line('List<String[]> expected')
      this._line('Map<Label, Map<Integer, CacheRecord>> cache')
      this._line('Actions actions')
      this._newline()
      block()
    })
    this._line('}', false)
  }

  compileRegex_ (charClass, name) {
    let regex  = charClass.regex,
        source = regex.source.replace(/^\^/, '\\A')

    this.assign_('private static Pattern ' + name, 'Pattern.compile(' + this._quote(source) + ')')
    charClass.constName = name
  }

  parserClass_ (root) {
    this._newBuffer('java', 'ParseError')
    this._template('java', 'ParseError.java')

    let grammar = this._quote(this._grammarName)
    let name = this._grammarName.replace(/\./g, '')
    this._newBuffer('java', name)
    this._template('java', 'Parser.java', { grammar, root, name })

    let labels = [...this._labels].sort()

    this._newBuffer('java', 'Label')
    this._template('java', 'Label.java', { labels })
  }

  class_ (name, parent, block) {
    this._newline()
    this._line('class ' + name + ' extends ' + parent + ' {', false)
    this._scope(block, name)
    this._line('}', false)
  }

  constructor_ (args, block) {
    this._line(this._currentScope.name + '(String text, int offset, List<TreeNode> elements) {', false)
    this._indent(() => {
      this._line('super(text, offset, elements)')
      block()
    })
    this._line('}', false)
  }

  method_ (name, args, block) {
    this._newline()
    this._line('TreeNode ' + name + '() {', false)
    this._scope(block)
    this._line('}', false)
  }

  cache_ (name, block) {
    this._labels.add(name)

    let temp    = this.localVars_({ address: this.nullNode_(), index: 'offset' }),
        address = temp.address,
        offset  = temp.index

    this.assign_('Map<Integer, CacheRecord> rule', 'cache.get(Label.' + name + ')')
    this.if_('rule == null', () => {
      this.assign_('rule', 'new HashMap<Integer, CacheRecord>()')
      this._line('cache.put(Label.' + name + ', rule)')
    })
    this.if_('rule.containsKey(offset)', () => {
      this.assign_(address, 'rule.get(offset).node')
      this.assign_('offset', 'rule.get(offset).tail')
    }, () => {
      block(address)
      this._line('rule.put(' + offset + ', new CacheRecord(' + address + ', offset))')
    })
    this._return(address)
  }

  attribute_ (name, value) {
    this._labels.add(name)
    this._line('labelled.put(Label.' + name + ', ' + value + ')')
  }

  localVars_ (vars) {
    let names = {}
    for (let name in vars)
      names[name] = this.localVar_(name, vars[name])
    return names
  }

  localVar_ (name, value) {
    let varName = this._varName(name)

    if (value === undefined) value = this.nullNode_()
    this.assign_(TYPES[name] + ' ' + varName, value)

    return varName
  }

  chunk_ (length) {
    let input = 'input',
        ofs   = 'offset',
        temp  = this.localVars_({ chunk: this.null_(), max: ofs + ' + ' + length })

    this.if_(temp.max + ' <= inputSize', () => {
      this._line(temp.chunk + ' = ' + input + '.substring(' + ofs + ', ' + temp.max + ')')
    })
    return temp.chunk
  }

  syntaxNode_ (address, start, end, elements, action, nodeClass) {
    let args

    if (action) {
      action = 'actions.' + action
      args   = ['input', start, end]
    } else {
      action = 'new ' + (nodeClass || 'TreeNode')
      args   = ['input.substring(' + start + ', ' + end + ')', start]
    }
    args.push(elements || this.emptyList_())

    this.assign_(address, action + '(' + args.join(', ') + ')')
    this.assign_('offset', end)
  }

  ifNode_ (address, block, else_) {
    this.if_(address + ' != ' + this.nullNode_(), block, else_)
  }

  unlessNode_ (address, block, else_) {
    this.if_(address + ' == ' + this.nullNode_(), block, else_)
  }

  ifNull_ (elements, block, else_) {
    this.if_(elements + ' == null', block, else_)
  }

  extendNode_ (address, nodeType) {
    // TODO
  }

  failure_ (address, expected) {
    let rule = this._quote(this._grammarName + '::' + this._ruleName)
    expected = this._quote(expected)

    this.assign_(address, this.nullNode_())

    this.if_('offset > failure', () => {
      this.assign_('failure', 'offset')
      this.assign_('expected', 'new ArrayList<String[]>()')
    })
    this.if_('offset == failure', () => {
      this.append_('expected', 'new String[] { ' + rule + ', ' + expected + ' }')
    })
  }

  jump_ (address, rule) {
    this.assign_(address, '_read_' + rule + '()')
  }

  _conditional (kwd, condition, block, else_) {
    this._line(kwd + ' (' + condition + ') {', false)
    this._indent(block)
    if (else_) {
      this._line('} else {', false)
      this._indent(else_)
    }
    this._line('}', false)
  }

  if_ (condition, block, else_) {
    this._conditional('if', condition, block, else_)
  }

  loop_ (block) {
    this._conditional('while', 'true', block)
  }

  break_ () {
    this._line('break')
  }

  sizeInRange_ (address, [min, max]) {
    if (max === -1) {
      return address + '.size() >= ' + min
    } else if (max === 0) {
      return address + '.size() == ' + min
    } else {
      return address + '.size() >= ' + min + ' && ' + address + '.size() <= ' + max
    }
  }

  stringMatch_ (expression, string) {
    return expression + ' != null && ' + expression + '.equals(' + this._quote(string) + ')'
  }

  stringMatchCI_ (expression, string) {
    return expression + ' != null && ' + expression + '.toLowerCase().equals(' + this._quote(string) + '.toLowerCase())'
  }

  regexMatch_ (regex, string) {
    return string + ' != null && ' + regex + '.matcher(' + string + ').matches()'
  }

  arrayLookup_ (expression, offset) {
    return expression + '.get(' + offset + ')'
  }

  append_ (list, value, index) {
    if (index === undefined)
      this._line(list + '.add(' + value + ')')
    else
      this._line(list + '.add(' + index + ', ' + value + ')')
  }

  hasChars_ () {
    return 'offset < inputSize'
  }

  nullNode_ () {
    return 'FAILURE'
  }

  offset_ () {
    return 'offset'
  }

  emptyList_ (size) {
    return 'new ArrayList<TreeNode>(' + (size || '') + ')'
  }

  _emptyString () {
    return '""'
  }

  null_ () {
    return 'null'
  }
}

module.exports = Builder
</document_content>
</document>
<document index="20">
<source>lib/builders/python.js</source>
<document_content>'use strict'

const Base = require('./base')

class Builder extends Base {
  _tab () {
    return '    '
  }

  _line (source) {
    super._line(source, false)
  }

  _quote (string) {
    string = string.replace(/\\/g, '\\\\')
                   .replace(/'/g, "\\'")
                   .replace(/\x07/g, '\\a')
                   .replace(/\x08/g, '\\b')
                   .replace(/\t/g, '\\t')
                   .replace(/\n/g, '\\n')
                   .replace(/\v/g, '\\v')
                   .replace(/\f/g, '\\f')
                   .replace(/\r/g, '\\r')
                   .replace(/\x1b/g, '\\e')

    return "'" + string + "'"
  }

  comment (lines) {
    return lines.map((line) => '# ' + line)
  }

  package_ (name, actions, block) {
    this._grammarName = name
    this._newBuffer('py')
    
    this._line('from collections import defaultdict')
    this._line('import re')
    this._newline()
    this._newline()
    block()
  }

  syntaxNodeClass_ () {
    let name = 'TreeNode'

    this._template('python', 'tree_node.py', { name })
    this._newline()
    this._newline()

    return name
  }

  grammarModule_ (block) {
    this.assign_(this.nullNode_(), 'object()')
    this._newline()
    this._newline()
    this.class_('Grammar', 'object', block)
  }

  compileRegex_ (charClass, name) {
    let regex = charClass.regex
    this.assign_(name, 're.compile(' + this._quote(regex.source) + ')')
    charClass.constName = name
    this._currentScope.methodSeparator = '\n'
  }

  parserClass_ (root) {
    let grammar = this._quote(this._grammarName)
    this._template('python', 'parser.py', { grammar, root })
  }

  class_ (name, parent, block) {
    this._line('class ' + name + '(' + parent + '):')
    this._scope(block, name, parent)
    this._newline()
    this._newline()
  }

  constructor_ (args, block) {
    this.method_('__init__', args, () => {
      this._line('super(' + this._currentScope.name + ', self).__init__(' + args.join(', ') + ')')
      block()
    })
  }

  method_ (name, args, block) {
    this._write(this._currentScope.methodSeparator)
    this._currentScope.methodSeparator = '\n'
    args = ['self'].concat(args).join(', ')
    this._line('def ' + name + '(' + args + '):')
    this._scope(block)
  }

  cache_ (name, block) {
    let temp      = this.localVars_({ address: this.nullNode_(), index: 'self._offset' }),
        address   = temp.address,
        offset    = temp.index,
        cacheMap  = "self._cache['" + name + "']",
        cacheAddr = cacheMap + '[' + offset + ']'

    this.assign_('cached', cacheMap + '.get(' + offset + ')')

    this.if_('cached', () => {
      this.assign_('self._offset', 'cached[1]')
      this._return('cached[0]')
    })

    block(address)
    this.assign_(cacheAddr, '(' + address + ', self._offset)')
    this._return(address)
  }

  attribute_ (name, value) {
    this.assign_('self.' + name, value)
  }

  localVars_ (vars) {
    let names = {}, lhs = [], rhs = []
    for (let name in vars) {
      let varName = this._varName(name)
      lhs.push(varName)
      rhs.push(vars[name])
      names[name] = varName
    }
    this.assign_(lhs.join(', '), rhs.join(', '))
    return names
  }

  localVar_ (name, value) {
    let varName = this._varName(name)

    if (value === undefined) value = this.nullNode_()
    this.assign_(varName, value)

    return varName
  }

  chunk_ (length) {
    let input = 'self._input',
        ofs   = 'self._offset',
        temp  = this.localVars_({ chunk: this.null_(), max: ofs + ' + ' + length })

    this.if_(temp.max + ' <= self._input_size', () => {
      this.assign_(temp.chunk, input + '[' + ofs + ':' + temp.max + ']')
    })
    return temp.chunk
  }

  syntaxNode_ (address, start, end, elements, action, nodeClass) {
    let args

    if (action) {
      action = 'self._actions.' + action
      args   = ['self._input', start, end]
    } else {
      action = nodeClass || 'TreeNode'
      args   = ['self._input[' + start + ':' + end + ']', start]
    }
    args.push(elements || this.emptyList_())

    this.assign_(address, action + '(' + args.join(', ') + ')')
    this.assign_('self._offset', end)
  }

  ifNode_ (address, block, else_) {
    this.if_(address + ' is not ' + this.nullNode_(), block, else_)
  }

  unlessNode_ (address, block, else_) {
    this.if_(address + ' is ' + this.nullNode_(), block, else_)
  }

  ifNull_ (elements, block, else_) {
    this.if_(elements + ' is None', block, else_)
  }

  extendNode_ (address, nodeType) {
    let cls = this.localVar_('cls', 'type(' + address + ')')
    this.assign_(address + '.__class__', "type(" + cls + ".__name__ + '" + nodeType + "', (" + cls + ", self._types." + nodeType + "), {})")
  }

  failure_ (address, expected) {
    let rule = this._quote(this._grammarName + '::' + this._ruleName)
    expected = this._quote(expected)

    this.assign_(address, this.nullNode_())

    this.if_('self._offset > self._failure', () => {
      this.assign_('self._failure', 'self._offset')
      this.assign_('self._expected', '[]')
    })
    this.if_('self._offset == self._failure', () => {
      this.append_('self._expected', '(' + rule + ', ' + expected + ')')
    })
  }

  jump_ (address, name) {
    this.assign_(address, 'self._read_' + name + '()')
  }

  _conditional (kwd, condition, block, else_) {
    this._line(kwd + ' ' + condition + ':')
    this._indent(block)
    if (else_) {
      this._line('else:')
      this._indent(else_)
    }
  }

  if_ (condition, block, else_) {
    this._conditional('if', condition, block, else_)
  }

  loop_ (block) {
    this._conditional('while', 'True', block)
  }

  break_ () {
    this._line('break')
  }

  pass_ () {
    this._line('pass')
  }

  sizeInRange_ (address, [min, max]) {
    if (max === -1) {
      return 'len(' + address + ') >= ' + min
    } else if (max === 0) {
      return 'len(' + address + ') == ' + min
    } else {
      return 'len(' + address + ') >= ' + min + ' and len(' + address + ') <= ' + max
    }
  }

  stringMatch_ (expression, string) {
    return expression + ' == ' + this._quote(string)
  }

  stringMatchCI_ (expression, string) {
    return expression + ' is not None and ' +
      expression + '.lower() == ' + this._quote(string) + '.lower()'
  }

  regexMatch_ (regex, string) {
    return string + ' is not None and Grammar.' + regex + '.search(' + string + ')'
  }

  arrayLookup_ (expression, index) {
    return expression + '[' + index + ']'
  }

  append_ (list, value) {
    this._line(list + '.append(' + value + ')')
  }

  hasChars_ () {
    return 'self._offset < self._input_size'
  }

  nullNode_ () {
    return 'FAILURE'
  }

  offset_ () {
    return 'self._offset'
  }

  emptyList_ () {
    return '[]'
  }

  _emptyString () {
    return "''"
  }

  null_ () {
    return 'None'
  }
}

module.exports = Builder
</document_content>
</document>
<document index="21">
<source>lib/canopy.js</source>
<document_content>'use strict'

const Compiler = require('./compiler')

module.exports = {
  builders: {
    java:       require('./builders/java'),
    javascript: require('./builders/javascript'),
    python:     require('./builders/python'),
    ruby:       require('./builders/ruby')
  },

  compile (grammar, builder) {
    let compiler = new Compiler(grammar, builder)
    return compiler.toSource()
  }
}
</document_content>
</document>
<document index="22">
<source>lib/compiler.js</source>
<document_content>'use strict'

const metagrammar = require('./meta_grammar')

const Grammar      = require('./ast/grammar'),
      Rule         = require('./ast/rule'),
      Choice       = require('./ast/choice'),
      Extension    = require('./ast/extension'),
      Action       = require('./ast/action'),
      Sequence     = require('./ast/sequence'),
      SequencePart = require('./ast/sequence_part'),
      Predicate    = require('./ast/predicate'),
      Repeat       = require('./ast/repeat'),
      Maybe        = require('./ast/maybe'),
      Reference    = require('./ast/reference'),
      String       = require('./ast/string'),
      CharClass    = require('./ast/char_class'),
      AnyChar      = require('./ast/any_char')

const actions = {
  grammar (text, a, b, [_, name, rules]) {
    rules = rules.elements.map((e) => e.rule)
    return new Grammar(name.id.text, rules)
  },

  rule (text, a, b, [name, _, body]) {
    return new Rule(name.text, body)
  },

  paren_expr (text, a, b, [_, __, expr]) {
    return expr
  },

  choice (text, a, b, [first, rest]) {
    let parts = [first].concat(rest.elements.map((e) => e.expr))
    return new Choice(parts)
  },

  extension (text, a, b, [expression, _, typeTag]) {
    return new Extension(expression, typeTag.id.text)
  },

  action (text, a, b, [root, _, name]) {
    let actionName = name.id.text

    if (root instanceof Maybe)
      return new Maybe(new Action(root._expression, actionName))
    else
      return new Action(root, actionName)
  },

  sequence (text, a, b, [first, rest]) {
    let parts = [first].concat(rest.elements.map((e) => e.expr))
    return new Sequence(parts)
  },

  sequence_part (text, a, b, [muted, label, expr]) {
    muted = muted.text !== ''
    label = label.id

    return new SequencePart(expr, label && label.text, muted)
  },

  predicate (text, a, b, [pred, _, expr]) {
    let polarities = { '&': true, '!': false }
    return new Predicate(expr, polarities[pred.text])
  },

  repeat (text, a, b, [expr, _, quant]) {
    let count
    let range = quant.numeric_quantifier

    if (quant.text === '*') {
      count = [0, -1]
    } else if (quant.text === '+') {
      count = [1, -1]
    } else if (range.max.text === '') {
      count = [parseInt(range.min.text, 10), 0]
    } else if (range.max.n.text === '') {
      count = [parseInt(range.min.text, 10), -1]
    } else {
      count = [parseInt(range.min.text, 10), parseInt(range.max.n.text, 10)]
    }
    return new Repeat(expr, count)
  },

  maybe (text, a, b, [expr]) {
    return new Maybe(expr)
  },

  reference (text, a, b, [expr]) {
    return new Reference(expr.text)
  },

  string (text, a, b, elements) {
    text = text.substring(a, b)
    let value = eval(text)

    return new String(text, value, false)
  },

  ci_string (text, a, b, [_, string]) {
    text = text.substring(a, b)
    let value = eval('"' + string.text + '"')

    return new String(text, value, true)
  },

  char_class (text, a, b, elements) {
    text = text.substring(a, b)
    return new CharClass(text, new RegExp('^' + text))
  },

  any_char (text, a, b, elements) {
    return new AnyChar()
  }
}

class Compiler {
  constructor (grammarText, builder) {
    this._grammarText = grammarText
    this._builder = builder
  }

  parseTree () {
    if (this._tree) return this._tree

    this._tree = metagrammar.parse(this._grammarText, {actions: actions})
    if (this._tree) return this._tree

    let message = metagrammar.formatError(metagrammar.Parser.lastError)
    throw new Error(message)
  }

  toSource () {
    this.parseTree().compile(this._builder)
    return this._builder.serialize()
  }
}

module.exports = Compiler
</document_content>
</document>
<document index="23">
<source>lib/meta_grammar.peg</source>
<document_content>grammar Canopy.MetaGrammar

# ==============================================================================

grammar               <-  _* grammar_name (_* rule)+ _* %grammar

grammar_name          <-  `grammar` ":"? _+ id:object_identifier

rule                  <-  identifier assignment parsing_expression %rule

assignment            <-  _+ "<-" _+

# ==============================================================================

_                     <-  [ \t\n\r] / comment

comment               <-  "#" [^\n]*

object_identifier     <-  identifier ("." identifier)*

identifier            <-  [a-zA-Z_] [a-zA-Z0-9_]*

integer               <-  [1-9] [0-9]*

# ==============================================================================

parsing_expression    <-  choice
                       /  choice_part

choice_part           <-  action_expression
                       /  typed_expression
                       /  sequence
                       /  sequence_element

sequence_element      <-  predicated_atom
                       /  repeated_atom
                       /  maybe_atom
                       /  atom

atom                  <-  reference
                       /  terminal
                       /  paren_expression

terminal              <-  literal_string
                       /  ci_string
                       /  char_class
                       /  any_char

# ==============================================================================

action_expression     <-  actionable _+ action_tag %action

actionable            <-  sequence
                       /  repeated_atom
                       /  maybe_atom
                       /  terminal
                       /  "(" _* actionable _* ")" %paren_expr

action_tag            <-  "%" id:identifier

# ==============================================================================

typed_expression      <-  typable _+ type_tag %extension

typable               <-  sequence
                       /  sequence_element

type_tag              <-  "<" id:object_identifier ">"

# ==============================================================================

choice                <-  choice_part (_* "/" _* expr:choice_part)+ %choice

# ==============================================================================

sequence              <-  sequence_part (_+ expr:sequence_part)+ %sequence

sequence_part         <-  mute? label? sequence_element %sequence_part

mute                  <-  "@"

label                 <-  id:identifier ":"

# ==============================================================================

repeated_atom         <-  atom _* quantifier %repeat

quantifier            <-  "*" / "+" / "{" _* numeric_quantifier _* "}"

numeric_quantifier    <-  min:integer max:(_* "," _* n:integer?)?

# ==============================================================================

paren_expression      <-  "(" _* parsing_expression _* ")" %paren_expr

predicated_atom       <-  ("&" / "!") _* atom %predicate

maybe_atom            <-  atom _* "?" %maybe

reference             <-  identifier !assignment %reference

literal_string        <-  '"' ("\\" . / [^"])* '"' %string
                       /  "'" ("\\" . / [^'])* "'" %string

ci_string             <-  "`" ("\\" . / [^`])* "`" %ci_string

char_class            <-  "[" "^"? ("\\" . / [^\]])+ "]" %char_class

any_char              <-  "." %any_char
</document_content>
</document>
<document index="24">
<source>LICENSE.md</source>
<document_content>Mozilla Public License Version 2.0
==================================

1. Definitions
--------------

1.1. "Contributor"
    means each individual or legal entity that creates, contributes to
    the creation of, or owns Covered Software.

1.2. "Contributor Version"
    means the combination of the Contributions of others (if any) used
    by a Contributor and that particular Contributor's Contribution.

1.3. "Contribution"
    means Covered Software of a particular Contributor.

1.4. "Covered Software"
    means Source Code Form to which the initial Contributor has attached
    the notice in Exhibit A, the Executable Form of such Source Code
    Form, and Modifications of such Source Code Form, in each case
    including portions thereof.

1.5. "Incompatible With Secondary Licenses"
    means

    (a) that the initial Contributor has attached the notice described
        in Exhibit B to the Covered Software; or

    (b) that the Covered Software was made available under the terms of
        version 1.1 or earlier of the License, but not also under the
        terms of a Secondary License.

1.6. "Executable Form"
    means any form of the work other than Source Code Form.

1.7. "Larger Work"
    means a work that combines Covered Software with other material, in 
    a separate file or files, that is not Covered Software.

1.8. "License"
    means this document.

1.9. "Licensable"
    means having the right to grant, to the maximum extent possible,
    whether at the time of the initial grant or subsequently, any and
    all of the rights conveyed by this License.

1.10. "Modifications"
    means any of the following:

    (a) any file in Source Code Form that results from an addition to,
        deletion from, or modification of the contents of Covered
        Software; or

    (b) any new file in Source Code Form that contains any Covered
        Software.

1.11. "Patent Claims" of a Contributor
    means any patent claim(s), including without limitation, method,
    process, and apparatus claims, in any patent Licensable by such
    Contributor that would be infringed, but for the grant of the
    License, by the making, using, selling, offering for sale, having
    made, import, or transfer of either its Contributions or its
    Contributor Version.

1.12. "Secondary License"
    means either the GNU General Public License, Version 2.0, the GNU
    Lesser General Public License, Version 2.1, the GNU Affero General
    Public License, Version 3.0, or any later versions of those
    licenses.

1.13. "Source Code Form"
    means the form of the work preferred for making modifications.

1.14. "You" (or "Your")
    means an individual or a legal entity exercising rights under this
    License. For legal entities, "You" includes any entity that
    controls, is controlled by, or is under common control with You. For
    purposes of this definition, "control" means (a) the power, direct
    or indirect, to cause the direction or management of such entity,
    whether by contract or otherwise, or (b) ownership of more than
    fifty percent (50%) of the outstanding shares or beneficial
    ownership of such entity.

2. License Grants and Conditions
--------------------------------

2.1. Grants

Each Contributor hereby grants You a world-wide, royalty-free,
non-exclusive license:

(a) under intellectual property rights (other than patent or trademark)
    Licensable by such Contributor to use, reproduce, make available,
    modify, display, perform, distribute, and otherwise exploit its
    Contributions, either on an unmodified basis, with Modifications, or
    as part of a Larger Work; and

(b) under Patent Claims of such Contributor to make, use, sell, offer
    for sale, have made, import, and otherwise transfer either its
    Contributions or its Contributor Version.

2.2. Effective Date

The licenses granted in Section 2.1 with respect to any Contribution
become effective for each Contribution on the date the Contributor first
distributes such Contribution.

2.3. Limitations on Grant Scope

The licenses granted in this Section 2 are the only rights granted under
this License. No additional rights or licenses will be implied from the
distribution or licensing of Covered Software under this License.
Notwithstanding Section 2.1(b) above, no patent license is granted by a
Contributor:

(a) for any code that a Contributor has removed from Covered Software;
    or

(b) for infringements caused by: (i) Your and any other third party's
    modifications of Covered Software, or (ii) the combination of its
    Contributions with other software (except as part of its Contributor
    Version); or

(c) under Patent Claims infringed by Covered Software in the absence of
    its Contributions.

This License does not grant any rights in the trademarks, service marks,
or logos of any Contributor (except as may be necessary to comply with
the notice requirements in Section 3.4).

2.4. Subsequent Licenses

No Contributor makes additional grants as a result of Your choice to
distribute the Covered Software under a subsequent version of this
License (see Section 10.2) or under the terms of a Secondary License (if
permitted under the terms of Section 3.3).

2.5. Representation

Each Contributor represents that the Contributor believes its
Contributions are its original creation(s) or it has sufficient rights
to grant the rights to its Contributions conveyed by this License.

2.6. Fair Use

This License is not intended to limit any rights You have under
applicable copyright doctrines of fair use, fair dealing, or other
equivalents.

2.7. Conditions

Sections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted
in Section 2.1.

3. Responsibilities
-------------------

3.1. Distribution of Source Form

All distribution of Covered Software in Source Code Form, including any
Modifications that You create or to which You contribute, must be under
the terms of this License. You must inform recipients that the Source
Code Form of the Covered Software is governed by the terms of this
License, and how they can obtain a copy of this License. You may not
attempt to alter or restrict the recipients' rights in the Source Code
Form.

3.2. Distribution of Executable Form

If You distribute Covered Software in Executable Form then:

(a) such Covered Software must also be made available in Source Code
    Form, as described in Section 3.1, and You must inform recipients of
    the Executable Form how they can obtain a copy of such Source Code
    Form by reasonable means in a timely manner, at a charge no more
    than the cost of distribution to the recipient; and

(b) You may distribute such Executable Form under the terms of this
    License, or sublicense it under different terms, provided that the
    license for the Executable Form does not attempt to limit or alter
    the recipients' rights in the Source Code Form under this License.

3.3. Distribution of a Larger Work

You may create and distribute a Larger Work under terms of Your choice,
provided that You also comply with the requirements of this License for
the Covered Software. If the Larger Work is a combination of Covered
Software with a work governed by one or more Secondary Licenses, and the
Covered Software is not Incompatible With Secondary Licenses, this
License permits You to additionally distribute such Covered Software
under the terms of such Secondary License(s), so that the recipient of
the Larger Work may, at their option, further distribute the Covered
Software under the terms of either this License or such Secondary
License(s).

3.4. Notices

You may not remove or alter the substance of any license notices
(including copyright notices, patent notices, disclaimers of warranty,
or limitations of liability) contained within the Source Code Form of
the Covered Software, except that You may alter any license notices to
the extent required to remedy known factual inaccuracies.

3.5. Application of Additional Terms

You may choose to offer, and to charge a fee for, warranty, support,
indemnity or liability obligations to one or more recipients of Covered
Software. However, You may do so only on Your own behalf, and not on
behalf of any Contributor. You must make it absolutely clear that any
such warranty, support, indemnity, or liability obligation is offered by
You alone, and You hereby agree to indemnify every Contributor for any
liability incurred by such Contributor as a result of warranty, support,
indemnity or liability terms You offer. You may include additional
disclaimers of warranty and limitations of liability specific to any
jurisdiction.

4. Inability to Comply Due to Statute or Regulation
---------------------------------------------------

If it is impossible for You to comply with any of the terms of this
License with respect to some or all of the Covered Software due to
statute, judicial order, or regulation then You must: (a) comply with
the terms of this License to the maximum extent possible; and (b)
describe the limitations and the code they affect. Such description must
be placed in a text file included with all distributions of the Covered
Software under this License. Except to the extent prohibited by statute
or regulation, such description must be sufficiently detailed for a
recipient of ordinary skill to be able to understand it.

5. Termination
--------------

5.1. The rights granted under this License will terminate automatically
if You fail to comply with any of its terms. However, if You become
compliant, then the rights granted under this License from a particular
Contributor are reinstated (a) provisionally, unless and until such
Contributor explicitly and finally terminates Your grants, and (b) on an
ongoing basis, if such Contributor fails to notify You of the
non-compliance by some reasonable means prior to 60 days after You have
come back into compliance. Moreover, Your grants from a particular
Contributor are reinstated on an ongoing basis if such Contributor
notifies You of the non-compliance by some reasonable means, this is the
first time You have received notice of non-compliance with this License
from such Contributor, and You become compliant prior to 30 days after
Your receipt of the notice.

5.2. If You initiate litigation against any entity by asserting a patent
infringement claim (excluding declaratory judgment actions,
counter-claims, and cross-claims) alleging that a Contributor Version
directly or indirectly infringes any patent, then the rights granted to
You by any and all Contributors for the Covered Software under Section
2.1 of this License shall terminate.

5.3. In the event of termination under Sections 5.1 or 5.2 above, all
end user license agreements (excluding distributors and resellers) which
have been validly granted by You or Your distributors under this License
prior to termination shall survive termination.

************************************************************************
*                                                                      *
*  6. Disclaimer of Warranty                                           *
*  -------------------------                                           *
*                                                                      *
*  Covered Software is provided under this License on an "as is"       *
*  basis, without warranty of any kind, either expressed, implied, or  *
*  statutory, including, without limitation, warranties that the       *
*  Covered Software is free of defects, merchantable, fit for a        *
*  particular purpose or non-infringing. The entire risk as to the     *
*  quality and performance of the Covered Software is with You.        *
*  Should any Covered Software prove defective in any respect, You     *
*  (not any Contributor) assume the cost of any necessary servicing,   *
*  repair, or correction. This disclaimer of warranty constitutes an   *
*  essential part of this License. No use of any Covered Software is   *
*  authorized under this License except under this disclaimer.         *
*                                                                      *
************************************************************************

************************************************************************
*                                                                      *
*  7. Limitation of Liability                                          *
*  --------------------------                                          *
*                                                                      *
*  Under no circumstances and under no legal theory, whether tort      *
*  (including negligence), contract, or otherwise, shall any           *
*  Contributor, or anyone who distributes Covered Software as          *
*  permitted above, be liable to You for any direct, indirect,         *
*  special, incidental, or consequential damages of any character      *
*  including, without limitation, damages for lost profits, loss of    *
*  goodwill, work stoppage, computer failure or malfunction, or any    *
*  and all other commercial damages or losses, even if such party      *
*  shall have been informed of the possibility of such damages. This   *
*  limitation of liability shall not apply to liability for death or   *
*  personal injury resulting from such party's negligence to the       *
*  extent applicable law prohibits such limitation. Some               *
*  jurisdictions do not allow the exclusion or limitation of           *
*  incidental or consequential damages, so this exclusion and          *
*  limitation may not apply to You.                                    *
*                                                                      *
************************************************************************

8. Litigation
-------------

Any litigation relating to this License may be brought only in the
courts of a jurisdiction where the defendant maintains its principal
place of business and such litigation shall be governed by laws of that
jurisdiction, without reference to its conflict-of-law provisions.
Nothing in this Section shall prevent a party's ability to bring
cross-claims or counter-claims.

9. Miscellaneous
----------------

This License represents the complete agreement concerning the subject
matter hereof. If any provision of this License is held to be
unenforceable, such provision shall be reformed only to the extent
necessary to make it enforceable. Any law or regulation which provides
that the language of a contract shall be construed against the drafter
shall not be used to construe this License against a Contributor.

10. Versions of the License
---------------------------

10.1. New Versions

Mozilla Foundation is the license steward. Except as provided in Section
10.3, no one other than the license steward has the right to modify or
publish new versions of this License. Each version will be given a
distinguishing version number.

10.2. Effect of New Versions

You may distribute the Covered Software under the terms of the version
of the License under which You originally received the Covered Software,
or under the terms of any subsequent version published by the license
steward.

10.3. Modified Versions

If you create software not governed by this License, and you want to
create a new license for such software, you may create and use a
modified version of this License if you rename the license and remove
any references to the name of the license steward (except to note that
such modified license differs from this License).

10.4. Distributing Source Code Form that is Incompatible With Secondary
Licenses

If You choose to distribute Source Code Form that is Incompatible With
Secondary Licenses under the terms of this version of the License, the
notice described in Exhibit B of this License must be attached.

Exhibit A - Source Code Form License Notice
-------------------------------------------

  This Source Code Form is subject to the terms of the Mozilla Public
  License, v. 2.0. If a copy of the MPL was not distributed with this
  file, You can obtain one at https://mozilla.org/MPL/2.0/.

If it is not possible or desirable to put the notice in a particular
file, then You may include the notice in a location (such as a LICENSE
file in a relevant directory) where a recipient would be likely to look
for such a notice.

You may add additional accurate notices of copyright ownership.

Exhibit B - "Incompatible With Secondary Licenses" Notice
---------------------------------------------------------

  This Source Code Form is "Incompatible With Secondary Licenses", as
  defined by the Mozilla Public License, v. 2.0.
</document_content>
</document>
<document index="25">
<source>Makefile</source>
<document_content>SHELL := /bin/bash

.PHONY: bootstrap compile test examples clean clean-test clean-examples


src_files := $(shell find src -type f)
templates := $(shell find templates -type f)
lib_files := $(src_files:src/%=lib/%) node_modules $(templates)

bootstrap: test $(lib_files)

compile:
	./bin/canopy src/meta_grammar.peg

test: node_modules test-js

clean: clean-examples clean-test


lib/%: src/%
	@mkdir -p $(@D)
	cp $< $@

node_modules:
	npm install --no-save

examples/%.js: examples/%.peg $(lib_files)
	./bin/canopy --lang js $<

test/%.js: test/%.peg $(lib_files)
	./bin/canopy --lang js $<

%/Grammar.java: %.peg $(lib_files)
	./bin/canopy --lang java $<

%.py: %.peg $(lib_files)
	./bin/canopy --lang python $<

%.rb: %.peg $(lib_files)
	./bin/canopy --lang ruby $<


test_grammars := $(wildcard test/grammars/*.peg)

test/javascript/node_modules:
	cd test/javascript && npm install --no-save

test-all: test-java test-js test-python test-ruby

test-java: $(test_grammars:%.peg=%/Grammar.java)
	cd test/java && mvn clean test

test-js: test/javascript/node_modules $(test_grammars:%.peg=%.js)
	cd test/javascript && npm test

test-python: $(test_grammars:%.peg=%.py)
	cd test && python -m unittest discover --pattern '*_test.py'

test-ruby: $(test_grammars:%.peg=%.rb)
	cd test/ruby && rake

clean-test:
	find test/grammars -type f -a ! -name '*.peg' -a ! -name __init__.py -exec rm {} \;


example_grammars        := $(wildcard examples/canopy/*.peg)
example_grammars_js     := $(example_grammars:%.peg=%.js)
example_grammars_java   := $(example_grammars:%.peg=%/Grammar.java)
example_grammars_python := $(example_grammars:%.peg=%.py)
example_grammars_ruby   := $(example_grammars:%.peg=%.rb)

examples: $(example_grammars_js) \
	$(example_grammars_java) \
	$(example_grammars_python) \
	$(example_grammars_ruby) \
	examples/pegjs

examples/pegjs:
	find examples/pegjs -name '*.peg' -exec pegjs --cache {} \;

clean-examples:
	find examples -name '*.class' -o -name '*.pyc' -exec rm {} \;
</document_content>
</document>
<document index="26">
<source>package-lock.json</source>
<document_content>{
  "name": "canopy",
  "version": "0.4.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "canopy",
      "version": "0.4.0",
      "license": "MPL-2.0",
      "dependencies": {
        "handlebars": ">=4.0.0",
        "nopt": "*"
      },
      "bin": {
        "canopy": "bin/canopy"
      },
      "devDependencies": {
        "benchmark": "",
        "jstest": "",
        "pegjs": ""
      },
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/abbrev": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/abbrev/-/abbrev-2.0.0.tgz",
      "integrity": "sha512-6/mh1E2u2YgEsCHdY0Yx5oW+61gZU+1vXaoiHHrpKeuRNNgFvS+/jrwHiQhB5apAf5oB7UB7E19ol2R2LKH8hQ==",
      "engines": {
        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
      }
    },
    "node_modules/benchmark": {
      "version": "2.1.4",
      "resolved": "https://registry.npmjs.org/benchmark/-/benchmark-2.1.4.tgz",
      "integrity": "sha512-l9MlfN4M1K/H2fbhfMy3B7vJd6AGKJVQn2h6Sg/Yx+KckoUA7ewS5Vv6TjSq18ooE1kS9hhAlQRH3AkXIh/aOQ==",
      "dev": true,
      "dependencies": {
        "lodash": "^4.17.4",
        "platform": "^1.3.3"
      }
    },
    "node_modules/handlebars": {
      "version": "4.7.8",
      "resolved": "https://registry.npmjs.org/handlebars/-/handlebars-4.7.8.tgz",
      "integrity": "sha512-vafaFqs8MZkRrSX7sFVUdo3ap/eNiLnb4IakshzvP56X5Nr1iGKAIqdX6tMlm6HcNRIkr6AxO5jFEoJzzpT8aQ==",
      "dependencies": {
        "minimist": "^1.2.5",
        "neo-async": "^2.6.2",
        "source-map": "^0.6.1",
        "wordwrap": "^1.0.0"
      },
      "bin": {
        "handlebars": "bin/handlebars"
      },
      "engines": {
        "node": ">=0.4.7"
      },
      "optionalDependencies": {
        "uglify-js": "^3.1.4"
      }
    },
    "node_modules/jstest": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/jstest/-/jstest-1.0.5.tgz",
      "integrity": "sha512-f0zWx0FBVh7cM8ph2ZQKlzcYfiP0BAaB3UBuXKCJlChT0M7QD4Gbzvpg3C0+Dz05nc+xB4oJbEJq51cmzIfGqg==",
      "dev": true,
      "dependencies": {
        "nopt": ""
      },
      "bin": {
        "jstest": "bin/jstest"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==",
      "dev": true
    },
    "node_modules/minimist": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.8.tgz",
      "integrity": "sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/neo-async": {
      "version": "2.6.2",
      "resolved": "https://registry.npmjs.org/neo-async/-/neo-async-2.6.2.tgz",
      "integrity": "sha512-Yd3UES5mWCSqR+qNT93S3UoYUkqAZ9lLg8a7g9rimsWmYGK8cVToA4/sF3RrshdyV3sAGMXVUmpMYOw+dLpOuw=="
    },
    "node_modules/nopt": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/nopt/-/nopt-7.2.0.tgz",
      "integrity": "sha512-CVDtwCdhYIvnAzFoJ6NJ6dX3oga9/HyciQDnG1vQDjSLMeKLJ4A93ZqYKDrgYSr1FBY5/hMYC+2VCi24pgpkGA==",
      "dependencies": {
        "abbrev": "^2.0.0"
      },
      "bin": {
        "nopt": "bin/nopt.js"
      },
      "engines": {
        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
      }
    },
    "node_modules/pegjs": {
      "version": "0.10.0",
      "resolved": "https://registry.npmjs.org/pegjs/-/pegjs-0.10.0.tgz",
      "integrity": "sha512-qI5+oFNEGi3L5HAxDwN2LA4Gg7irF70Zs25edhjld9QemOgp0CbvMtbFcMvFtEo1OityPrcCzkQFB8JP/hxgow==",
      "dev": true,
      "bin": {
        "pegjs": "bin/pegjs"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/platform": {
      "version": "1.3.6",
      "resolved": "https://registry.npmjs.org/platform/-/platform-1.3.6.tgz",
      "integrity": "sha512-fnWVljUchTro6RiCFvCXBbNhJc2NijN7oIQxbwsyL0buWJPG85v81ehlHI9fXrJsMNgTofEoWIQeClKpgxFLrg==",
      "dev": true
    },
    "node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/uglify-js": {
      "version": "3.17.4",
      "resolved": "https://registry.npmjs.org/uglify-js/-/uglify-js-3.17.4.tgz",
      "integrity": "sha512-T9q82TJI9e/C1TAxYvfb16xO120tMVFZrGA3f9/P4424DNu6ypK103y0GPFVa17yotwSyZW5iYXgjYHkGrJW/g==",
      "optional": true,
      "bin": {
        "uglifyjs": "bin/uglifyjs"
      },
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/wordwrap": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/wordwrap/-/wordwrap-1.0.0.tgz",
      "integrity": "sha512-gvVzJFlPycKc5dZN4yPkP8w7Dc37BtP1yczEneOb4uq34pXZcvrtRTmWV8W+Ume+XCxKgbjM+nevkyFPMybd4Q=="
    }
  }
}
</document_content>
</document>
<document index="27">
<source>package.json</source>
<document_content>{ "name"            : "canopy"
, "description"     : "PEG parser compiler for JavaScript"
, "homepage"        : "https://canopy.jcoglan.com"
, "author"          : "James Coglan <jcoglan@gmail.com> (http://jcoglan.com/)"
, "keywords"        : ["parser", "compiler", "peg"]
, "license"         : "MPL-2.0"

, "version"         : "0.4.0"
, "engines"         : { "node": ">=8.0.0" }
, "files"           : ["bin", "lib", "templates"]
, "main"            : "./lib/canopy.js"
, "bin"             : { "canopy": "./bin/canopy" }

, "dependencies"    : { "handlebars": ">=4.0.0", "nopt": "*" }
, "devDependencies" : { "benchmark": "", "jstest": "", "pegjs": "" }

, "bugs"            : { "url": "https://github.com/jcoglan/canopy/issues" }

, "repository"      : { "type"  : "git"
                      , "url"   : "git://github.com/jcoglan/canopy.git"
                      }
}
</document_content>
</document>
<document index="28">
<source>Pipfile</source>
<document_content>[requires]
python_version = "3"

[packages]
parsimonious = "*"
pytest-benchmark = "*"
</document_content>
</document>
<document index="29">
<source>README.md</source>
<document_content># Canopy

Canopy is a parser compiler targeting Java, JavaScript, Python and Ruby. It
takes a file describing a [parsing expression grammar][1] and compiles it into a
parser module in the target language. The generated parsers have no runtime
dependency on Canopy itself.

For usage documentation see [canopy.jcoglan.com][2].

See `CONTRIBUTING.md` for instructions for building the project.

[1]: http://en.wikipedia.org/wiki/Parsing_expression_grammar
[2]: https://canopy.jcoglan.com
</document_content>
</document>
<document index="30">
<source>site/langs/java.md</source>
<document_content>---
layout: default
title: Java
---

## Java

To get an overview of how to use Canopy with Java, consider this example of a
simplified grammar for URLs:

###### url.peg

    grammar URL
      url       <-  scheme "://" host pathname search hash?
      scheme    <-  "http" "s"?
      host      <-  hostname port?
      hostname  <-  segment ("." segment)*
      segment   <-  [a-z0-9-]+
      port      <-  ":" [0-9]+
      pathname  <-  "/" [^ ?]*
      search    <-  ("?" query:[^ #]*)?
      hash      <-  "#" [^ ]*

We can compile this grammar into a Java package using `canopy`:

    $ canopy url.peg --lang java

This creates a package called `url` that contains all the parser logic. The
package name is based on the path to the `.peg` file when you run `canopy`, for
example if you run:

    $ canopy com/jcoglan/canopy/url.peg --lang java

then you will get a package named `com.jcoglan.canopy.url`. The `--output`
option can be used to override this:

    $ canopy com/jcoglan/canopy/url.peg --lang java --output some/dir/url

This will write the generated files into the directory `some/dir/url` with the
package name `some.dir.url`.

Let's try out our parser:

```java
import url.URL;
import url.TreeNode;
import url.ParseError;

public class Example {
    public static void main(String[] args) throws ParseError {
        TreeNode tree = URL.parse("http://example.com/search?q=hello#page=1");

        for (TreeNode node : tree.elements) {
            System.out.println(node.offset + ", " + node.text);
        }

        /*  prints:

            0, http
            4, ://
            7, example.com
            18, /search
            25, ?q=hello
            33, #page=1       */
    }
}
```

This little example shows a few important things:

You invoke the parser by calling the module's `parse()` function with a string.

The `parse()` method returns a tree of *nodes*.

Each node has three properties:

* `String text`, the snippet of the input text that node represents
* `int offset`, the number of characters into the input text the node appears
* `List<TreeNode> elements`, an array of nodes matching the sub-expressions

## Walking the parse tree

You can use `elements` to walk into the structure of the tree, or, you can use
the labels that Canopy generates, which can make your code clearer:

```java
import url.URL;
import url.TreeNode;
import url.ParseError;
import url.Label;

public class Example {
    public static void main(String[] args) throws ParseError {
        TreeNode tree = URL.parse("http://example.com/search?q=hello#page=1");

        System.out.println(tree.elements.get(4).elements.get(1).text);
        // -> 'q=hello'

        System.out.println(tree.get(Label.search).get(Label.query).text);
        // -> 'q=hello'
    }
}
```

## Parsing errors

If you give the parser an input text that does not match the grammar, a
`url.ParseError` is thrown. The error message will list any of the strings or
character classes the parser was expecting to find at the furthest position it
got to, along with the rule those expectations come from, and it will highlight
the line of the input where the syntax error occurs.

```java
import url.URL;
import url.TreeNode;
import url.ParseError;

public class Example {
    public static void main(String[] args) throws ParseError {
        TreeNode tree = URL.parse("https://example.com./");
    }
}

// url.ParseError: Line 1: expected one of:
//
//     - [a-z0-9-] from URL::segment
//
//      1 | https://example.com./
//                              ^
```

## Implementing actions

Say you have a grammar that uses action annotations, for example:

###### maps.peg

    grammar Maps
      map     <-  "{" string ":" value "}" %make_map
      string  <-  "'" [^']* "'" %make_string
      value   <-  list / number
      list    <-  "[" value ("," value)* "]" %make_list
      number  <-  [0-9]+ %make_number

In Java, compiling the above grammar produces a package called `maps` that
contains classes called `Maps`, `TreeNode` and `ParseError`, an enum called
`Label` and an interface called `Actions`. You supply the action functions to
the parser by implementing the `Actions` interface, which has one method for
each action named in the grammar, each of which must return a `TreeNode`.
`TreeNode` has a no-argument constructor so making subclasses of it is
relatively easy.

The following example parses the input `{'ints':[1,2,3]}`. It defines one
`TreeNode` subclass for each kind of value in the tree:

* `Pair` wraps a `Map<String, List<Integer>>`
* `Text` wraps a `String`
* `Array` wraps a `List<Integer>`
* `Number` wraps an `int`

It then implements the `Actions` interface to generate values of these types
from the parser matches.

```java
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import maps.Actions;
import maps.Label;
import maps.Maps;
import maps.ParseError;
import maps.TreeNode;

class Pair extends TreeNode {
    Map<String, List<Integer>> pair;

    Pair(String key, List<Integer> value) {
        pair = new HashMap<String, List<Integer>>();
        pair.put(key, value);
    }
}

class Text extends TreeNode {
    String string;

    Text(String string) {
        this.string = string;
    }
}

class Array extends TreeNode {
    List<Integer> list;

    Array(List<Integer> list) {
        this.list = list;
    }
}

class Number extends TreeNode {
    int number;

    Number(int number) {
        this.number = number;
    }
}

class MapsActions implements Actions {
    public Pair make_map(String input, int start, int end, List<TreeNode> elements) {
        Text string = (Text)elements.get(1);
        Array array = (Array)elements.get(3);
        return new Pair(string.string, array.list);
    }

    public Text make_string(String input, int start, int end, List<TreeNode> elements) {
        return new Text(elements.get(1).text);
    }

    public Array make_list(String input, int start, int end, List<TreeNode> elements) {
        List<Integer> list = new ArrayList<Integer>();
        list.add(((Number)elements.get(1)).number);
        for (TreeNode el : elements.get(2)) {
            Number number = (Number)el.get(Label.value);
            list.add(number.number);
        }
        return new Array(list);
    }

    public Number make_number(String input, int start, int end, List<TreeNode> elements) {
        return new Number(Integer.parseInt(input.substring(start, end), 10));
    }
}

public class Example {
    public static void main(String[] args) throws ParseError {
        Pair result = (Pair)Maps.parse("{'ints':[1,2,3]}", new MapsActions());

        System.out.println(result.pair);
        // -> {ints=[1, 2, 3]}
    }
}
```

## Extended node types

Using the `<Type>` grammar annotation is not supported in the Java version.
</document_content>
</document>
<document index="31">
<source>site/langs/python.md</source>
<document_content>---
layout: default
title: Python
---

## Python

To get an overview of how to use Canopy with Python, consider this example of a
simplified grammar for URLs:

###### url.peg

    grammar URL
      url       <-  scheme "://" host pathname search hash?
      scheme    <-  "http" "s"?
      host      <-  hostname port?
      hostname  <-  segment ("." segment)*
      segment   <-  [a-z0-9-]+
      port      <-  ":" [0-9]+
      pathname  <-  "/" [^ ?]*
      search    <-  ("?" query:[^ #]*)?
      hash      <-  "#" [^ ]*

We can compile this grammar into a Python module using `canopy`:

    $ canopy url.peg --lang python

This creates a file called `url.py` that contains all the parser logic, and it
works in Node and in the browser. The `--output` option can be used to override
the default location:

    $ canopy url.peg --lang python --output some/dir/url

This will write the generated parser into the file `some/dir/url.py`.

Let's try our parser out:

```py
import url

tree = url.parse('http://example.com/search?q=hello#page=1')

for node in tree.elements:
    print node.offset, node.text

#   prints:

#   0 http
#   4 ://
#   7 example.com
#   18 /search
#   25 ?q=hello
#   33 #page=1
```

This little example shows a few important things:

You invoke the parser by calling the module's `parse()` function with a string.

The `parse()` method returns a tree of *nodes*.

Each node has three properties:

* `text`, the snippet of the input text that node represents
* `offset`, the number of characters into the input text the node appears
* `elements`, an array of nodes matching the sub-expressions

## Walking the parse tree

You can use `elements` to walk into the structure of the tree:

```py
print tree.elements[4].elements[1].text
# -> 'q=hello'
```

Or, you can use the labels that Canopy generates, which can make your code
clearer:

```py
print tree.search.query.text
# -> 'q=hello'
```

## Parsing errors

If you give the parser an input text that does not match the grammar, a
`url.ParseError` is thrown. The error message will list any of the strings or
character classes the parser was expecting to find at the furthest position it
got to, along with the rule those expectations come from, and it will highlight
the line of the input where the syntax error occurs.

```py
url.parse('https://example.com./')

# url.ParseError: Line 1: expected one of:
#
#     - [a-z0-9-] from URL::segment
#
#      1 | https://example.com./
#                              ^
```

## Implementing actions

Say you have a grammar that uses action annotations, for example:

###### maps.peg

    grammar Maps
      map     <-  "{" string ":" value "}" %make_map
      string  <-  "'" [^']* "'" %make_string
      value   <-  list / number
      list    <-  "[" value ("," value)* "]" %make_list
      number  <-  [0-9]+ %make_number

In Python, you give the action functions to the parser by using the `actions`
keyword argument, which should be an object implementing the named actions:

```py
import maps

class Actions(object):
    def make_map(self, input, start, end, elements):
        return {elements[1]: elements[3]}

    def make_string(self, input, start, end, elements):
        return elements[1].text

    def make_list(self, input, start, end, elements):
        list = [elements[1]]
        for el in elements[2]:
            list.append(el.value)
        return list

    def make_number(self, input, start, end, elements):
        return int(input[start:end], 10)

result = maps.parse("{'ints':[1,2,3]}", actions=Actions())

print result
# -> {'ints': [1, 2, 3]}
```

## Extended node types

Say you have a grammar that contains type annotations:

###### words.peg

    grammar Words
      root  <-  first:"foo" second:"bar" <Extension>

To use this parser, you must pass in an object containing implementations of the
named types via the `types` option. Each defined type contains the methods that
will be added to the nodes.

You can import the types from a module:

```py
# node_types.py

class Extension(object):
    def convert(self):
        return self.first.text + self.second.text.upper()


# example.py

import words
import node_types

words.parse('foobar', types=node_types).convert()
# -> 'fooBAR'
```

Or, you can enclose the extension classes in another class that you pass to the
parser:

```py
import words

class Types:
    class Extension(object):
        def convert(self):
            return self.first.text + self.second.text.upper()

words.parse('foobar', types=Types).convert()
# -> 'fooBAR'
```
</document_content>
</document>
<document index="32">
<source>src/ast/action.js</source>
<document_content>'use strict'

class Action {
  constructor (expression, actionName) {
    this._expression = expression
    this._actionName = actionName
  }

  *[Symbol.iterator] () {
    yield this._expression
  }

  compile (builder, address) {
    this._expression.compile(builder, address, this._actionName)
  }
}

module.exports = Action
</document_content>
</document>
<document index="33">
<source>src/ast/any_char.js</source>
<document_content>'use strict'

class AnyChar {
  compile (builder, address, action) {
    builder.if_(builder.hasChars_(), () => {
      let of = builder.offset_()
      builder.syntaxNode_(address, of, of + ' + 1', null, action)
    }, () => {
      builder.failure_(address, '<any char>')
    })
  }
}

module.exports = AnyChar
</document_content>
</document>
<document index="34">
<source>src/ast/char_class.js</source>
<document_content>'use strict'

class CharClass {
  constructor (text, regex) {
    this._text = text
    this.regex = regex
  }

  compile (builder, address, action) {
    let regex = this.constName || this.regex,
        chunk = builder.chunk_(1)

    builder.if_(builder.regexMatch_(regex, chunk), () => {
      let of = builder.offset_()
      builder.syntaxNode_(address, of, of + ' + 1', null, action)
    }, () => {
      builder.failure_(address, this._text)
    })
  }
}

module.exports = CharClass
</document_content>
</document>
<document index="35">
<source>src/ast/choice.js</source>
<document_content>'use strict'

class Choice {
  constructor (options) {
    this._options = options
  }

  [Symbol.iterator] () {
    return this._options[Symbol.iterator]()
  }

  compile (builder, address) {
    let startOffset = builder.localVar_('index', builder.offset_())
    this._compileChoices(builder, address, 0, startOffset)
  }

  _compileChoices (builder, address, index, startOffset) {
    if (index === this._options.length) return

    this._options[index].compile(builder, address)

    builder.unlessNode_(address, () => {
      builder.assign_(builder.offset_(), startOffset)
      this._compileChoices(builder, address, index + 1, startOffset)
    })
  }
}

module.exports = Choice
</document_content>
</document>
<document index="36">
<source>src/ast/extension.js</source>
<document_content>'use strict'

class Extension {
  constructor (expression, typeName) {
    this._expression = expression
    this._typeName   = typeName
  }

  *[Symbol.iterator] () {
    yield this._expression
  }

  compile (builder, address) {
    this._expression.compile(builder, address)

    builder.ifNode_(address, () => {
      builder.extendNode_(address, this._typeName)
    })
  }
}

module.exports = Extension
</document_content>
</document>
<document index="37">
<source>src/ast/grammar.js</source>
<document_content>'use strict'

class Grammar {
  constructor (name, rules) {
    this._name  = name
    this._rules = rules
  }

  [Symbol.iterator] () {
    return this._rules[Symbol.iterator]()
  }

  compile (builder) {
    let [nodeLabels, actions, regexes] = this._gatherComponents()

    builder.package_(this._name, [...actions].sort(), () => {
      let nodeClassName = builder.syntaxNodeClass_()

      for (let [i, labels] of nodeLabels.entries())
        this._compileTreeNode(builder, nodeClassName, i, labels)

      builder.grammarModule_(() => {
        for (let [i, regex] of regexes.entries())
          builder.compileRegex_(regex, 'REGEX_' + (i + 1))

        for (let rule of this._rules)
          rule.compile(builder)
      })

      let root = this._rules[0].name
      builder.parserClass_(root)
    })
  }

  _gatherComponents () {
    let nodeLabels = [],
        actions    = new Set(),
        regexes    = []

    this._scan(this, (node) => {
      let labels = node.collectLabels && node.collectLabels()
      if (labels) nodeLabels.push([node, labels])

      if (node._actionName) actions.add(node._actionName)

      if (node.regex) regexes.push(node)
    })

    return [nodeLabels, actions, regexes]
  }

  _compileTreeNode (builder, nodeClassName, i, [node, labels]) {
    let className = nodeClassName + (i + 1)
    node.setNodeClassName(className)

    builder.class_(className, nodeClassName, () => {
      builder.attributes_(labels.keys())

      builder.constructor_(['text', 'offset', 'elements'], () => {
        for (let [key, offset] of labels)
          builder.attribute_(key, builder.arrayLookup_('elements', offset))
      })
    })
  }

  _scan (node, callback) {
    callback(node)

    if (node[Symbol.iterator]) {
      for (let child of node) this._scan(child, callback)
    }
  }
}

module.exports = Grammar
</document_content>
</document>
<document index="38">
<source>src/ast/maybe.js</source>
<document_content>'use strict'

class Maybe {
  constructor (expression) {
    this._expression = expression
  }

  *[Symbol.iterator] () {
    yield this._expression
  }

  compile (builder, address) {
    let startOffset = builder.localVar_('index', builder.offset_())
    this._expression.compile(builder, address)

    builder.unlessNode_(address, () => {
      builder.syntaxNode_(address, startOffset, startOffset, null)
    })
  }
}

module.exports = Maybe
</document_content>
</document>
<document index="39">
<source>src/ast/predicate.js</source>
<document_content>'use strict'

class Predicate {
  constructor (expression, positive) {
    this._expression = expression
    this._positive   = positive
  }

  *[Symbol.iterator] () {
    yield this._expression
  }

  compile (builder, address) {
    let startOffset = builder.localVar_('index', builder.offset_()),
        branch      = this._positive ? 'ifNode_' : 'unlessNode_'

    this._expression.compile(builder, address)
    builder.assign_(builder.offset_(), startOffset)

    builder[branch](address, () => {
      let of = builder.offset_()
      builder.syntaxNode_(address, of, of, null)
    }, () => {
      builder.assign_(address, builder.nullNode_())
    })
  }
}

module.exports = Predicate
</document_content>
</document>
<document index="40">
<source>src/ast/reference.js</source>
<document_content>'use strict'

class Reference {
  constructor (name) {
    this.refName = name
  }

  referenceName () {
    return this.refName
  }

  compile (builder, address) {
    builder.jump_(address, this.refName)
  }
}

module.exports = Reference
</document_content>
</document>
<document index="41">
<source>src/ast/repeat.js</source>
<document_content>'use strict'

class Repeat {
  constructor (expression, range) {
    this._expression = expression
    this._range      = range
  }

  *[Symbol.iterator] () {
    yield this._expression
  }

  compile (builder, address, action) {
    let temp = builder.localVars_({
          index:     builder.offset_(),
          elements:  builder.emptyList_(),
          address:   builder.null_()
        }),

        startOffset = temp.index,
        elements    = temp.elements,
        elAddr      = temp.address

    builder.loop_(() => {
      this._expression.compile(builder, elAddr)

      builder.ifNode_(elAddr, () => {
        builder.append_(elements, elAddr)
      }, () => {
        builder.break_()
      })
    })

    builder.if_(builder.sizeInRange_(elements, this._range), () => {
      builder.syntaxNode_(address, startOffset, builder.offset_(), elements, action)
    }, () => {
      builder.assign_(address, builder.nullNode_())
    })
  }
}

module.exports = Repeat
</document_content>
</document>
<document index="42">
<source>src/ast/rule.js</source>
<document_content>'use strict'

class Rule {
  constructor (name, expression) {
    this.name        = name
    this._expression = expression
  }

  *[Symbol.iterator] () {
    yield this._expression
  }

  compile (builder, address) {
    builder.rule_(this.name, () => {
      builder.method_('_read_' + this.name, [], () => {
        builder.cache_(this.name, (address) => {
          this._expression.compile(builder, address)
        })
      })
    })
  }
}

module.exports = Rule
</document_content>
</document>
<document index="43">
<source>src/ast/sequence.js</source>
<document_content>'use strict'

class Sequence {
  constructor (parts) {
    this._parts = parts
  }

  [Symbol.iterator] () {
    return this._parts[Symbol.iterator]()
  }

  countUnmuted () {
    return this._parts.filter((p) => !p.muted()).length
  }

  collectLabels () {
    let labels = new Map()
    let parts = this._parts.filter((p) => !p.muted())

    for (let [i, part] of parts.entries()) {
      for (let label of part.labels())
        labels.set(label, i)
    }

    return (labels.size === 0) ? null : labels
  }

  setNodeClassName (className) {
    this._nodeClassName = className
  }

  compile (builder, address, action) {
    let temp = builder.localVars_({
      index:    builder.offset_(),
      elements: builder.emptyList_(this.countUnmuted())
    })

    let startOffset = temp.index,
        elements    = temp.elements,
        klass       = this._nodeClassName

    this._compileExpressions(builder, 0, 0, startOffset, elements)

    builder.ifNull_(elements, () => {
      builder.assign_(address, builder.nullNode_())
    }, () => {
      builder.syntaxNode_(address, startOffset, builder.offset_(), elements, action, klass)
    })
  }

  _compileExpressions (builder, index, elIndex, startOffset, elements) {
    let expAddr = builder.localVar_('address'),
        expr    = this._parts[index],
        muted   = expr.muted()

    expr.compile(builder, expAddr)

    builder.ifNode_(expAddr, () => {
      if (!muted) {
        builder.append_(elements, expAddr, elIndex)
        elIndex += 1
      }
      if (index < this._parts.length - 1) {
        this._compileExpressions(builder, index + 1, elIndex, startOffset, elements)
      } else if (muted) {
        builder.pass_()
      }
    }, () => {
      builder.assign_(elements, builder.null_())
      builder.assign_(builder.offset_(), startOffset)
    })
  }
}

module.exports = Sequence
</document_content>
</document>
<document index="44">
<source>src/ast/sequence_part.js</source>
<document_content>'use strict'

class SequencePart {
  constructor (expression, label, muted) {
    this._expression = expression
    this._label      = label
    this._muted      = muted
  }

  *[Symbol.iterator] () {
    yield this._expression
  }

  labels () {
    let labels = []
    if (this._label) labels.push(this._label)
    if (this._expression.refName) labels.push(this._expression.refName)
    return labels
  }

  muted () {
    return this._muted
  }

  compile (builder, address) {
    this._expression.compile(builder, address)
  }
}

module.exports = SequencePart
</document_content>
</document>
<document index="45">
<source>src/ast/string.js</source>
<document_content>'use strict'

class String {
  constructor (text, value, ci) {
    this._text  = text
    this._value = value
    this._ci    = ci
  }

  compile (builder, address, action) {
    let value  = this._value,
        length = value.length,
        chunk  = builder.chunk_(length)

    let condition = this._ci
                  ? builder.stringMatchCI_(chunk, value)
                  : builder.stringMatch_(chunk, value)

    builder.if_(condition, () => {
      let of = builder.offset_()
      builder.syntaxNode_(address, of, of + ' + ' + length, null, action)
    }, () => {
      builder.failure_(address, this._text)
    })
  }
}

module.exports = String
</document_content>
</document>
<document index="46">
<source>src/builders/base.js</source>
<document_content>'use strict'

const { readFileSync } = require('fs')
const { basename, dirname, join } = require('path')
const handlebars = require('handlebars')

class Scope {
  constructor (parentScope, name, parentName) {
    if (name) {
      this.name = name
      this.parent = parentName
    } else if (parentScope) {
      this.name = parentScope.name
      this.parent = parentScope.parent
    }
    this.methodSeparator = ''
    this._varIndex = {}
  }

  varName (name) {
    this._varIndex[name] = this._varIndex[name] || 0
    let varName = name + this._varIndex[name]
    this._varIndex[name] += 1

    return varName
  }
}

class Base {
  static create (outputPath) {
    return new this(outputPath)
  }

  constructor (outputPath) {
    this._outputPath  = outputPath
    this._indentLevel = 0

    this._buffers = new Map()
    this._currentBuffer = null

    this._stack = [new Scope()]
    this._currentScope = this._stack[0]
  }

  serialize () {
    return this._buffers
  }

  attributes_ (names) {}

  compileRegex_ (charClass, name) {}

  rule_ (name, block) {
    this._ruleName = name
    block()
  }

  assign_ (name, value) {
    this._line(name + ' = ' + value)
  }

  pass_ () {}

  _tab () {
    return '  '
  }

  _newBuffer (ext, name = null) {
    if (name) {
      this._currentBuffer = join(this._outputPath, name + '.' + ext)
    } else {
      this._currentBuffer = join(this._outputPath + '.' + ext)
    }
    let buffer = this._initBuffer(this._currentBuffer)
    this._buffers.set(this._currentBuffer, buffer)
  }

  _initBuffer (pathname) {
    return ''
  }

  _template (lang, name, args) {
    let pathname = join(__dirname, '..', '..', 'templates', lang, name),
        template = handlebars.compile(readFileSync(pathname, 'utf8')),
        result   = template(args).replace(/\s*$/, '')

    for (let line of result.split(/\n/))
      this._line(line, false)
  }

  _write (string) {
    let name = this._currentBuffer
    this._buffers.set(name, this._buffers.get(name) + string)
  }

  _indent (block) {
    this._indentLevel += 1
    block()
    this._indentLevel -= 1
  }

  _scope (block, name, parentName, indent) {
    let parent = this._stack[this._stack.length - 1]
    let scope = new Scope(parent, name, parentName)
    this._stack.push(scope)
    this._currentScope = scope

    if (indent !== false) {
      this._indent(block)
    } else {
      block()
    }
    this._stack.pop()
    this._currentScope = parent
  }

  _varName (name) {
    return this._currentScope.varName(name)
  }

  _line (source, semicolon = true) {
    let i = this._indentLevel

    if (source.length > 0) {
      while (i--) this._write(this._tab())
      this._write(source)
      if (semicolon) this._write(';')
    }
    this._newline()
  }

  _newline () {
    this._write('\n')
  }

  _return (expression) {
    this._line('return ' + expression)
  }
}

module.exports = Base
</document_content>
</document>
<document index="47">
<source>src/builders/java.js</source>
<document_content>'use strict'

const { sep } = require('path')
const Base = require('./base')

const TYPES = {
  address:    'TreeNode',
  chunk:      'String',
  elements:   'List<TreeNode>',
  index:      'int',
  max:        'int'
}

class Builder extends Base {
  constructor (...args) {
    super(...args)
    this._labels = new Set()
  }

  _tab () {
    return '    '
  }

  _initBuffer (pathname) {
    let namespace = pathname.split(sep)
    namespace.pop()
    return 'package ' + namespace.join('.') + ';\n\n'
  }

  _quote (string) {
    string = string.replace(/\\/g, '\\\\')
                   .replace(/"/g, '\\"')
                   .replace(/\x08/g, '\\b')
                   .replace(/\t/g, '\\t')
                   .replace(/\n/g, '\\n')
                   .replace(/\f/g, '\\f')
                   .replace(/\r/g, '\\r')

    return '"' + string + '"'
  }

  comment (lines) {
    lines = lines.map((line) => ' * ' + line)
    return ['/**'].concat(lines).concat([' */'])
  }

  package_ (name, actions, block) {
    this._grammarName = name

    this._newBuffer('java', 'Actions')
    this._template('java', 'Actions.java', { actions })

    this._newBuffer('java', 'CacheRecord')
    this._template('java', 'CacheRecord.java')

    block()
  }

  syntaxNodeClass_ () {
    let name = 'TreeNode'

    this._newBuffer('java', name)
    this._template('java', 'TreeNode.java', { name })

    return name
  }

  grammarModule_ (block) {
    this._newBuffer('java', 'Grammar')

    this._line('import java.util.ArrayList')
    this._line('import java.util.HashMap')
    this._line('import java.util.List')
    this._line('import java.util.Map')
    this._line('import java.util.regex.Pattern')
    this._newline()

    this._line('abstract class Grammar {', false)
    this._indent(() => {
      this.assign_('static TreeNode ' + this.nullNode_(), 'new TreeNode()')
      this._newline()

      this._line('int inputSize, offset, failure')
      this._line('String input')
      this._line('List<String[]> expected')
      this._line('Map<Label, Map<Integer, CacheRecord>> cache')
      this._line('Actions actions')
      this._newline()
      block()
    })
    this._line('}', false)
  }

  compileRegex_ (charClass, name) {
    let regex  = charClass.regex,
        source = regex.source.replace(/^\^/, '\\A')

    this.assign_('private static Pattern ' + name, 'Pattern.compile(' + this._quote(source) + ')')
    charClass.constName = name
  }

  parserClass_ (root) {
    this._newBuffer('java', 'ParseError')
    this._template('java', 'ParseError.java')

    let grammar = this._quote(this._grammarName)
    let name = this._grammarName.replace(/\./g, '')
    this._newBuffer('java', name)
    this._template('java', 'Parser.java', { grammar, root, name })

    let labels = [...this._labels].sort()

    this._newBuffer('java', 'Label')
    this._template('java', 'Label.java', { labels })
  }

  class_ (name, parent, block) {
    this._newline()
    this._line('class ' + name + ' extends ' + parent + ' {', false)
    this._scope(block, name)
    this._line('}', false)
  }

  constructor_ (args, block) {
    this._line(this._currentScope.name + '(String text, int offset, List<TreeNode> elements) {', false)
    this._indent(() => {
      this._line('super(text, offset, elements)')
      block()
    })
    this._line('}', false)
  }

  method_ (name, args, block) {
    this._newline()
    this._line('TreeNode ' + name + '() {', false)
    this._scope(block)
    this._line('}', false)
  }

  cache_ (name, block) {
    this._labels.add(name)

    let temp    = this.localVars_({ address: this.nullNode_(), index: 'offset' }),
        address = temp.address,
        offset  = temp.index

    this.assign_('Map<Integer, CacheRecord> rule', 'cache.get(Label.' + name + ')')
    this.if_('rule == null', () => {
      this.assign_('rule', 'new HashMap<Integer, CacheRecord>()')
      this._line('cache.put(Label.' + name + ', rule)')
    })
    this.if_('rule.containsKey(offset)', () => {
      this.assign_(address, 'rule.get(offset).node')
      this.assign_('offset', 'rule.get(offset).tail')
    }, () => {
      block(address)
      this._line('rule.put(' + offset + ', new CacheRecord(' + address + ', offset))')
    })
    this._return(address)
  }

  attribute_ (name, value) {
    this._labels.add(name)
    this._line('labelled.put(Label.' + name + ', ' + value + ')')
  }

  localVars_ (vars) {
    let names = {}
    for (let name in vars)
      names[name] = this.localVar_(name, vars[name])
    return names
  }

  localVar_ (name, value) {
    let varName = this._varName(name)

    if (value === undefined) value = this.nullNode_()
    this.assign_(TYPES[name] + ' ' + varName, value)

    return varName
  }

  chunk_ (length) {
    let input = 'input',
        ofs   = 'offset',
        temp  = this.localVars_({ chunk: this.null_(), max: ofs + ' + ' + length })

    this.if_(temp.max + ' <= inputSize', () => {
      this._line(temp.chunk + ' = ' + input + '.substring(' + ofs + ', ' + temp.max + ')')
    })
    return temp.chunk
  }

  syntaxNode_ (address, start, end, elements, action, nodeClass) {
    let args

    if (action) {
      action = 'actions.' + action
      args   = ['input', start, end]
    } else {
      action = 'new ' + (nodeClass || 'TreeNode')
      args   = ['input.substring(' + start + ', ' + end + ')', start]
    }
    args.push(elements || this.emptyList_())

    this.assign_(address, action + '(' + args.join(', ') + ')')
    this.assign_('offset', end)
  }

  ifNode_ (address, block, else_) {
    this.if_(address + ' != ' + this.nullNode_(), block, else_)
  }

  unlessNode_ (address, block, else_) {
    this.if_(address + ' == ' + this.nullNode_(), block, else_)
  }

  ifNull_ (elements, block, else_) {
    this.if_(elements + ' == null', block, else_)
  }

  extendNode_ (address, nodeType) {
    // TODO
  }

  failure_ (address, expected) {
    let rule = this._quote(this._grammarName + '::' + this._ruleName)
    expected = this._quote(expected)

    this.assign_(address, this.nullNode_())

    this.if_('offset > failure', () => {
      this.assign_('failure', 'offset')
      this.assign_('expected', 'new ArrayList<String[]>()')
    })
    this.if_('offset == failure', () => {
      this.append_('expected', 'new String[] { ' + rule + ', ' + expected + ' }')
    })
  }

  jump_ (address, rule) {
    this.assign_(address, '_read_' + rule + '()')
  }

  _conditional (kwd, condition, block, else_) {
    this._line(kwd + ' (' + condition + ') {', false)
    this._indent(block)
    if (else_) {
      this._line('} else {', false)
      this._indent(else_)
    }
    this._line('}', false)
  }

  if_ (condition, block, else_) {
    this._conditional('if', condition, block, else_)
  }

  loop_ (block) {
    this._conditional('while', 'true', block)
  }

  break_ () {
    this._line('break')
  }

  sizeInRange_ (address, [min, max]) {
    if (max === -1) {
      return address + '.size() >= ' + min
    } else if (max === 0) {
      return address + '.size() == ' + min
    } else {
      return address + '.size() >= ' + min + ' && ' + address + '.size() <= ' + max
    }
  }

  stringMatch_ (expression, string) {
    return expression + ' != null && ' + expression + '.equals(' + this._quote(string) + ')'
  }

  stringMatchCI_ (expression, string) {
    return expression + ' != null && ' + expression + '.toLowerCase().equals(' + this._quote(string) + '.toLowerCase())'
  }

  regexMatch_ (regex, string) {
    return string + ' != null && ' + regex + '.matcher(' + string + ').matches()'
  }

  arrayLookup_ (expression, offset) {
    return expression + '.get(' + offset + ')'
  }

  append_ (list, value, index) {
    if (index === undefined)
      this._line(list + '.add(' + value + ')')
    else
      this._line(list + '.add(' + index + ', ' + value + ')')
  }

  hasChars_ () {
    return 'offset < inputSize'
  }

  nullNode_ () {
    return 'FAILURE'
  }

  offset_ () {
    return 'offset'
  }

  emptyList_ (size) {
    return 'new ArrayList<TreeNode>(' + (size || '') + ')'
  }

  _emptyString () {
    return '""'
  }

  null_ () {
    return 'null'
  }
}

module.exports = Builder
</document_content>
</document>
<document index="48">
<source>src/builders/python.js</source>
<document_content>'use strict'

const Base = require('./base')

class Builder extends Base {
  _tab () {
    return '    '
  }

  _line (source) {
    super._line(source, false)
  }

  _quote (string) {
    string = string.replace(/\\/g, '\\\\')
                   .replace(/'/g, "\\'")
                   .replace(/\x07/g, '\\a')
                   .replace(/\x08/g, '\\b')
                   .replace(/\t/g, '\\t')
                   .replace(/\n/g, '\\n')
                   .replace(/\v/g, '\\v')
                   .replace(/\f/g, '\\f')
                   .replace(/\r/g, '\\r')
                   .replace(/\x1b/g, '\\e')

    return "'" + string + "'"
  }

  comment (lines) {
    return lines.map((line) => '# ' + line)
  }

  package_ (name, actions, block) {
    this._grammarName = name
    this._newBuffer('py')
    
    this._line('from collections import defaultdict')
    this._line('import re')
    this._newline()
    this._newline()
    block()
  }

  syntaxNodeClass_ () {
    let name = 'TreeNode'

    this._template('python', 'tree_node.py', { name })
    this._newline()
    this._newline()

    return name
  }

  grammarModule_ (block) {
    this.assign_(this.nullNode_(), 'object()')
    this._newline()
    this._newline()
    this.class_('Grammar', 'object', block)
  }

  compileRegex_ (charClass, name) {
    let regex = charClass.regex
    this.assign_(name, 're.compile(' + this._quote(regex.source) + ')')
    charClass.constName = name
    this._currentScope.methodSeparator = '\n'
  }

  parserClass_ (root) {
    let grammar = this._quote(this._grammarName)
    this._template('python', 'parser.py', { grammar, root })
  }

  class_ (name, parent, block) {
    this._line('class ' + name + '(' + parent + '):')
    this._scope(block, name, parent)
    this._newline()
    this._newline()
  }

  constructor_ (args, block) {
    this.method_('__init__', args, () => {
      this._line('super(' + this._currentScope.name + ', self).__init__(' + args.join(', ') + ')')
      block()
    })
  }

  method_ (name, args, block) {
    this._write(this._currentScope.methodSeparator)
    this._currentScope.methodSeparator = '\n'
    args = ['self'].concat(args).join(', ')
    this._line('def ' + name + '(' + args + '):')
    this._scope(block)
  }

  cache_ (name, block) {
    let temp      = this.localVars_({ address: this.nullNode_(), index: 'self._offset' }),
        address   = temp.address,
        offset    = temp.index,
        cacheMap  = "self._cache['" + name + "']",
        cacheAddr = cacheMap + '[' + offset + ']'

    this.assign_('cached', cacheMap + '.get(' + offset + ')')

    this.if_('cached', () => {
      this.assign_('self._offset', 'cached[1]')
      this._return('cached[0]')
    })

    block(address)
    this.assign_(cacheAddr, '(' + address + ', self._offset)')
    this._return(address)
  }

  attribute_ (name, value) {
    this.assign_('self.' + name, value)
  }

  localVars_ (vars) {
    let names = {}, lhs = [], rhs = []
    for (let name in vars) {
      let varName = this._varName(name)
      lhs.push(varName)
      rhs.push(vars[name])
      names[name] = varName
    }
    this.assign_(lhs.join(', '), rhs.join(', '))
    return names
  }

  localVar_ (name, value) {
    let varName = this._varName(name)

    if (value === undefined) value = this.nullNode_()
    this.assign_(varName, value)

    return varName
  }

  chunk_ (length) {
    let input = 'self._input',
        ofs   = 'self._offset',
        temp  = this.localVars_({ chunk: this.null_(), max: ofs + ' + ' + length })

    this.if_(temp.max + ' <= self._input_size', () => {
      this.assign_(temp.chunk, input + '[' + ofs + ':' + temp.max + ']')
    })
    return temp.chunk
  }

  syntaxNode_ (address, start, end, elements, action, nodeClass) {
    let args

    if (action) {
      action = 'self._actions.' + action
      args   = ['self._input', start, end]
    } else {
      action = nodeClass || 'TreeNode'
      args   = ['self._input[' + start + ':' + end + ']', start]
    }
    args.push(elements || this.emptyList_())

    this.assign_(address, action + '(' + args.join(', ') + ')')
    this.assign_('self._offset', end)
  }

  ifNode_ (address, block, else_) {
    this.if_(address + ' is not ' + this.nullNode_(), block, else_)
  }

  unlessNode_ (address, block, else_) {
    this.if_(address + ' is ' + this.nullNode_(), block, else_)
  }

  ifNull_ (elements, block, else_) {
    this.if_(elements + ' is None', block, else_)
  }

  extendNode_ (address, nodeType) {
    let cls = this.localVar_('cls', 'type(' + address + ')')
    this.assign_(address + '.__class__', "type(" + cls + ".__name__ + '" + nodeType + "', (" + cls + ", self._types." + nodeType + "), {})")
  }

  failure_ (address, expected) {
    let rule = this._quote(this._grammarName + '::' + this._ruleName)
    expected = this._quote(expected)

    this.assign_(address, this.nullNode_())

    this.if_('self._offset > self._failure', () => {
      this.assign_('self._failure', 'self._offset')
      this.assign_('self._expected', '[]')
    })
    this.if_('self._offset == self._failure', () => {
      this.append_('self._expected', '(' + rule + ', ' + expected + ')')
    })
  }

  jump_ (address, name) {
    this.assign_(address, 'self._read_' + name + '()')
  }

  _conditional (kwd, condition, block, else_) {
    this._line(kwd + ' ' + condition + ':')
    this._indent(block)
    if (else_) {
      this._line('else:')
      this._indent(else_)
    }
  }

  if_ (condition, block, else_) {
    this._conditional('if', condition, block, else_)
  }

  loop_ (block) {
    this._conditional('while', 'True', block)
  }

  break_ () {
    this._line('break')
  }

  pass_ () {
    this._line('pass')
  }

  sizeInRange_ (address, [min, max]) {
    if (max === -1) {
      return 'len(' + address + ') >= ' + min
    } else if (max === 0) {
      return 'len(' + address + ') == ' + min
    } else {
      return 'len(' + address + ') >= ' + min + ' and len(' + address + ') <= ' + max
    }
  }

  stringMatch_ (expression, string) {
    return expression + ' == ' + this._quote(string)
  }

  stringMatchCI_ (expression, string) {
    return expression + ' is not None and ' +
      expression + '.lower() == ' + this._quote(string) + '.lower()'
  }

  regexMatch_ (regex, string) {
    return string + ' is not None and Grammar.' + regex + '.search(' + string + ')'
  }

  arrayLookup_ (expression, index) {
    return expression + '[' + index + ']'
  }

  append_ (list, value) {
    this._line(list + '.append(' + value + ')')
  }

  hasChars_ () {
    return 'self._offset < self._input_size'
  }

  nullNode_ () {
    return 'FAILURE'
  }

  offset_ () {
    return 'self._offset'
  }

  emptyList_ () {
    return '[]'
  }

  _emptyString () {
    return "''"
  }

  null_ () {
    return 'None'
  }
}

module.exports = Builder
</document_content>
</document>
<document index="49">
<source>src/canopy.js</source>
<document_content>'use strict'

const Compiler = require('./compiler')

module.exports = {
  builders: {
    java:       require('./builders/java'),
    javascript: require('./builders/javascript'),
    python:     require('./builders/python'),
    ruby:       require('./builders/ruby')
  },

  compile (grammar, builder) {
    let compiler = new Compiler(grammar, builder)
    return compiler.toSource()
  }
}
</document_content>
</document>
<document index="50">
<source>src/compiler.js</source>
<document_content>'use strict'

const metagrammar = require('./meta_grammar')

const Grammar      = require('./ast/grammar'),
      Rule         = require('./ast/rule'),
      Choice       = require('./ast/choice'),
      Extension    = require('./ast/extension'),
      Action       = require('./ast/action'),
      Sequence     = require('./ast/sequence'),
      SequencePart = require('./ast/sequence_part'),
      Predicate    = require('./ast/predicate'),
      Repeat       = require('./ast/repeat'),
      Maybe        = require('./ast/maybe'),
      Reference    = require('./ast/reference'),
      String       = require('./ast/string'),
      CharClass    = require('./ast/char_class'),
      AnyChar      = require('./ast/any_char')

const actions = {
  grammar (text, a, b, [_, name, rules]) {
    rules = rules.elements.map((e) => e.rule)
    return new Grammar(name.id.text, rules)
  },

  rule (text, a, b, [name, _, body]) {
    return new Rule(name.text, body)
  },

  paren_expr (text, a, b, [_, __, expr]) {
    return expr
  },

  choice (text, a, b, [first, rest]) {
    let parts = [first].concat(rest.elements.map((e) => e.expr))
    return new Choice(parts)
  },

  extension (text, a, b, [expression, _, typeTag]) {
    return new Extension(expression, typeTag.id.text)
  },

  action (text, a, b, [root, _, name]) {
    let actionName = name.id.text

    if (root instanceof Maybe)
      return new Maybe(new Action(root._expression, actionName))
    else
      return new Action(root, actionName)
  },

  sequence (text, a, b, [first, rest]) {
    let parts = [first].concat(rest.elements.map((e) => e.expr))
    return new Sequence(parts)
  },

  sequence_part (text, a, b, [muted, label, expr]) {
    muted = muted.text !== ''
    label = label.id

    return new SequencePart(expr, label && label.text, muted)
  },

  predicate (text, a, b, [pred, _, expr]) {
    let polarities = { '&': true, '!': false }
    return new Predicate(expr, polarities[pred.text])
  },

  repeat (text, a, b, [expr, _, quant]) {
    let count
    let range = quant.numeric_quantifier

    if (quant.text === '*') {
      count = [0, -1]
    } else if (quant.text === '+') {
      count = [1, -1]
    } else if (range.max.text === '') {
      count = [parseInt(range.min.text, 10), 0]
    } else if (range.max.n.text === '') {
      count = [parseInt(range.min.text, 10), -1]
    } else {
      count = [parseInt(range.min.text, 10), parseInt(range.max.n.text, 10)]
    }
    return new Repeat(expr, count)
  },

  maybe (text, a, b, [expr]) {
    return new Maybe(expr)
  },

  reference (text, a, b, [expr]) {
    return new Reference(expr.text)
  },

  string (text, a, b, elements) {
    text = text.substring(a, b)
    let value = eval(text)

    return new String(text, value, false)
  },

  ci_string (text, a, b, [_, string]) {
    text = text.substring(a, b)
    let value = eval('"' + string.text + '"')

    return new String(text, value, true)
  },

  char_class (text, a, b, elements) {
    text = text.substring(a, b)
    return new CharClass(text, new RegExp('^' + text))
  },

  any_char (text, a, b, elements) {
    return new AnyChar()
  }
}

class Compiler {
  constructor (grammarText, builder) {
    this._grammarText = grammarText
    this._builder = builder
  }

  parseTree () {
    if (this._tree) return this._tree

    this._tree = metagrammar.parse(this._grammarText, {actions: actions})
    if (this._tree) return this._tree

    let message = metagrammar.formatError(metagrammar.Parser.lastError)
    throw new Error(message)
  }

  toSource () {
    this.parseTree().compile(this._builder)
    return this._builder.serialize()
  }
}

module.exports = Compiler
</document_content>
</document>
<document index="51">
<source>src/meta_grammar.peg</source>
<document_content>grammar Canopy.MetaGrammar

# ==============================================================================

grammar               <-  _* grammar_name (_* rule)+ _* %grammar

grammar_name          <-  `grammar` ":"? _+ id:object_identifier

rule                  <-  identifier assignment parsing_expression %rule

assignment            <-  _+ "<-" _+

# ==============================================================================

_                     <-  [ \t\n\r] / comment

comment               <-  "#" [^\n]*

object_identifier     <-  identifier ("." identifier)*

identifier            <-  [a-zA-Z_] [a-zA-Z0-9_]*

integer               <-  [1-9] [0-9]*

# ==============================================================================

parsing_expression    <-  choice
                       /  choice_part

choice_part           <-  action_expression
                       /  typed_expression
                       /  sequence
                       /  sequence_element

sequence_element      <-  predicated_atom
                       /  repeated_atom
                       /  maybe_atom
                       /  atom

atom                  <-  reference
                       /  terminal
                       /  paren_expression

terminal              <-  literal_string
                       /  ci_string
                       /  char_class
                       /  any_char

# ==============================================================================

action_expression     <-  actionable _+ action_tag %action

actionable            <-  sequence
                       /  repeated_atom
                       /  maybe_atom
                       /  terminal
                       /  "(" _* actionable _* ")" %paren_expr

action_tag            <-  "%" id:identifier

# ==============================================================================

typed_expression      <-  typable _+ type_tag %extension

typable               <-  sequence
                       /  sequence_element

type_tag              <-  "<" id:object_identifier ">"

# ==============================================================================

choice                <-  choice_part (_* "/" _* expr:choice_part)+ %choice

# ==============================================================================

sequence              <-  sequence_part (_+ expr:sequence_part)+ %sequence

sequence_part         <-  mute? label? sequence_element %sequence_part

mute                  <-  "@"

label                 <-  id:identifier ":"

# ==============================================================================

repeated_atom         <-  atom _* quantifier %repeat

quantifier            <-  "*" / "+" / "{" _* numeric_quantifier _* "}"

numeric_quantifier    <-  min:integer max:(_* "," _* n:integer?)?

# ==============================================================================

paren_expression      <-  "(" _* parsing_expression _* ")" %paren_expr

predicated_atom       <-  ("&" / "!") _* atom %predicate

maybe_atom            <-  atom _* "?" %maybe

reference             <-  identifier !assignment %reference

literal_string        <-  '"' ("\\" . / [^"])* '"' %string
                       /  "'" ("\\" . / [^'])* "'" %string

ci_string             <-  "`" ("\\" . / [^`])* "`" %ci_string

char_class            <-  "[" "^"? ("\\" . / [^\]])+ "]" %char_class

any_char              <-  "." %any_char
</document_content>
</document>
<document index="52">
<source>templates/java/Actions.java</source>
<document_content>import java.util.List;

public interface Actions {
{{#each actions}}
    public TreeNode {{this}}(String input, int start, int end, List<TreeNode> elements);
{{/each}}
}
</document_content>
</document>
<document index="53">
<source>templates/java/CacheRecord.java</source>
<document_content>class CacheRecord {
    TreeNode node;
    int tail;

    CacheRecord(TreeNode node, int tail) {
        this.node = node;
        this.tail = tail;
    }
}
</document_content>
</document>
<document index="54">
<source>templates/java/Label.java</source>
<document_content>public enum Label {
{{#each labels}}
    {{this}}{{#unless @last}},{{/unless}}
{{/each}}
}
</document_content>
</document>
<document index="55">
<source>templates/java/ParseError.java</source>
<document_content>public class ParseError extends Exception {
    public ParseError(String message) {
        super(message);
    }
}
</document_content>
</document>
<document index="56">
<source>templates/java/Parser.java</source>
<document_content>import java.util.ArrayList;
import java.util.EnumMap;
import java.util.List;
import java.util.Map;

public class {{name}} extends Grammar {
    public {{name}}(String input, Actions actions) {
        this.input = input;
        this.inputSize = input.length();
        this.actions = actions;
        this.offset = 0;
        this.cache = new EnumMap<Label, Map<Integer, CacheRecord>>(Label.class);
        this.failure = 0;
        this.expected = new ArrayList<String[]>();
    }

    public static TreeNode parse(String input, Actions actions) throws ParseError {
        {{name}} parser = new {{name}}(input, actions);
        return parser.parse();
    }

    public static TreeNode parse(String input) throws ParseError {
        return parse(input, null);
    }

    private static String formatError(String input, int offset, List<String[]> expected) {
        String[] lines = input.split("\n");
        int lineNo = 0, position = 0;

        while (position <= offset) {
            position += lines[lineNo].length() + 1;
            lineNo += 1;
        }

        String line = lines[lineNo - 1];
        String message = "Line " + lineNo + ": expected one of:\n\n";

        for (String[] pair : expected) {
            message += "    - " + pair[1] + " from " + pair[0] + "\n";
        }

        String number = "" + lineNo;
        while (number.length() < 6) number = " " + number;
        message += "\n" + number + " | " + line + "\n";

        position -= line.length() + 10;

        while (position < offset) {
            message += " ";
            position += 1;
        }
        return message + "^";
    }

    private TreeNode parse() throws ParseError {
        TreeNode tree = _read_{{root}}();
        if (tree != FAILURE && offset == inputSize) {
            return tree;
        }
        if (expected.isEmpty()) {
            failure = offset;
            expected.add(new String[] { {{{grammar}}}, "<EOF>" });
        }
        throw new ParseError(formatError(input, failure, expected));
    }
}
</document_content>
</document>
<document index="57">
<source>templates/java/TreeNode.java</source>
<document_content>import java.util.ArrayList;
import java.util.EnumMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class {{name}} implements Iterable<{{name}}> {
    public String text;
    public int offset;
    public List<{{name}}> elements;

    Map<Label, {{name}}> labelled;

    public {{name}}() {
        this("", -1, new ArrayList<{{name}}>(0));
    }

    public {{name}}(String text, int offset, List<{{name}}> elements) {
        this.text = text;
        this.offset = offset;
        this.elements = elements;
        this.labelled = new EnumMap<Label, {{name}}>(Label.class);
    }

    public {{name}} get(Label key) {
        return labelled.get(key);
    }

    public Iterator<{{name}}> iterator() {
        return elements.iterator();
    }
}
</document_content>
</document>
<document index="58">
<source>templates/python/parser.py</source>
<document_content>class Parser(Grammar):
    def __init__(self, input, actions, types):
        self._input = input
        self._input_size = len(input)
        self._actions = actions
        self._types = types
        self._offset = 0
        self._cache = defaultdict(dict)
        self._failure = 0
        self._expected = []

    def parse(self):
        tree = self._read_{{root}}()
        if tree is not FAILURE and self._offset == self._input_size:
            return tree
        if not self._expected:
            self._failure = self._offset
            self._expected.append(({{{grammar}}}, '<EOF>'))
        raise ParseError(format_error(self._input, self._failure, self._expected))


class ParseError(SyntaxError):
    pass


def parse(input, actions=None, types=None):
    parser = Parser(input, actions, types)
    return parser.parse()

def format_error(input, offset, expected):
    lines = input.split('\n')
    line_no, position = 0, 0

    while position <= offset:
        position += len(lines[line_no]) + 1
        line_no += 1

    line = lines[line_no - 1]
    message = 'Line ' + str(line_no) + ': expected one of:\n\n'

    for pair in expected:
        message += '    - ' + pair[1] + ' from ' + pair[0] + '\n'

    number = str(line_no)
    while len(number) < 6:
        number = ' ' + number

    message += '\n' + number + ' | ' + line + '\n'
    message += ' ' * (len(line) + 10 + offset - position)
    return message + '^'
</document_content>
</document>
<document index="59">
<source>templates/python/tree_node.py</source>
<document_content>class {{name}}(object):
    def __init__(self, text, offset, elements):
        self.text = text
        self.offset = offset
        self.elements = elements

    def __iter__(self):
        for el in self.elements:
            yield el
</document_content>
</document>
<document index="60">
<source>test/grammars/choices.peg</source>
<document_content>grammar Choices

test <- "choice-abc: " choice_abc
      / "choice-seq: " choice_seq
      / "choice-rep: " choice_rep
      / "choice-bind: " choice_bind

choice_abc  <- "a" / "b" / "c"
choice_seq  <- ("re" / "rep") "peat"
choice_rep  <- ("a" / "b" / "c")+
choice_bind <- "a" "b" / "c" "d" / "e" "f"
</document_content>
</document>
<document index="61">
<source>test/grammars/extensions.peg</source>
<document_content>grammar Extensions

test <- "ext-str: " ext_str
      / "ext-class: " ext_class
      / "ext-any: " ext_any
      / "ext-maybe: " ext_maybe
      / "ext-rep: " ext_rep
      / "ext-seq: " ext_seq
      / "ext-paren: " ext_paren
      / "ext-choice: " ext_choice
      / "ext-ref: " ext_ref
      / "ext-ns: " ext_ns

ext_str    <- "hello" <Ext>
ext_class  <- [a-z] <Ext>
ext_any    <- . <Ext>
ext_maybe  <- "hello"? <Ext>
ext_rep    <- [a-z]+ <Ext>
ext_seq    <- "x" "y" "z" <Ext>
ext_paren  <- (((((.))))) <Ext>
ext_choice <- ("0" / [1-9] [0-9]*) <Ext>
ext_ref    <- hello <Ext>
hello      <- "hello"
ext_ns     <- hello <NS.Ext>
</document_content>
</document>
<document index="62">
<source>test/grammars/node_actions.peg</source>
<document_content>grammar NodeActions

test <- "act-str: " act_str
      / "act-class: " act_class
      / "act-any: " act_any
      / "act-maybe: " act_maybe
      / "act-rep: " act_rep
      / "act-seq: " act_seq
      / "act-seq-mute: " act_seq_mute
      / "act-paren: " act_paren
      / "act-rep-paren: " act_rep_paren
      / "act-choice: " act_choice
      / "act-falsey: " act_falsey
      / "act-falsey-pred: " act_falsey_pred
      / "act-falsey-rep: " act_falsey_rep
      / "act-falsey-opt: " act_falsey_opt
      / "act-falsey-seq: " act_falsey_seq
      / "act-falsey-choice: " act_falsey_choice

act_str       <- "hello" %make_str
act_class     <- [a-z] %make_char
act_any       <- . %make_any
act_maybe     <- "hello"? %make_maybe
act_rep       <- [a-z]+ %make_rep
act_seq       <- "x" "y" "z" %make_seq
act_seq_mute  <- "x" @"y" "z" %make_seq
act_paren     <- (((((.))))) %make_paren
act_rep_paren <- ("a" "b")+ %make_rep_paren
act_choice    <- "0" %make_zero / [1-9] [0-9]* %make_int

act_falsey <- "null"  %make_null
            / "false" %make_false
            / "0"     %make_0
            / "''"    %make_empty_str
            / "[]"    %make_empty_list

act_falsey_pred   <- &act_falsey act_choice
act_falsey_rep    <- act_falsey+
act_falsey_opt    <- act_falsey?
act_falsey_seq    <- "(" act_falsey ")"
act_falsey_choice <- act_falsey / "a"
</document_content>
</document>
<document index="63">
<source>test/grammars/predicates.peg</source>
<document_content>grammar Predicates

test <- "pos-name: " pos_name
      / "neg-name: " neg_name
      / "pos-seq: " pos_seq
      / "pos-ref: " pos_ref
      / "neg-tail-str: " neg_tail_str
      / "neg-tail-class: " neg_tail_class
      / "neg-tail-any: " neg_tail_any

pos_name <- &[A-Z] word
neg_name <- ![A-Z] word
word     <- [a-zA-Z]+

pos_ref  <- &alpha alphanum*
alpha    <- [a-z]
alphanum <- [a-z0-9]

pos_seq <- &("<" [a-z]+) "<" [a-z0-9]* ">"

neg_tail_str   <- "word" !"more text"
neg_tail_class <- "word" ![a-z]
neg_tail_any   <- "word" !.
</document_content>
</document>
<document index="64">
<source>test/grammars/quantifiers.peg</source>
<document_content>grammar Quantifiers

test <- "maybe: " maybe
      / "rep-0: " rep_0
      / "rep-1: " rep_1
      / "greedy-0: " greedy_0
      / "greedy-1: " greedy_1
      / "rep-exact: " rep_exact
      / "rep-min: " rep_min
      / "rep-range: " rep_range
      / "color-ref: " color_ref
      / "color-choice: " color_choice

maybe    <- [0-9]?
rep_0    <- [a-z]*
rep_1    <- [a-z]+
greedy_0 <- [a-z]* [a-z]
greedy_1 <- [a-z]+ [a-z]

rep_exact <- [a-z]{3}
rep_min   <- [a-z]{3,}
rep_range <- [a-z]{3,5}

color_ref    <- "#" hex+
color_choice <- "#" ([0-9] / [a-f])+
hex          <- [0-9a-f]
</document_content>
</document>
<document index="65">
<source>test/grammars/sequences.peg</source>
<document_content>grammar Sequences

test <- "seq-str: " seq_str
      / "seq-maybe-1: " seq_maybe_1
      / "seq-maybe-2: " seq_maybe_2
      / "seq-maybe-3: " seq_maybe_3
      / "seq-rep-1: " seq_repeat_1
      / "seq-rep-2: " seq_repeat_2
      / "seq-rep-subseq: " seq_repeat_seq
      / "seq-label: " seq_label
      / "seq-label-subseq: " seq_label_seq
      / "seq-mute-1: " seq_mute_1
      / "seq-mute-2: " seq_mute_2
      / "seq-mute-3: " seq_mute_3
      / "seq-mute-4: " seq_mute_4
      / "seq-mute-first: " seq_mute_first
      / "seq-mute-last: " seq_mute_last
      / "seq-refs: " seq_refs
      / "seq-mute-refs: " seq_mute_refs

seq_str <- "a" "b" "c"

seq_maybe_1 <- "a"? "b" "c"
seq_maybe_2 <- "a" "b"? "c"
seq_maybe_3 <- "a" "b" "c"?

seq_repeat_1 <- [a-z]* "0"
seq_repeat_2 <- [a-z]* "z"

seq_repeat_seq <- "a" ("b" [0-9])* "c"

seq_label     <- "v" num:[0-9]+
seq_label_seq <- "v" ("." part:[A-Z]+)+

seq_mute_1 <- [a-z]+ @":" @" "* [0-9]+
seq_mute_2 <- [a-z]+ @(":" " "*) [0-9]+
seq_mute_3 <- "v" (@"." [A-Z]+)+
seq_mute_4 <- "a" @("b" @"c" "d") "e"

seq_mute_first <- @"a" "b" "c"
seq_mute_last  <- "a" "b" @"c"

seq_refs      <- a b:c
seq_mute_refs <- a @c
a             <- "a"
c             <- "c"
</document_content>
</document>
<document index="66">
<source>test/grammars/terminals.peg</source>
<document_content>grammar Terminals

test <- "any: " any_char
      / "pos-class: " positive_class
      / "neg-class: " negative_class
      / "str-1: " single_quoted_string
      / "str-2: " double_quoted_string
      / "str-ci: " uncased_string

any_char <- .

positive_class <- [a-z]
negative_class <- [^a-z]

single_quoted_string <- 'oat'
double_quoted_string <- "oat"
uncased_string       <- `oat`
</document_content>
</document>
<document index="67">
<source>test/java/ChoicesTest.java</source>
<document_content>package canopy.choices;

import java.util.List;
import java.util.stream.Collectors;

import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.jupiter.api.Test;

import helpers.Node;
import helpers.NodeSpec;

import test.grammars.choices.Label;
import test.grammars.choices.ParseError;
import test.grammars.choices.Choices;
import test.grammars.choices.TreeNode;

class ChoiceStringsTest extends ParseHelper {
    @Test
    void parsesAnyOfTheChoiceOptions() throws ParseError {
        expect(Choices.parse("choice-abc: a")).toMatch(node("a", 12));
        expect(Choices.parse("choice-abc: b")).toMatch(node("b", 12));
        expect(Choices.parse("choice-abc: c")).toMatch(node("c", 12));
    }

    @Test
    void rejectsInputMatchingNoneOfTheOptions() {
        assertThrows(ParseError.class, () -> Choices.parse("choice-abc: d"));
    }

    @Test
    void rejectsSuperstringsOfTheOptions() {
        assertThrows(ParseError.class, () -> Choices.parse("choice-abc: ab"));
    }

    @Test
    void parsesAChoiceAsPartOfASequence() throws ParseError {
        expect(Choices.parse("choice-seq: repeat")).toMatch(
            node("repeat", 12)
                .elem(node("re", 12).noElems())
                .elem(node("peat", 14).noElems())
        );
    }

    @Test
    void doesNotBacktrackIfLaterRulesFail() {
        assertThrows(ParseError.class, () -> Choices.parse("choice-seq: reppeat"));
    }
}

class ChoiceRepetitionTest extends ParseHelper {
    @Test
    void parsesADifferentOptionOnEachIteration() throws ParseError {
        expect(Choices.parse("choice-rep: abcabba")).toMatch(
            node("abcabba", 12)
                .elem(node("a", 12).noElems())
                .elem(node("b", 13).noElems())
                .elem(node("c", 14).noElems())
                .elem(node("a", 15).noElems())
                .elem(node("b", 16).noElems())
                .elem(node("b", 17).noElems())
                .elem(node("a", 18).noElems())
        );
    }

    @Test
    void rejectsIfAnyIterationDoesNotMatchTheOptions() {
        assertThrows(ParseError.class, () -> Choices.parse("choice-rep: abcadba"));
    }
}

class ChoiceSequenceTest extends ParseHelper {
    @Test
    void parsesOneBranchOfTheChoice() throws ParseError {
        expect(Choices.parse("choice-bind: ab")).toMatch(
            node("ab", 13)
                .elem(node("a", 13).noElems())
                .elem(node("b", 14).noElems())
        );
    }

    @Test
    void testBindsSequencesTighterThanChoices() {
        assertThrows(ParseError.class, () -> Choices.parse("choice-bind: abef"));
    }
}

class ParseHelper {
    Node<Label> expect(TreeNode node) {
        return new NodeWrapper(node.elements.get(1));
    }

    NodeSpec<Label> node(String text, int offset) {
        return new NodeSpec<Label>(text, offset);
    }
}

class NodeWrapper implements Node<Label> {
    private TreeNode node;

    NodeWrapper(TreeNode node) {
        this.node = node;
    }

    public String text() {
        return node.text;
    }

    public int offset() {
        return node.offset;
    }

    public List<Node<Label>> elements() {
        return node.elements.stream()
            .map((elem) -> new NodeWrapper(elem))
            .collect(Collectors.toList());
    }

    public Node<Label> get(Label key) {
        return new NodeWrapper(node.get(key));
    }
}
</document_content>
</document>
<document index="68">
<source>test/java/helpers/ElementsSpec.java</source>
<document_content>package helpers;

import java.util.ArrayList;
import java.util.List;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class ElementsSpec<L> {
    private ArrayList<NodeSpec<L>> elements = null;

    public void noElems() {
        elements = new ArrayList<NodeSpec<L>>();
    }

    public void elem(NodeSpec<L> elem) {
        if (elements == null) {
            elements = new ArrayList<NodeSpec<L>>();
        }
        elements.add(elem);
    }

    public void check(Node<L> node) {
        if (elements == null) {
            return;
        }

        List<Node<L>> actualElems = node.elements();
        assertEquals(elements.size(), actualElems.size());

        for (int i = 0; i < elements.size(); i++) {
            elements.get(i).assertMatches(actualElems.get(i));
        }
    }
}
</document_content>
</document>
<document index="69">
<source>test/java/helpers/Node.java</source>
<document_content>package helpers;

import java.util.List;

public interface Node<L> {
    public String text();
    public int offset();
    public List<Node<L>> elements();
    public Node<L> get(L label);

    default void toMatch(NodeSpec<L> spec) {
        spec.assertMatches(this);
    }
}
</document_content>
</document>
<document index="70">
<source>test/java/helpers/NodeSpec.java</source>
<document_content>package helpers;

import java.util.HashMap;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class NodeSpec<L> {
    private String text;
    private int offset;
    private ElementsSpec<L> elements = new ElementsSpec<L>();
    private HashMap<L, NodeSpec<L>> labelled = new HashMap<L, NodeSpec<L>>();

    public NodeSpec(String text, int offset) {
        this.text = text;
        this.offset = offset;
    }

    public NodeSpec<L> text(String text) {
        this.text = text;
        return this;
    }

    public NodeSpec<L> offset(int offset) {
        this.offset = offset;
        return this;
    }

    public NodeSpec<L> noElems() {
        elements.noElems();
        return this;
    }

    public NodeSpec<L> elem(NodeSpec<L> elem) {
        elements.elem(elem);
        return this;
    }

    public NodeSpec<L> label(L label, NodeSpec<L> elem) {
        labelled.put(label, elem);
        return this;
    }

    void assertMatches(Node<L> node) {
        assertEquals(text, node.text());
        assertEquals(offset, node.offset());

        elements.check(node);

        for (L key : labelled.keySet()) {
            labelled.get(key).assertMatches(node.get(key));
        }
    }
}
</document_content>
</document>
<document index="71">
<source>test/java/NodeActionsTest.java</source>
<document_content>package canopy.node_actions;

import java.util.List;
import java.util.stream.Collectors;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.jupiter.api.Test;

import helpers.ElementsSpec;
import helpers.Node;
import helpers.NodeSpec;

import test.grammars.node_actions.Actions;
import test.grammars.node_actions.Label;
import test.grammars.node_actions.ParseError;
import test.grammars.node_actions.NodeActions;
import test.grammars.node_actions.TreeNode;

class NodeActionsTest extends ParseHelper {
    @Test
    void makesNodesFromAString() throws ParseError {
        String input = "act-str: hello";
        CustomNode result = (CustomNode)NodeActions.parse(input, new TestActions()).elements.get(1);

        assertNode(new CustomNode("str", input, 9, 14).noElems(), result);
    }

    @Test
    void makesNodesFromACharClass() throws ParseError {
        String input = "act-class: k";
        CustomNode result = (CustomNode)NodeActions.parse(input, new TestActions()).elements.get(1);

        assertNode(new CustomNode("char", input, 11, 12).noElems(), result);
    }

    @Test
    void makesNodesFromAnyChar() throws ParseError {
        String input = "act-any: ?";
        CustomNode result = (CustomNode)NodeActions.parse(input, new TestActions()).elements.get(1);

        assertNode(new CustomNode("any", input, 9, 10).noElems(), result);
    }

    @Test
    void makesNodesFromAMaybeRule() throws ParseError {
        String input = "act-maybe: hello";
        CustomNode result = (CustomNode)NodeActions.parse(input, new TestActions()).elements.get(1);

        assertNode(new CustomNode("maybe", input, 11, 16).noElems(), result);
    }

    @Test
    void doesNotInvokeAnActionForAMaybeRuleWithNoMatch() throws ParseError {
        String input = "act-maybe: ";
        TreeNode result = NodeActions.parse(input, new TestActions());

        expect(result).toMatch(node("", 11).noElems());
    }

    @Test
    void makesNodesFromARepetition() throws ParseError {
        String input = "act-rep: abc";
        CustomNode result = (CustomNode)NodeActions.parse(input, new TestActions()).elements.get(1);

        assertNode(
            new CustomNode("rep", input, 9, 12)
                .elem(node("a", 9).noElems())
                .elem(node("b", 10).noElems())
                .elem(node("c", 11).noElems()),
            result
        );
    }

    @Test
    void makesNodesFromARepetitionInParentheses() throws ParseError {
        String input = "act-rep-paren: abab";
        CustomNode result = (CustomNode)NodeActions.parse(input, new TestActions()).elements.get(1);

        assertNode(
            new CustomNode("rep-paren", input, 15, 19)
                .elem(node("ab", 15)
                    .elem(node("a", 15).noElems())
                    .elem(node("b", 16).noElems())
                )
                .elem(node("ab", 17)
                    .elem(node("a", 17).noElems())
                    .elem(node("b", 18).noElems())
                ),
            result
        );
    }

    @Test
    void makesNodesFromASequence() throws ParseError {
        String input = "act-seq: xyz";
        CustomNode result = (CustomNode)NodeActions.parse(input, new TestActions()).elements.get(1);

        assertNode(
            new CustomNode("seq", input, 9, 12)
                .elem(node("x", 9).noElems())
                .elem(node("y", 10).noElems())
                .elem(node("z", 11).noElems()),
            result
        );
    }

    @Test
    void makesNodesFromASequenceWithMutedElements() throws ParseError {
        String input = "act-seq-mute: xyz";
        CustomNode result = (CustomNode)NodeActions.parse(input, new TestActions()).elements.get(1);

        assertNode(
            new CustomNode("seq", input, 14, 17)
                .elem(node("x", 14).noElems())
                .elem(node("z", 16).noElems()),
            result
        );
    }

    @Test
    void makesNodesFromAParenthesisedExpression() throws ParseError {
        String input = "act-paren: !";
        CustomNode result = (CustomNode)NodeActions.parse(input, new TestActions()).elements.get(1);

        assertNode(new CustomNode("paren", input, 11, 12).noElems(), result);
    }

    @Test
    void bindsToTheOptionsOfAChoice() throws ParseError {
        String input = "act-choice: 0";
        CustomNode result = (CustomNode)NodeActions.parse(input, new TestActions()).elements.get(1);
        assertNode(new CustomNode("zero", input, 12, 13).noElems(), result);

        input = "act-choice: 42";
        result = (CustomNode)NodeActions.parse(input, new TestActions()).elements.get(1);

        assertNode(
            new CustomNode("int", input, 12, 14)
                .elem(node("4", 12).noElems())
                .elem(node("2", 13)
                    .elem(node("2", 13).noElems())
                ),
            result
        );
    }

    @Test
    void treatsNullAsAValidResult() throws ParseError {
        CustomNode result = (CustomNode)NodeActions.parse("act-falsey: null", new TestActions()).elements.get(1);
        assertEquals(null, result);
    }

    @Test
    void treatsFalseAsAValidResult() throws ParseError {
        CustomNode result = (CustomNode)NodeActions.parse("act-falsey: false", new TestActions()).elements.get(1);
        assertEquals(null, result);
    }

    @Test
    void treatsZeroAsAValidResult() throws ParseError {
        CustomNode result = (CustomNode)NodeActions.parse("act-falsey: 0", new TestActions()).elements.get(1);
        assertEquals(null, result);
    }

    @Test
    void treatsEmptyStringsAsAValidResult() throws ParseError {
        CustomNode result = (CustomNode)NodeActions.parse("act-falsey: ''", new TestActions()).elements.get(1);
        assertEquals(null, result);
    }

    @Test
    void treatsEmptyListsAsAValidResult() throws ParseError {
        CustomNode result = (CustomNode)NodeActions.parse("act-falsey: []", new TestActions()).elements.get(1);
        assertEquals(null, result);
    }

    @Test
    void treatsFalseyValuesAsAcceptableLookaheadResults() throws ParseError {
        String input = "act-falsey-pred: 0";
        CustomNode result = (CustomNode)NodeActions.parse(input, new TestActions()).elements.get(1).elements.get(1);

        assertNode(new CustomNode("zero", input, 17, 18).noElems(), result);
    }

    @Test
    void treatsFalseyValuesAsAcceptableRepetitionResults() throws ParseError {
        String input = "act-falsey-rep: null0false''[]";
        List<TreeNode> elements = NodeActions.parse(input, new TestActions()).elements.get(1).elements;

        assertEquals(5, elements.size());
        for (TreeNode elem : elements) {
            assertEquals(null, elem);
        }
    }

    @Test
    void treatsFalseyValuesAsAcceptableMaybeResults() throws ParseError {
        String input = "act-falsey-opt: null";
        TreeNode result = NodeActions.parse(input, new TestActions()).elements.get(1);

        assertEquals(null, result);
    }

    @Test
    void treatsFalseyValuesAsAcceptableSequenceResults() throws ParseError {
        String input = "act-falsey-seq: (null)";
        TreeNode result = NodeActions.parse(input, new TestActions()).elements.get(1);

        assertEquals(3, result.elements.size());
        assertEquals(null, result.elements.get(1));
    }

    @Test
    void treatsFalseyValuesAsAcceptableChoiceResults() throws ParseError {
        String input = "act-falsey-choice: null";
        TreeNode result = NodeActions.parse(input, new TestActions()).elements.get(1);

        assertEquals(null, result);
    }
}

class TestActions implements Actions {
    public CustomNode make_str(String input, int start, int end, List<TreeNode> elements) {
        return new CustomNode("str", input, start, end, elements);
    }

    public CustomNode make_char(String input, int start, int end, List<TreeNode> elements) {
        return new CustomNode("char", input, start, end, elements);
    }

    public CustomNode make_any(String input, int start, int end, List<TreeNode> elements) {
        return new CustomNode("any", input, start, end, elements);
    }

    public CustomNode make_maybe(String input, int start, int end, List<TreeNode> elements) {
        return new CustomNode("maybe", input, start, end, elements);
    }

    public CustomNode make_rep(String input, int start, int end, List<TreeNode> elements) {
        return new CustomNode("rep", input, start, end, elements);
    }

    public CustomNode make_seq(String input, int start, int end, List<TreeNode> elements) {
        return new CustomNode("seq", input, start, end, elements);
    }

    public CustomNode make_paren(String input, int start, int end, List<TreeNode> elements) {
        return new CustomNode("paren", input, start, end, elements);
    }

    public CustomNode make_rep_paren(String input, int start, int end, List<TreeNode> elements) {
        return new CustomNode("rep-paren", input, start, end, elements);
    }

    public CustomNode make_zero(String input, int start, int end, List<TreeNode> elements) {
        return new CustomNode("zero", input, start, end, elements);
    }

    public CustomNode make_int(String input, int start, int end, List<TreeNode> elements) {
        return new CustomNode("int", input, start, end, elements);
    }

    public CustomNode make_null(String input, int start, int end, List<TreeNode> elements) {
        return null;
    }

    public CustomNode make_false(String input, int start, int end, List<TreeNode> elements) {
        return null;
    }

    public CustomNode make_0(String input, int start, int end, List<TreeNode> elements) {
        return null;
    }

    public CustomNode make_empty_str(String input, int start, int end, List<TreeNode> elements) {
        return null;
    }

    public CustomNode make_empty_list(String input, int start, int end, List<TreeNode> elements) {
        return null;
    }
}

class CustomNode extends TreeNode {
    String type, input;
    int start, end;
    List<TreeNode> elements;
    ElementsSpec<Label> elemsSpec = new ElementsSpec<Label>();

    CustomNode(String type, String input, int start, int end) {
        this(type, input, start, end, null);
    }

    CustomNode(String type, String input, int start, int end, List<TreeNode> elements) {
        this.type = type;
        this.input = input;
        this.start = start;
        this.end = end;
        this.elements = elements;
    }

    CustomNode noElems() {
        elemsSpec.noElems();
        return this;
    }

    CustomNode elem(NodeSpec<Label> elem) {
        elemsSpec.elem(elem);
        return this;
    }
}

class ParseHelper {
    Node<Label> expect(TreeNode node) {
        return new NodeWrapper(node.elements.get(1));
    }

    NodeSpec<Label> node(String text, int offset) {
        return new NodeSpec<Label>(text, offset);
    }

    void assertNode(CustomNode expected, CustomNode actual) {
        assertEquals(expected.type, actual.type);
        assertEquals(expected.input, actual.input);
        assertEquals(expected.start, actual.start);
        assertEquals(expected.end, actual.end);
        expected.elemsSpec.check(new NodeWrapper(new TreeNode("", 0, actual.elements)));
    }
}

class NodeWrapper implements Node<Label> {
    private TreeNode node;

    NodeWrapper(TreeNode node) {
        this.node = node;
    }

    public String text() {
        return node.text;
    }

    public int offset() {
        return node.offset;
    }

    public List<Node<Label>> elements() {
        return node.elements.stream()
            .map((elem) -> new NodeWrapper(elem))
            .collect(Collectors.toList());
    }

    public Node<Label> get(Label key) {
        return new NodeWrapper(node.get(key));
    }
}
</document_content>
</document>
<document index="72">
<source>test/java/pom.xml</source>
<document_content><?xml version="1.0" encoding="UTF-8"?>
<project>
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.jcoglan.canopy</groupId>
    <artifactId>test</artifactId>
    <version>1.0</version>

    <build>
        <testSourceDirectory>..</testSourceDirectory>

        <plugins>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>8</source>
                    <target>8</target>
                </configuration>
            </plugin>

            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.22.2</version>
            </plugin>

            <plugin>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>2.22.2</version>
            </plugin>
        </plugins>
    </build>

    <dependencies>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.7.2</version>
        </dependency>

        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>5.7.2</version>
        </dependency>
    </dependencies>
</project>
</document_content>
</document>
<document index="73">
<source>test/java/PredicatesTest.java</source>
<document_content>package canopy.predicates;

import java.util.List;
import java.util.stream.Collectors;

import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.jupiter.api.Test;

import helpers.Node;
import helpers.NodeSpec;

import test.grammars.predicates.Label;
import test.grammars.predicates.ParseError;
import test.grammars.predicates.Predicates;
import test.grammars.predicates.TreeNode;

class PositiveLookAheadTest extends ParseHelper {
    @Test
    void checksTheFirstCharacterOfAWord() throws ParseError {
        expect(Predicates.parse("pos-name: London")).toMatch(
            node("London", 10)
                .elem(node("", 10).noElems())
                .elem(node("London", 10)
                    .elem(node("L", 10).noElems())
                    .elem(node("o", 11).noElems())
                    .elem(node("n", 12).noElems())
                    .elem(node("d", 13).noElems())
                    .elem(node("o", 14).noElems())
                    .elem(node("n", 15).noElems())
                )
        );
    }

    @Test
    void rejectsWordsWhereThePredicateDoesNotMatch() {
        assertThrows(ParseError.class, () -> Predicates.parse("pos-name: london"));
    }

    @Test
    void resetsTheCursorAfterMatching() throws ParseError {
        expect(Predicates.parse("pos-seq: <abc123>")).toMatch(
            node("<abc123>", 9)
                .elem(node("", 9).noElems())
                .elem(node("<", 9).noElems())
                .elem(node("abc123", 10)
                    .elem(node("a", 10).noElems())
                    .elem(node("b", 11).noElems())
                    .elem(node("c", 12).noElems())
                    .elem(node("1", 13).noElems())
                    .elem(node("2", 14).noElems())
                    .elem(node("3", 15).noElems())
                )
                .elem(node(">", 16).noElems())
        );
    }

    @Test
    void usesAReferenceAsAPredicate() throws ParseError {
        expect(Predicates.parse("pos-ref: c99")).toMatch(
            node("c99", 9)
                .elem(node("", 9).noElems())
                .elem(node("c99", 9)
                    .elem(node("c", 9).noElems())
                    .elem(node("9", 10).noElems())
                    .elem(node("9", 11).noElems())
                )
        );
    }
}

class NegativeLookAheadTest extends ParseHelper {
    @Test
    void checksTheFirstCharacterOfAWord() throws ParseError {
        expect(Predicates.parse("neg-name: word")).toMatch(
            node("word", 10)
                .elem(node("", 10).noElems())
                .elem(node("word", 10)
                    .elem(node("w", 10).noElems())
                    .elem(node("o", 11).noElems())
                    .elem(node("r", 12).noElems())
                    .elem(node("d", 13).noElems())
                )
        );
    }

    @Test
    void rejectsWordsWhereThePredicateMatches() {
        assertThrows(ParseError.class, () -> Predicates.parse("neg-name: Word"));
    }

    @Test
    void checksForAStringAtTheEnd() throws ParseError {
        expect(Predicates.parse("neg-tail-str: word")).toMatch(
            node("word", 14)
                .elem(node("word", 14).noElems())
                .elem(node("", 18).noElems())
        );
    }

    @Test
    void checksForAClassAtTheEnd() throws ParseError {
        expect(Predicates.parse("neg-tail-class: word")).toMatch(
            node("word", 16)
                .elem(node("word", 16).noElems())
                .elem(node("", 20).noElems())
        );
    }

    @Test
    void checksForAnyCharAtTheEnd() throws ParseError {
        expect(Predicates.parse("neg-tail-any: word")).toMatch(
            node("word", 14)
                .elem(node("word", 14).noElems())
                .elem(node("", 18).noElems())
        );
    }

    @Test
    void rejectsInputsThatMatchTheNegativePattern() {
        assertThrows(ParseError.class, () -> Predicates.parse("neg-tail-str: wordmore text"));
        assertThrows(ParseError.class, () -> Predicates.parse("neg-tail-class: words"));
        assertThrows(ParseError.class, () -> Predicates.parse("neg-tail-any: word "));
    }
}

class ParseHelper {
    Node<Label> expect(TreeNode node) {
        return new NodeWrapper(node.elements.get(1));
    }

    NodeSpec<Label> node(String text, int offset) {
        return new NodeSpec<Label>(text, offset);
    }
}

class NodeWrapper implements Node<Label> {
    private TreeNode node;

    NodeWrapper(TreeNode node) {
        this.node = node;
    }

    public String text() {
        return node.text;
    }

    public int offset() {
        return node.offset;
    }

    public List<Node<Label>> elements() {
        return node.elements.stream()
            .map((elem) -> new NodeWrapper(elem))
            .collect(Collectors.toList());
    }

    public Node<Label> get(Label key) {
        return new NodeWrapper(node.get(key));
    }
}
</document_content>
</document>
<document index="74">
<source>test/java/QuantifiersTest.java</source>
<document_content>package canopy.quantifiers;

import java.util.List;
import java.util.stream.Collectors;

import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.jupiter.api.Test;

import helpers.Node;
import helpers.NodeSpec;

import test.grammars.quantifiers.Label;
import test.grammars.quantifiers.ParseError;
import test.grammars.quantifiers.Quantifiers;
import test.grammars.quantifiers.TreeNode;

class MaybeTest extends ParseHelper {
    @Test
    void parsesAMatchingCharacter() throws ParseError {
        expect(Quantifiers.parse("maybe: 4")).toMatch(node("4", 7).noElems());
    }

    @Test
    void parsesTheEmptyString() throws ParseError {
        expect(Quantifiers.parse("maybe: ")).toMatch(node("", 7).noElems());
    }

    @Test
    void rejectsANonMatchingCharacter() {
        assertThrows(ParseError.class, () -> Quantifiers.parse("maybe: a"));
    }
}

class ZeroOrMoreTest extends ParseHelper {
    @Test
    void parsesTheEmptyString() throws ParseError {
        expect(Quantifiers.parse("rep-0: ")).toMatch(node("", 7).noElems());
    }

    @Test
    void parsesOneOccurrenceOfThePattern() throws ParseError {
        expect(Quantifiers.parse("rep-0: z")).toMatch(
            node("z", 7)
                .elem(node("z", 7).noElems())
        );
    }

    @Test
    void parsesManyOccurrencesOfTheSameInstanceOfThePattern() throws ParseError {
        expect(Quantifiers.parse("rep-0: zzzz")).toMatch(
            node("zzzz", 7)
                .elem(node("z", 7).noElems())
                .elem(node("z", 8).noElems())
                .elem(node("z", 9).noElems())
                .elem(node("z", 10).noElems())
        );
    }

    @Test
    void parsesManyOccurrencesOfDifferentInstancesOfThePattern() throws ParseError {
        expect(Quantifiers.parse("rep-0: wxyz")).toMatch(
            node("wxyz", 7)
                .elem(node("w", 7).noElems())
                .elem(node("x", 8).noElems())
                .elem(node("y", 9).noElems())
                .elem(node("z", 10).noElems())
        );
    }

    @Test
    void rejectsStringsWithANonMatchingPrefix() {
        assertThrows(ParseError.class, () -> Quantifiers.parse("rep-0: 4x"));
    }

    @Test
    void rejectsStringsWithANonMatchingSuffix() {
        assertThrows(ParseError.class, () -> Quantifiers.parse("rep-0: x4"));
    }

    @Test
    void parsesRepeatingPatternsGreedily() {
        assertThrows(ParseError.class, () -> Quantifiers.parse("greedy-0: xy"));
    }
}

class OneOrMoreTest extends ParseHelper {
    @Test
    void rejectsTheEmptyString() throws ParseError {
        assertThrows(ParseError.class, () -> Quantifiers.parse("rep-1: "));
    }

    @Test
    void parsesOneOccurrenceOfThePattern() throws ParseError {
        expect(Quantifiers.parse("rep-1: z")).toMatch(
            node("z", 7)
                .elem(node("z", 7).noElems())
        );
    }

    @Test
    void parsesManyOccurrencesOfTheSameInstanceOfThePattern() throws ParseError {
        expect(Quantifiers.parse("rep-1: zzzz")).toMatch(
            node("zzzz", 7)
                .elem(node("z", 7).noElems())
                .elem(node("z", 8).noElems())
                .elem(node("z", 9).noElems())
                .elem(node("z", 10).noElems())
        );
    }

    @Test
    void parsesManyOccurrencesOfDifferentInstancesOfThePattern() throws ParseError {
        expect(Quantifiers.parse("rep-1: wxyz")).toMatch(
            node("wxyz", 7)
                .elem(node("w", 7).noElems())
                .elem(node("x", 8).noElems())
                .elem(node("y", 9).noElems())
                .elem(node("z", 10).noElems())
        );
    }

    @Test
    void rejectsStringsWithANonMatchingPrefix() {
        assertThrows(ParseError.class, () -> Quantifiers.parse("rep-1: 4x"));
    }

    @Test
    void rejectsStringsWithANonMatchingSuffix() {
        assertThrows(ParseError.class, () -> Quantifiers.parse("rep-1: x4"));
    }

    @Test
    void parsesRepeatingPatternsGreedily() {
        assertThrows(ParseError.class, () -> Quantifiers.parse("greedy-1: xy"));
    }

    @Test
    void parsesARepeatedReference() throws ParseError {
        expect(Quantifiers.parse("color-ref: #abc123")).toMatch(
            node("#abc123", 11)
                .elem(node("#", 11).noElems())
                .elem(node("abc123", 12)
                    .elem(node("a", 12).noElems())
                    .elem(node("b", 13).noElems())
                    .elem(node("c", 14).noElems())
                    .elem(node("1", 15).noElems())
                    .elem(node("2", 16).noElems())
                    .elem(node("3", 17).noElems())
                )
        );
    }

    @Test
    void parsesARepeatedChoice() throws ParseError {
        expect(Quantifiers.parse("color-choice: #abc123")).toMatch(
            node("#abc123", 14)
                .elem(node("#", 14).noElems())
                .elem(node("abc123", 15)
                    .elem(node("a", 15).noElems())
                    .elem(node("b", 16).noElems())
                    .elem(node("c", 17).noElems())
                    .elem(node("1", 18).noElems())
                    .elem(node("2", 19).noElems())
                    .elem(node("3", 20).noElems())
                )
        );
    }
}

class ExactlyTest extends ParseHelper {
    @Test
    void rejectsTheEmptyString() throws ParseError {
        assertThrows(ParseError.class, () -> Quantifiers.parse("rep-exact: "));
    }

    @Test
    void parsesTheRequiredNumberOfThePattern() throws ParseError {
        expect(Quantifiers.parse("rep-exact: abc")).toMatch(
            node("abc", 11)
                .elem(node("a", 11).noElems())
                .elem(node("b", 12).noElems())
                .elem(node("c", 13).noElems())
        );
    }

    @Test
    void rejectsTooFewCopiesOfThePattern() throws ParseError {
        assertThrows(ParseError.class, () -> Quantifiers.parse("rep-exact: ab"));
    }

    @Test
    void rejectsTooManyCopiesOfThePattern() throws ParseError {
        assertThrows(ParseError.class, () -> Quantifiers.parse("rep-exact: abcd"));
    }
}

class MinimumTest extends ParseHelper {
    @Test
    void rejectsTheEmptyString() throws ParseError {
        assertThrows(ParseError.class, () -> Quantifiers.parse("rep-min: "));
    }

    @Test
    void parsesTheRequiredNumberOfThePattern() throws ParseError {
        expect(Quantifiers.parse("rep-min: abc")).toMatch(
            node("abc", 9)
                .elem(node("a", 9).noElems())
                .elem(node("b", 10).noElems())
                .elem(node("c", 11).noElems())
        );
    }

    @Test
    void parsesMoreCopiesOfThePattern() throws ParseError {
        expect(Quantifiers.parse("rep-min: abcdef")).toMatch(
            node("abcdef", 9)
                .elem(node("a", 9).noElems())
                .elem(node("b", 10).noElems())
                .elem(node("c", 11).noElems())
                .elem(node("d", 12).noElems())
                .elem(node("e", 13).noElems())
                .elem(node("f", 14).noElems())
        );
    }

    @Test
    void rejectsTooFewCopiesOfThePattern() throws ParseError {
        assertThrows(ParseError.class, () -> Quantifiers.parse("rep-min: ab"));
    }
}

class RangeTest extends ParseHelper {
    @Test
    void rejectsTheEmptyString() throws ParseError {
        assertThrows(ParseError.class, () -> Quantifiers.parse("rep-range: "));
    }

    @Test
    void parsesTheMinimumNumberOfThePattern() throws ParseError {
        expect(Quantifiers.parse("rep-range: abc")).toMatch(
            node("abc", 11)
                .elem(node("a", 11).noElems())
                .elem(node("b", 12).noElems())
                .elem(node("c", 13).noElems())
        );
    }

    @Test
    void parsesTheMaximumNumberOfThePattern() throws ParseError {
        expect(Quantifiers.parse("rep-range: abcde")).toMatch(
            node("abcde", 11)
                .elem(node("a", 11).noElems())
                .elem(node("b", 12).noElems())
                .elem(node("c", 13).noElems())
                .elem(node("d", 14).noElems())
                .elem(node("e", 15).noElems())
        );
    }

    @Test
    void rejectsTooFewCopiesOfThePattern() throws ParseError {
        assertThrows(ParseError.class, () -> Quantifiers.parse("rep-range: ab"));
    }

    @Test
    void rejectsTooManyCopiesOfThePattern() throws ParseError {
        assertThrows(ParseError.class, () -> Quantifiers.parse("rep-range: abcdef"));
    }
}

class ParseHelper {
    Node<Label> expect(TreeNode node) {
        return new NodeWrapper(node.elements.get(1));
    }

    NodeSpec<Label> node(String text, int offset) {
        return new NodeSpec<Label>(text, offset);
    }
}

class NodeWrapper implements Node<Label> {
    private TreeNode node;

    NodeWrapper(TreeNode node) {
        this.node = node;
    }

    public String text() {
        return node.text;
    }

    public int offset() {
        return node.offset;
    }

    public List<Node<Label>> elements() {
        return node.elements.stream()
            .map((elem) -> new NodeWrapper(elem))
            .collect(Collectors.toList());
    }

    public Node<Label> get(Label key) {
        return new NodeWrapper(node.get(key));
    }
}
</document_content>
</document>
<document index="75">
<source>test/java/SequencesTest.java</source>
<document_content>package canopy.sequences;

import java.util.List;
import java.util.stream.Collectors;

import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.jupiter.api.Test;

import helpers.Node;
import helpers.NodeSpec;

import test.grammars.sequences.Label;
import test.grammars.sequences.ParseError;
import test.grammars.sequences.Sequences;
import test.grammars.sequences.TreeNode;

class SequenceStringsTest extends ParseHelper {
    @Test
    void parsesAMatchingSequence() throws ParseError {
        expect(Sequences.parse("seq-str: abc")).toMatch(
            node("abc", 9)
                .elem(node("a", 9).noElems())
                .elem(node("b", 10).noElems())
                .elem(node("c", 11).noElems())
        );
    }

    @Test
    void rejectsAMissingPrefix() {
        assertThrows(ParseError.class, () -> Sequences.parse("seq-str: bc"));
    }

    @Test
    void rejectsAnAdditionalPrefix() {
        assertThrows(ParseError.class, () -> Sequences.parse("seq-str: zabc"));
    }

    @Test
    void rejectsAMissingMiddle() {
        assertThrows(ParseError.class, () -> Sequences.parse("seq-str: ac"));
    }

    @Test
    void rejectsAnAdditionalMiddle() {
        assertThrows(ParseError.class, () -> Sequences.parse("seq-str: azbzc"));
    }

    @Test
    void rejectsAMissingSuffix() {
        assertThrows(ParseError.class, () -> Sequences.parse("seq-str: ab"));
    }

    @Test
    void rejectsAnAdditionalSuffix() {
        assertThrows(ParseError.class, () -> Sequences.parse("seq-str: abcz"));
    }
}

class SequenceMaybesTest extends ParseHelper {
    @Test
    void parsesAtTheStart() throws ParseError {
        expect(Sequences.parse("seq-maybe-1: bc")).toMatch(
            node("bc", 13)
                .elem(node("", 13).noElems())
                .elem(node("b", 13).noElems())
                .elem(node("c", 14).noElems())
        );
    }

    @Test
    void parsesInTheMiddle() throws ParseError {
        expect(Sequences.parse("seq-maybe-2: ac")).toMatch(
            node("ac", 13)
                .elem(node("a", 13).noElems())
                .elem(node("", 14).noElems())
                .elem(node("c", 14).noElems())
        );
    }

    @Test
    void parsesAtTheEnd() throws ParseError {
        expect(Sequences.parse("seq-maybe-3: ab")).toMatch(
            node("ab", 13)
                .elem(node("a", 13).noElems())
                .elem(node("b", 14).noElems())
                .elem(node("", 15).noElems())
        );
    }
}

class SequenceRepetitionTest extends ParseHelper {
    @Test
    void allowsEmptyMatches() throws ParseError {
        expect(Sequences.parse("seq-rep-1: 0")).toMatch(
            node("0", 11)
                .elem(node("", 11).noElems())
                .elem(node("0", 11).noElems())
        );
    }

    @Test
    void allowsNonEmptyMatches() throws ParseError {
        expect(Sequences.parse("seq-rep-1: abc0")).toMatch(
            node("abc0", 11)
                .elem(node("abc", 11)
                    .elem(node("a", 11).noElems())
                    .elem(node("b", 12).noElems())
                    .elem(node("c", 13).noElems())
                )
                .elem(node("0", 14).noElems())
        );
    }

    @Test
    void parsesRepetitionsGreedily() {
        assertThrows(ParseError.class, () -> Sequences.parse("seq-rep-2: aaa"));
    }
}

class SequenceRepeatedSubSequenceTest extends ParseHelper {
    @Test
    void parsesANestedTree() throws ParseError {
        expect(Sequences.parse("seq-rep-subseq: ab1b2b3c")).toMatch(
            node("ab1b2b3c", 16)
                .elem(node("a", 16).noElems())
                .elem(node("b1b2b3", 17)
                    .elem(node("b1", 17)
                        .elem(node("b", 17).noElems())
                        .elem(node("1", 18).noElems())
                    )
                    .elem(node("b2", 19)
                        .elem(node("b", 19).noElems())
                        .elem(node("2", 20).noElems())
                    )
                    .elem(node("b3", 21)
                        .elem(node("b", 21).noElems())
                        .elem(node("3", 22).noElems())
                    )
                )
                .elem(node("c", 23).noElems())
        );
    }

    @Test
    void rejectsTheInputIfTheSubSequenceDoesNotMatch() {
        assertThrows(ParseError.class, () -> Sequences.parse("seq-rep-subseq: ab1b2bc"));
    }
}

class SequenceLabellingTest extends ParseHelper {
    @Test
    void createsNamedReferencesToChildNodes() throws ParseError {
        expect(Sequences.parse("seq-label: v987")).toMatch(
            node("v987", 11)
                .elem(node("v", 11).noElems())
                .elem(node("987", 12)
                    .elem(node("9", 12).noElems())
                    .elem(node("8", 13).noElems())
                    .elem(node("7", 14).noElems())
                )
                .label(Label.num, node("987", 12)
                    .elem(node("9", 12).noElems())
                    .elem(node("8", 13).noElems())
                    .elem(node("7", 14).noElems())
                )
        );
    }

    @Test
    void createsNamedReferencesInsideRepeatedSubSequences() throws ParseError {
        expect(Sequences.parse("seq-label-subseq: v.AB.CD.EF")).toMatch(
            node("v.AB.CD.EF", 18)
                .elem(node("v", 18).noElems())
                .elem(node(".AB.CD.EF", 19)
                    .elem(node(".AB", 19)
                        .elem(node(".", 19))
                        .elem(node("AB", 20)
                            .elem(node("A", 20).noElems())
                            .elem(node("B", 21).noElems())
                        )
                        .label(Label.part, node("AB", 20)
                            .elem(node("A", 20).noElems())
                            .elem(node("B", 21).noElems())
                        )
                    )
                    .elem(node(".CD", 22)
                        .elem(node(".", 22))
                        .elem(node("CD", 23)
                            .elem(node("C", 23).noElems())
                            .elem(node("D", 24).noElems())
                        )
                        .label(Label.part, node("CD", 23)
                            .elem(node("C", 23).noElems())
                            .elem(node("D", 24).noElems())
                        )
                    )
                    .elem(node(".EF", 25)
                        .elem(node(".", 25))
                        .elem(node("EF", 26)
                            .elem(node("E", 26).noElems())
                            .elem(node("F", 27).noElems())
                        )
                        .label(Label.part, node("EF", 26)
                            .elem(node("E", 26).noElems())
                            .elem(node("F", 27).noElems())
                        )
                    )
                )
        );
    }
}

class SequenceMutingTest extends ParseHelper {
    @Test
    void removesChildNodesFromTheSequence() throws ParseError {
        expect(Sequences.parse("seq-mute-1: key: 42")).toMatch(
            node("key: 42", 12)
                .elem(node("key", 12)
                    .elem(node("k", 12).noElems())
                    .elem(node("e", 13).noElems())
                    .elem(node("y", 14).noElems())
                )
                .elem(node("42", 17)
                    .elem(node("4", 17).noElems())
                    .elem(node("2", 18).noElems())
                )
        );
    }

    @Test
    void removesChildSequencesFromTheSequence() throws ParseError {
        expect(Sequences.parse("seq-mute-2: key: 42")).toMatch(
            node("key: 42", 12)
                .elem(node("key", 12)
                    .elem(node("k", 12).noElems())
                    .elem(node("e", 13).noElems())
                    .elem(node("y", 14).noElems())
                )
                .elem(node("42", 17)
                    .elem(node("4", 17).noElems())
                    .elem(node("2", 18).noElems())
                )
        );
    }

    @Test
    void removesNodesFromChildSequences() throws ParseError {
        expect(Sequences.parse("seq-mute-3: v.AB.CD.EF")).toMatch(
            node("v.AB.CD.EF", 12)
                .elem(node("v", 12).noElems())
                .elem(node(".AB.CD.EF", 13)
                    .elem(node(".AB", 13)
                        .elem(node("AB", 14)
                            .elem(node("A", 14).noElems())
                            .elem(node("B", 15).noElems())
                        )
                    )
                    .elem(node(".CD", 16)
                        .elem(node("CD", 17)
                            .elem(node("C", 17).noElems())
                            .elem(node("D", 18).noElems())
                        )
                    )
                    .elem(node(".EF", 19)
                        .elem(node("EF", 20)
                            .elem(node("E", 20).noElems())
                            .elem(node("F", 21).noElems())
                        )
                    )
                )
        );
    }

    @Test
    void correctlyHandlesNestedExpressionsUsingMutes() throws ParseError {
        expect(Sequences.parse("seq-mute-4: abcde")).toMatch(
            node("abcde", 12)
                .elem(node("a", 12).noElems())
                .elem(node("e", 16).noElems())
        );
    }

    @Test
    void allowsTheFirstElementToBeMuted() throws ParseError {
        expect(Sequences.parse("seq-mute-first: abc")).toMatch(
            node("abc", 16)
                .elem(node("b", 17).noElems())
                .elem(node("c", 18).noElems())
        );
    }

    @Test
    void allowsTheLastElementToBeMuted() throws ParseError {
        expect(Sequences.parse("seq-mute-last: abc")).toMatch(
            node("abc", 15)
                .elem(node("a", 15).noElems())
                .elem(node("b", 16).noElems())
        );
    }

    @Test
    void rejectsInputMissingMutedExpressions() {
        assertThrows(ParseError.class, () -> Sequences.parse("seq-mute-4: ae"));
        assertThrows(ParseError.class, () -> Sequences.parse("seq-mute-4: abde"));
    }
}

class SequenceReferencesTest extends ParseHelper {
    @Test
    void assignsLabelsToReferenceExpressions() throws ParseError {
        expect(Sequences.parse("seq-refs: ac")).toMatch(
            node("ac", 10)
                .elem(node("a", 10).noElems())
                .elem(node("c", 11).noElems())
                .label(Label.a, node("a", 10).noElems())
                .label(Label.b, node("c", 11).noElems())
                .label(Label.c, node("c", 11).noElems())
        );
    }

    @Test
    void mutesReferencesFromGeneratingLabels() throws ParseError {
        TreeNode tree = Sequences.parse("seq-mute-refs: ac");

        expect(tree).toMatch(
            node("ac", 15)
                .elem(node("a", 15).noElems())
                .label(Label.a, node("a", 15).noElems())
        );

        assertNull(tree.get(Label.c));
    }
}

class ParseHelper {
    Node<Label> expect(TreeNode node) {
        return new NodeWrapper(node.elements.get(1));
    }

    NodeSpec<Label> node(String text, int offset) {
        return new NodeSpec<Label>(text, offset);
    }
}

class NodeWrapper implements Node<Label> {
    private TreeNode node;

    NodeWrapper(TreeNode node) {
        this.node = node;
    }

    public String text() {
        return node.text;
    }

    public int offset() {
        return node.offset;
    }

    public List<Node<Label>> elements() {
        return node.elements.stream()
            .map((elem) -> new NodeWrapper(elem))
            .collect(Collectors.toList());
    }

    public Node<Label> get(Label key) {
        return new NodeWrapper(node.get(key));
    }
}
</document_content>
</document>
<document index="76">
<source>test/java/TerminalsTest.java</source>
<document_content>package canopy.terminals;

import java.util.List;
import java.util.stream.Collectors;

import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.jupiter.api.Test;

import helpers.Node;
import helpers.NodeSpec;

import test.grammars.terminals.Label;
import test.grammars.terminals.ParseError;
import test.grammars.terminals.Terminals;
import test.grammars.terminals.TreeNode;

class AnyCharTest extends ParseHelper {
    @Test
    void parsesAnySingleCharacter() throws ParseError {
        expect(Terminals.parse("any: a")).toMatch(node("a", 5));
        expect(Terminals.parse("any: !")).toMatch(node("!", 5));
    }

    @Test
    void rejectsTheEmptyString() {
        assertThrows(ParseError.class, () -> Terminals.parse("any: "));
    }

    @Test
    void rejectsInputWithTooManyCharacters() {
        assertThrows(ParseError.class, () -> Terminals.parse("any: ab"));
    }
}

class CharClassTest extends ParseHelper {
    @Test
    void parsesCharactersWithinTheClass() throws ParseError {
        expect(Terminals.parse("pos-class: x")).toMatch(node("x", 11));
    }

    @Test
    void rejectsCharactersOutsideTheClass() {
        assertThrows(ParseError.class, () -> Terminals.parse("pos-class: 0"));
    }

    @Test
    void matchesCharactersCaseSensitively() {
        assertThrows(ParseError.class, () -> Terminals.parse("pos-class: A"));
    }

    @Test
    void parsesCharactersOutsideANegativeClass() throws ParseError {
        expect(Terminals.parse("neg-class: 0")).toMatch(node("0", 11));
    }

    @Test
    void rejectsCharactersWithinANegativeClass() {
        assertThrows(ParseError.class, () -> Terminals.parse("neg-class: x"));
    }
}

class SingleQuotedStringTest extends ParseHelper {
    @Test
    void parsesThatExactString() throws ParseError {
        expect(Terminals.parse("str-1: oat")).toMatch(node("oat", 7));
    }

    @Test
    void matchesStringsCaseSensitively() {
        assertThrows(ParseError.class, () -> Terminals.parse("str-1: OAT"));
    }

    @Test
    void rejectsStringsWithAdditionalPrefixes() {
        assertThrows(ParseError.class, () -> Terminals.parse("str-1: boat"));
    }

    @Test
    void rejectsStringsWithAdditionalSuffixes() {
        assertThrows(ParseError.class, () -> Terminals.parse("str-1: oath"));
    }

    @Test
    void rejectsTheEmptyString() {
        assertThrows(ParseError.class, () -> Terminals.parse("str-1: "));
    }

    @Test
    void rejectsPrefixesOfTheTargetString() {
        assertThrows(ParseError.class, () -> Terminals.parse("str-1: oa"));
    }
}

class DoubleQuotedStringTest extends ParseHelper {
    @Test
    void parsesThatExactString() throws ParseError {
        expect(Terminals.parse("str-2: oat")).toMatch(node("oat", 7));
    }

    @Test
    void matchesStringsCaseSensitively() {
        assertThrows(ParseError.class, () -> Terminals.parse("str-2: OAT"));
    }

    @Test
    void rejectsStringsWithAdditionalPrefixes() {
        assertThrows(ParseError.class, () -> Terminals.parse("str-2: boat"));
    }

    @Test
    void rejectsStringsWithAdditionalSuffixes() {
        assertThrows(ParseError.class, () -> Terminals.parse("str-2: oath"));
    }

    @Test
    void rejectsTheEmptyString() {
        assertThrows(ParseError.class, () -> Terminals.parse("str-2: "));
    }

    @Test
    void rejectsPrefixesOfTheTargetString() {
        assertThrows(ParseError.class, () -> Terminals.parse("str-2: oa"));
    }
}

class CaseInsensitiveStringTest extends ParseHelper {
    @Test
    void parsesThatExactString() throws ParseError {
        expect(Terminals.parse("str-ci: oat")).toMatch(node("oat", 8));
    }

    @Test
    void matchesStringsCaseInsensitively() throws ParseError {
        expect(Terminals.parse("str-ci: OAT")).toMatch(node("OAT", 8));
    }

    @Test
    void rejectsStringsWithAdditionalPrefixes() {
        assertThrows(ParseError.class, () -> Terminals.parse("str-ci: boat"));
    }

    @Test
    void rejectsStringsWithAdditionalSuffixes() {
        assertThrows(ParseError.class, () -> Terminals.parse("str-ci: oath"));
    }

    @Test
    void rejectsTheEmptyString() {
        assertThrows(ParseError.class, () -> Terminals.parse("str-ci: "));
    }

    @Test
    void rejectsPrefixesOfTheTargetString() {
        assertThrows(ParseError.class, () -> Terminals.parse("str-ci: oa"));
    }
}

class ParseHelper {
    Node<Label> expect(TreeNode node) {
        return new NodeWrapper(node.elements.get(1));
    }

    NodeSpec<Label> node(String text, int offset) {
        return new NodeSpec<Label>(text, offset);
    }
}

class NodeWrapper implements Node<Label> {
    private TreeNode node;

    NodeWrapper(TreeNode node) {
        this.node = node;
    }

    public String text() {
        return node.text;
    }

    public int offset() {
        return node.offset;
    }

    public List<Node<Label>> elements() {
        return node.elements.stream()
            .map((elem) -> new NodeWrapper(elem))
            .collect(Collectors.toList());
    }

    public Node<Label> get(Label key) {
        return new NodeWrapper(node.get(key));
    }
}
</document_content>
</document>
<document index="77">
<source>test/python/choices_test.py</source>
<document_content>from unittest import TestCase
from .parse_helper import ParseHelper
from grammars import choices


class ChoiceStringsTest(TestCase, ParseHelper):
    def test_parses_any_of_the_choice_options(self):
        self.assertParse(("a", 12), choices.parse("choice-abc: a"))
        self.assertParse(("b", 12), choices.parse("choice-abc: b"))
        self.assertParse(("c", 12), choices.parse("choice-abc: c"))

    def test_rejects_input_matching_none_of_the_options(self):
        with self.assertRaises(choices.ParseError):
            choices.parse("choice-abc: d")

    def test_rejects_superstrings_of_the_options(self):
        with self.assertRaises(choices.ParseError):
            choices.parse("choice-abc: ab")

    def test_parses_a_choice_as_part_of_a_sequence(self):
        self.assertParse(
            ("repeat", 12, [
                ("re", 12, []),
                ("peat", 14, [])
            ]),
            choices.parse("choice-seq: repeat")
        )

    def test_does_not_backtrack_if_later_rules_fail(self):
        with self.assertRaises(choices.ParseError):
            choices.parse("choice-seq: reppeat")


class ChoiceRepetitionTest(TestCase, ParseHelper):
    def test_parses_a_different_option_on_each_iteration(self):
        self.assertParse(
            ("abcabba", 12, [
                ("a", 12, []),
                ("b", 13, []),
                ("c", 14, []),
                ("a", 15, []),
                ("b", 16, []),
                ("b", 17, []),
                ("a", 18, [])
            ]),
            choices.parse("choice-rep: abcabba")
        )

    def test_rejects_if_any_iteration_does_not_match_the_options(self):
        with self.assertRaises(choices.ParseError):
            choices.parse("choice-rep: abcadba")


class ChoiceSequenceTest(TestCase, ParseHelper):
    def test_parses_one_branch_of_the_choice(self):
        self.assertParse(
            ("ab", 13, [
                ("a", 13, []),
                ("b", 14, [])
            ]),
            choices.parse("choice-bind: ab")
        )

    def test_binds_sequences_tighter_than_choices(self):
        with self.assertRaises(choices.ParseError):
            choices.parse("choice-bind: abef")
</document_content>
</document>
<document index="78">
<source>test/python/extensions_test.py</source>
<document_content>from unittest import TestCase
from .parse_helper import ParseHelper
from grammars import extensions


class ExtensionsTest(TestCase, ParseHelper):
    def test_adds_methods_to_a_string(self):
        input  = "ext-str: hello"
        result = extensions.parse(input, types=Types).elements[1]

        self.assertEqual((0, ["h", "e", "l", "l", "o"]), result.ext_func())

    def test_adds_methods_to_a_char_class(self):
        input  = "ext-class: k"
        result = extensions.parse(input, types=Types).elements[1]

        self.assertEqual((0, ["k"]), result.ext_func())

    def test_adds_methods_to_any_char(self):
        input  = "ext-any: ?"
        result = extensions.parse(input, types=Types).elements[1]

        self.assertEqual((0, ["?"]), result.ext_func())

    def test_adds_methods_to_a_maybe_rule(self):
        input  = "ext-maybe: hello"
        result = extensions.parse(input, types=Types).elements[1]

        self.assertEqual((0, ["h", "e", "l", "l", "o"]), result.ext_func())

    def test_adds_methods_to_a_repetition(self):
        input  = "ext-rep: abc"
        result = extensions.parse(input, types=Types).elements[1]

        self.assertEqual((3, ["a", "b", "c"]), result.ext_func())

    def test_adds_methods_to_a_sequence(self):
        input  = "ext-seq: xyz"
        result = extensions.parse(input, types=Types).elements[1]

        self.assertEqual((3, ["x", "y", "z"]), result.ext_func())

    def test_adds_methods_to_a_parenthesised_expression(self):
        input  = "ext-paren: !"
        result = extensions.parse(input, types=Types).elements[1]

        self.assertEqual((0, ["!"]), result.ext_func())

    def test_adds_methods_to_the_options_of_a_choice(self):
        input  = "ext-choice: 0"
        result = extensions.parse(input, types=Types).elements[1]
        self.assertEqual((0, ["0"]), result.ext_func())

        input  = "ext-choice: 42"
        result = extensions.parse(input, types=Types).elements[1]
        self.assertEqual((2, ["4", "2"]), result.ext_func())

    def test_adds_methods_to_the_result_of_a_reference(self):
        input  = "ext-ref: hello"
        result = extensions.parse(input, types=Types).elements[1]

        self.assertEqual((0, ["h", "e", "l", "l", "o"]), result.ext_func())

    def test_adds_from_a_namespaced_module(self):
        input  = "ext-ns: hello"
        result = extensions.parse(input, types=Types).elements[1]

        self.assertEqual(True, result.ns_func())


class Types:
    class Ext(object):
        def ext_func(self):
            return (len(self.elements), list(self.text))

    class NS:
        class Ext(object):
            def ns_func(self):
                return True
</document_content>
</document>
<document index="79">
<source>test/python/node_actions_test.py</source>
<document_content>from unittest import TestCase
from .parse_helper import ParseHelper
from grammars import node_actions


class NodeActionsTest(TestCase, ParseHelper):
    def test_makes_nodes_from_a_string(self):
        input  = "act-str: hello"
        result = node_actions.parse(input, actions=TestActions()).elements[1]

        self.assertEqual(["str", input, 9, 14, []], result)

    def test_makes_nodes_from_a_char_class(self):
        input  = "act-class: k"
        result = node_actions.parse(input, actions=TestActions()).elements[1]

        self.assertEqual(["char", input, 11, 12, []], result)

    def test_makes_nodes_from_any_char(self):
        input  = "act-any: ?"
        result = node_actions.parse(input, actions=TestActions()).elements[1]

        self.assertEqual(["any", input, 9, 10, []], result)

    def test_makes_nodes_from_a_maybe_rule(self):
        input  = "act-maybe: hello"
        result = node_actions.parse(input, actions=TestActions()).elements[1]

        self.assertEqual(["maybe", input, 11, 16, []], result)

    def test_does_not_invoke_an_action_for_a_maybe_rule_with_no_match(self):
        input  = "act-maybe: "
        self.assertParse(("", 11, []), node_actions.parse(input, actions=TestActions()))

    def test_makes_nodes_from_a_repetition(self):
        input  = "act-rep: abc"
        result = node_actions.parse(input, actions=TestActions()).elements[1]

        self.assertEqual(["rep", input, 9, 12], result[0:4])

        self.assertParseElements([
            ("a", 9, []),
            ("b", 10, []),
            ("c", 11, [])
        ], result)

    def test_makes_nodes_from_a_repetition_in_parentheses(self):
        input  = "act-rep-paren: abab"
        result = node_actions.parse(input, actions=TestActions()).elements[1]

        self.assertEqual(["rep-paren", input, 15, 19], result[0:4])

        self.assertParseElements([
            ("ab", 15, [
                ("a", 15, []),
                ("b", 16, [])
            ]),
            ("ab", 17, [
                ("a", 17, []),
                ("b", 18, [])
            ])
        ], result)

    def test_makes_nodes_from_a_sequence(self):
        input  = "act-seq: xyz"
        result = node_actions.parse(input, actions=TestActions()).elements[1]

        self.assertEqual(["seq", input, 9, 12], result[0:4])

        self.assertParseElements([
            ("x", 9, []),
            ("y", 10, []),
            ("z", 11, [])
        ], result)

    def test_makes_nodes_from_a_sequence_with_muted_elements(self):
        input  = "act-seq-mute: xyz"
        result = node_actions.parse(input, actions=TestActions()).elements[1]

        self.assertEqual(["seq", input, 14, 17], result[0:4])

        self.assertParseElements([
            ("x", 14, []),
            ("z", 16, [])
        ], result)

    def test_makes_nodes_from_a_parenthesised_expression(self):
        input  = "act-paren: !"
        result = node_actions.parse(input, actions=TestActions()).elements[1]

        self.assertEqual(["paren", input, 11, 12, []], result)

    def test_binds_to_the_options_of_a_choice(self):
        input  = "act-choice: 0"
        result = node_actions.parse(input, actions=TestActions()).elements[1]
        self.assertEqual(["zero", input, 12, 13, []], result)

        input  = "act-choice: 42"
        result = node_actions.parse(input, actions=TestActions()).elements[1]

        self.assertEqual(["int", input, 12, 14], result[0:4])

        self.assertParseElements([
            ("4", 12, []),
            ("2", 13, [
                ("2", 13, [])
            ])
        ], result)

    def test_treats_null_as_a_valid_result(self):
        result = node_actions.parse("act-falsey: null", actions=TestActions()).elements[1]
        self.assertEqual(None, result)

    def test_treats_false_as_a_valid_result(self):
        result = node_actions.parse("act-falsey: false", actions=TestActions()).elements[1]
        self.assertEqual(False, result)

    def test_treats_zero_as_a_valid_result(self):
        result = node_actions.parse("act-falsey: 0", actions=TestActions()).elements[1]
        self.assertEqual(0, result)

    def test_treats_empty_strings_as_a_valid_result(self):
        result = node_actions.parse("act-falsey: ''", actions=TestActions()).elements[1]
        self.assertEqual("", result)

    def test_treats_empty_lists_as_a_valid_result(self):
        result = node_actions.parse("act-falsey: []", actions=TestActions()).elements[1]
        self.assertEqual([], result)

    def test_treats_falsey_values_as_acceptable_lookahead_results(self):
        input  = "act-falsey-pred: 0"
        result = node_actions.parse(input, actions=TestActions()).elements[1].elements[1]

        self.assertEqual(["zero", input, 17, 18, []], result)

    def test_treats_falsey_values_as_acceptable_repetition_results(self):
        result = node_actions.parse("act-falsey-rep: null0false''[]", actions=TestActions())
        self.assertEqual([None, 0, False, "", []], result.elements[1].elements)

    def test_treats_falsey_values_as_acceptable_maybe_results(self):
        input  = "act-falsey-opt: null"
        result = node_actions.parse(input, actions=TestActions()).elements[1]

        self.assertEqual(None, result)

    def test_treats_falsey_values_as_acceptable_sequence_results(self):
        input  = "act-falsey-seq: (null)"
        result = node_actions.parse(input, actions=TestActions()).elements[1]

        self.assertEqual(3, len(result.elements))
        self.assertEqual(None, result.elements[1])

    def test_treats_falsey_values_as_acceptable_choice_results(self):
        input  = "act-falsey-choice: null"
        result = node_actions.parse(input, actions=TestActions()).elements[1]

        self.assertEqual(None, result)


class TestActions:
    def make_str(self, *args):
        return ["str"] + list(args)

    def make_char(self, *args):
        return ["char"] + list(args)

    def make_any(self, *args):
        return ["any"] + list(args)

    def make_maybe(self, *args):
        return ["maybe"] + list(args)

    def make_rep(self, *args):
        return ["rep"] + list(args)

    def make_seq(self, *args):
        return ["seq"] + list(args)

    def make_paren(self, *args):
        return ["paren"] + list(args)

    def make_rep_paren(self, *args):
        return ["rep-paren"] + list(args)

    def make_zero(self, *args):
        return ["zero"] + list(args)

    def make_int(self, *args):
        return ["int"] + list(args)

    def make_null(*args):
        return None

    def make_false(*args):
        return False

    def make_0(*args):
        return 0

    def make_empty_str(*args):
        return ""

    def make_empty_list(*args):
        return []
</document_content>
</document>
<document index="80">
<source>test/python/parse_helper.py</source>
<document_content>class ParseHelper:
    def assertParse(self, tuple, actual):
        self.assertParseInner(tuple, actual.elements[1])

    def assertParseElements(self, elems, action_args):
        self.assertEqual(5, len(action_args))
        self.assertEqual(len(elems), len(action_args[4]))

        for i, elem in enumerate(elems):
            self.assertParseInner(elem, action_args[4][i])

    def assertParseInner(self, tuple, actual):
        text, offset = tuple[0:2]

        self.assertEqual(text, actual.text)
        self.assertEqual(offset, actual.offset)

        if len(tuple) > 2:
            elements = tuple[2]
            self.assertEqual(len(elements), len(actual.elements))

            for i, elem in enumerate(elements):
                self.assertParseInner(elem, actual.elements[i])

        if len(tuple) > 3:
            labelled = tuple[3]
            for key, value in labelled.items():
                self.assertParseInner(value, getattr(actual, key))
</document_content>
</document>
<document index="81">
<source>test/python/predicates_test.py</source>
<document_content>from unittest import TestCase
from .parse_helper import ParseHelper
from grammars import predicates


class PostiveLookAheadTest(TestCase, ParseHelper):
    def test_checks_the_first_character_of_a_word(self):
        self.assertParse(
            ("London", 10, [
                ("", 10, []),
                ("London", 10, [
                    ("L", 10, []),
                    ("o", 11, []),
                    ("n", 12, []),
                    ("d", 13, []),
                    ("o", 14, []),
                    ("n", 15, [])
                ])
            ]),
            predicates.parse("pos-name: London")
        )

    def test_rejects_words_where_the_predicate_does_not_match(self):
        with self.assertRaises(predicates.ParseError):
            predicates.parse("pos-name: london")

    def test_resets_the_cursor_after_matching(self):
        self.assertParse(
            ("<abc123>", 9, [
                ("", 9, []),
                ("<", 9, []),
                ("abc123", 10, [
                    ("a", 10, []),
                    ("b", 11, []),
                    ("c", 12, []),
                    ("1", 13, []),
                    ("2", 14, []),
                    ("3", 15, [])
                ]),
                (">", 16, [])
            ]),
            predicates.parse("pos-seq: <abc123>")
        )

    def test_uses_a_reference_as_a_predicate(self):
        self.assertParse(
            ("c99", 9, [
                ("", 9, []),
                ("c99", 9, [
                    ("c", 9, []),
                    ("9", 10, []),
                    ("9", 11, [])
                ])
            ]),
            predicates.parse("pos-ref: c99")
        )


class NegativeLookAheadTest(TestCase, ParseHelper):
    def test_checks_the_first_character_of_a_word(self):
        self.assertParse(
            ("word", 10, [
                ("", 10, []),
                ("word", 10, [
                    ("w", 10, []),
                    ("o", 11, []),
                    ("r", 12, []),
                    ("d", 13, [])
                ])
            ]),
            predicates.parse("neg-name: word")
        )

    def test_rejects_words_where_the_predicate_matches(self):
        with self.assertRaises(predicates.ParseError):
            predicates.parse("neg-name: Word")

    def test_checks_for_a_string_at_the_end(self):
        self.assertParse(
            ("word", 14, [
                ("word", 14, []),
                ("", 18, [])
            ]),
            predicates.parse("neg-tail-str: word")
        )

    def test_checks_for_a_class_at_the_end(self):
        self.assertParse(
            ("word", 16, [
                ("word", 16, []),
                ("", 20, [])
            ]),
            predicates.parse("neg-tail-class: word")
        )

    def test_checks_for_any_char_at_the_end(self):
        self.assertParse(
            ("word", 14, [
                ("word", 14, []),
                ("", 18, [])
            ]),
            predicates.parse("neg-tail-any: word")
        )

    def test_rejects_inputs_that_match_the_negative_pattern(self):
        with self.assertRaises(predicates.ParseError):
            predicates.parse("neg-tail-str: wordmore text")
        with self.assertRaises(predicates.ParseError):
            predicates.parse("neg-tail-class: words")
        with self.assertRaises(predicates.ParseError):
            predicates.parse("neg-tail-any: word ")
</document_content>
</document>
<document index="82">
<source>test/python/quantifiers_test.py</source>
<document_content>from unittest import TestCase
from .parse_helper import ParseHelper
from grammars import quantifiers


class MaybeTest(TestCase, ParseHelper):
    def test_parses_a_matching_character(self):
        self.assertParse(("4", 7, []), quantifiers.parse("maybe: 4"))

    def test_parses_the_empty_string(self):
        self.assertParse(("", 7, []), quantifiers.parse("maybe: "))

    def test_rejects_a_non_matching_string(self):
        with self.assertRaises(quantifiers.ParseError):
            quantifiers.parse("maybe: a")


class ZeroOrMoreTest(TestCase, ParseHelper):
    def test_parses_the_empty_string(self):
        self.assertParse(("", 7, []), quantifiers.parse("rep-0: "))

    def test_parses_one_occurrence_of_the_pattern(self):
        self.assertParse(
            ("z", 7, [
                ("z", 7, [])
            ]),
            quantifiers.parse("rep-0: z")
        )

    def test_parses_many_occurrences_of_the_same_instance_of_the_pattern(self):
        self.assertParse(
            ("zzzz", 7, [
                ("z", 7, []),
                ("z", 8, []),
                ("z", 9, []),
                ("z", 10, [])
            ]),
            quantifiers.parse("rep-0: zzzz")
        )

    def test_parses_many_occurrences_of_different_instances_of_the_pattern(self):
        self.assertParse(
            ("wxyz", 7, [
                ("w", 7, []),
                ("x", 8, []),
                ("y", 9, []),
                ("z", 10, [])
            ]),
            quantifiers.parse("rep-0: wxyz")
        )

    def test_rejects_strings_with_a_non_matching_prefix(self):
        with self.assertRaises(quantifiers.ParseError):
            quantifiers.parse("rep-0: 4x")

    def test_rejects_strings_with_a_non_matching_suffix(self):
        with self.assertRaises(quantifiers.ParseError):
            quantifiers.parse("rep-0: x4")

    def test_parses_repeating_patterns_greedily(self):
        with self.assertRaises(quantifiers.ParseError):
            quantifiers.parse("greedy-0: xy")


class OneOrMoreTest(TestCase, ParseHelper):
    def test_rejects_the_empty_string(self):
        with self.assertRaises(quantifiers.ParseError):
            quantifiers.parse("rep-1: ")

    def test_parses_one_occurrence_of_the_pattern(self):
        self.assertParse(
            ("z", 7, [
                ("z", 7, [])
            ]),
            quantifiers.parse("rep-1: z")
        )

    def test_parses_many_occurrences_of_the_same_instance_of_the_pattern(self):
        self.assertParse(
            ("zzzz", 7, [
                ("z", 7, []),
                ("z", 8, []),
                ("z", 9, []),
                ("z", 10, [])
            ]),
            quantifiers.parse("rep-1: zzzz")
        )

    def test_parses_many_occurrences_of_different_instances_of_the_pattern(self):
        self.assertParse(
            ("wxyz", 7, [
                ("w", 7, []),
                ("x", 8, []),
                ("y", 9, []),
                ("z", 10, [])
            ]),
            quantifiers.parse("rep-1: wxyz")
        )

    def test_rejects_strings_with_a_non_matching_prefix(self):
        with self.assertRaises(quantifiers.ParseError):
            quantifiers.parse("rep-1: 4x")

    def test_rejects_strings_with_a_non_matching_suffix(self):
        with self.assertRaises(quantifiers.ParseError):
            quantifiers.parse("rep-1: x4")

    def test_parses_repeating_patterns_greedily(self):
        with self.assertRaises(quantifiers.ParseError):
            quantifiers.parse("greedy-1: xy")

    def test_parses_a_repeated_reference(self):
        self.assertParse(
            ("#abc123", 11, [
                ("#", 11, []),
                ("abc123", 12, [
                    ("a", 12, []),
                    ("b", 13, []),
                    ("c", 14, []),
                    ("1", 15, []),
                    ("2", 16, []),
                    ("3", 17, [])
                ])
            ]),
            quantifiers.parse("color-ref: #abc123")
        )

    def test_parses_a_repeated_choice(self):
        self.assertParse(
            ("#abc123", 14, [
                ("#", 14, []),
                ("abc123", 15, [
                    ("a", 15, []),
                    ("b", 16, []),
                    ("c", 17, []),
                    ("1", 18, []),
                    ("2", 19, []),
                    ("3", 20, [])
                ])
            ]),
            quantifiers.parse("color-choice: #abc123")
        )


class ExactlyTest(TestCase, ParseHelper):
    def test_rejects_the_empty_string(self):
        with self.assertRaises(quantifiers.ParseError):
            quantifiers.parse("rep-exact: ")

    def test_parses_the_required_number_of_the_pattern(self):
        self.assertParse(
            ("abc", 11, [
                ("a", 11, []),
                ("b", 12, []),
                ("c", 13, [])
            ]),
            quantifiers.parse("rep-exact: abc")
        )

    def test_rejects_too_few_copies_of_the_pattern(self):
        with self.assertRaises(quantifiers.ParseError):
            quantifiers.parse("rep-exact: ab")

    def test_rejects_too_many_copies_of_the_pattern(self):
        with self.assertRaises(quantifiers.ParseError):
            quantifiers.parse("rep-exact: abcd")


class MinimumTest(TestCase, ParseHelper):
    def test_rejects_the_empty_string(self):
        with self.assertRaises(quantifiers.ParseError):
            quantifiers.parse("rep-min: ")

    def test_parses_the_minimum_number_of_the_pattern(self):
        self.assertParse(
            ("abc", 9, [
                ("a", 9, []),
                ("b", 10, []),
                ("c", 11, [])
            ]),
            quantifiers.parse("rep-min: abc")
        )

    def test_parses_more_copies_of_the_pattern(self):
        self.assertParse(
            ("abcdef", 9, [
                ("a", 9, []),
                ("b", 10, []),
                ("c", 11, []),
                ("d", 12, []),
                ("e", 13, []),
                ("f", 14, [])
            ]),
            quantifiers.parse("rep-min: abcdef")
        )

    def test_rejects_too_few_copies_of_the_pattern(self):
        with self.assertRaises(quantifiers.ParseError):
            quantifiers.parse("rep-min: ab")


class RangeTest(TestCase, ParseHelper):
    def test_rejects_the_empty_string(self):
        with self.assertRaises(quantifiers.ParseError):
            quantifiers.parse("rep-range: ")

    def test_parses_the_minimum_number_of_the_pattern(self):
        self.assertParse(
            ("abc", 11, [
                ("a", 11, []),
                ("b", 12, []),
                ("c", 13, [])
            ]),
            quantifiers.parse("rep-range: abc")
        )

    def test_parses_the_maximum_number_of_the_pattern(self):
        self.assertParse(
            ("abcde", 11, [
                ("a", 11, []),
                ("b", 12, []),
                ("c", 13, []),
                ("d", 14, []),
                ("e", 15, [])
            ]),
            quantifiers.parse("rep-range: abcde")
        )

    def test_rejects_too_few_copies_of_the_pattern(self):
        with self.assertRaises(quantifiers.ParseError):
            quantifiers.parse("rep-range: ab")

    def test_rejects_too_many_copies_of_the_pattern(self):
        with self.assertRaises(quantifiers.ParseError):
            quantifiers.parse("rep-range: abcdef")
</document_content>
</document>
<document index="83">
<source>test/python/sequences_test.py</source>
<document_content>from unittest import TestCase
from .parse_helper import ParseHelper
from grammars import sequences


class SequenceStringsTest(TestCase, ParseHelper):
    def test_parses_a_matching_sequence(self):
        self.assertParse(
            ("abc", 9, [
                ("a", 9, []),
                ("b", 10, []),
                ("c", 11, [])
            ]),
            sequences.parse("seq-str: abc")
        )

    def test_rejects_a_missing_prefix(self):
        with self.assertRaises(sequences.ParseError):
            sequences.parse("seq-str: bc")

    def test_rejects_an_additional_prefix(self):
        with self.assertRaises(sequences.ParseError):
            sequences.parse("seq-str: zabc")

    def test_rejects_a_missing_middle(self):
        with self.assertRaises(sequences.ParseError):
            sequences.parse("seq-str: ac")

    def test_rejects_an_additional_middle(self):
        with self.assertRaises(sequences.ParseError):
            sequences.parse("seq-str: azbzc")

    def test_rejects_a_missing_suffix(self):
        with self.assertRaises(sequences.ParseError):
            sequences.parse("seq-str: ab")

    def test_rejects_an_additional_suffix(self):
        with self.assertRaises(sequences.ParseError):
            sequences.parse("seq-str: abcz")


class SequenceMaybesTest(TestCase, ParseHelper):
    def test_parses_at_the_start(self):
        self.assertParse(
            ("bc", 13, [
                ("", 13, []),
                ("b", 13, []),
                ("c", 14, [])
            ]),
            sequences.parse("seq-maybe-1: bc")
        )

    def test_parses_in_the_middle(self):
        self.assertParse(
            ("ac", 13, [
                ("a", 13, []),
                ("", 14, []),
                ("c", 14, [])
            ]),
            sequences.parse("seq-maybe-2: ac")
        )

    def test_parses_at_the_end(self):
        self.assertParse(
            ("ab", 13, [
                ("a", 13, []),
                ("b", 14, []),
                ("", 15, [])
            ]),
            sequences.parse("seq-maybe-3: ab")
        )


class SequenceRepetitionTest(TestCase, ParseHelper):
    def test_allows_empty_matches(self):
        self.assertParse(
            ("0", 11, [
                ("", 11, []),
                ("0", 11, [])
            ]),
            sequences.parse("seq-rep-1: 0")
        )

    def test_allows_non_empty_matches(self):
        self.assertParse(
            ("abc0", 11, [
                ("abc", 11, [ ("a", 11, []), ("b", 12, []), ("c", 13, []) ]),
                ("0", 14, [])
            ]),
            sequences.parse("seq-rep-1: abc0")
        )

    def test_parses_repetitions_greedily(self):
        with self.assertRaises(sequences.ParseError):
            sequences.parse("seq-rep-2: aaa")


class SequenceRepeatedSubSequenceTest(TestCase, ParseHelper):
    def test_parses_a_nested_tree(self):
        self.assertParse(
            ("ab1b2b3c", 16, [
                ("a", 16, []),
                ("b1b2b3", 17, [
                    ("b1", 17, [ ("b", 17, []), ("1", 18, []) ]),
                    ("b2", 19, [ ("b", 19, []), ("2", 20, []) ]),
                    ("b3", 21, [ ("b", 21, []), ("3", 22, []) ])
                ]),
                ("c", 23, [])
            ]),
            sequences.parse("seq-rep-subseq: ab1b2b3c")
        )

    def test_rejects_the_input_if_the_sub_sequence_does_not_match(self):
        with self.assertRaises(sequences.ParseError):
            sequences.parse("seq-rep-subseq: ab1b2bc")


class SequenceLabellingTest(TestCase, ParseHelper):
    def test_creates_named_references_to_child_nodes(self):
        self.assertParse(
            ("v987", 11, [
                ("v", 11, []),
                ("987", 12, [ ("9", 12, []), ("8", 13, []), ("7", 14, []) ])
            ], {
                "num": ("987", 12, [ ("9", 12, []), ("8", 13, []), ("7", 14, []) ])
            }),
            sequences.parse("seq-label: v987")
        )

    def test_creates_named_references_inside_repeated_sub_sequences(self):
        self.assertParse(
            ("v.AB.CD.EF", 18, [
                ("v", 18, []),
                (".AB.CD.EF", 19, [
                    (".AB", 19, [
                        (".", 19),
                        ("AB", 20, [ ("A", 20, []), ("B", 21, []) ])
                    ], {
                        "part": ("AB", 20, [ ("A", 20, []), ("B", 21, []) ])
                    }),
                    (".CD", 22, [
                        (".", 22),
                        ("CD", 23, [ ("C", 23, []), ("D", 24, []) ])
                    ], {
                        "part": ("CD", 23, [ ("C", 23, []), ("D", 24, []) ])
                    }),
                    (".EF", 25, [
                        (".", 25),
                        ("EF", 26, [ ("E", 26, []), ("F", 27, []) ])
                    ], {
                        "part": ("EF", 26, [ ("E", 26, []), ("F", 27, []) ])
                    })
                ])
            ]),
            sequences.parse("seq-label-subseq: v.AB.CD.EF")
        )


class SequenceMutingTest(TestCase, ParseHelper):
    def test_removes_child_nodes_from_the_sequence(self):
        self.assertParse(
            ("key: 42", 12, [
                ("key", 12, [ ("k", 12, []), ("e", 13, []), ("y", 14, []) ]),
                ("42", 17, [ ("4", 17, []), ("2", 18, []) ])
            ]),
            sequences.parse("seq-mute-1: key: 42")
        )

    def test_removes_child_sequences_from_the_sequence(self):
        self.assertParse(
            ("key: 42", 12, [
                ("key", 12, [ ("k", 12, []), ("e", 13, []), ("y", 14, []) ]),
                ("42", 17, [ ("4", 17, []), ("2", 18, []) ])
            ]),
            sequences.parse("seq-mute-2: key: 42")
        )

    def test_removes_nodes_from_child_sequences(self):
        self.assertParse(
            ("v.AB.CD.EF", 12, [
                ("v", 12, []),
                (".AB.CD.EF", 13, [
                    (".AB", 13, [
                        ("AB", 14, [ ("A", 14, []), ("B", 15, []) ])
                    ]),
                    (".CD", 16, [
                        ("CD", 17, [ ("C", 17, []), ("D", 18, []) ])
                    ]),
                    (".EF", 19, [
                        ("EF", 20, [ ("E", 20, []), ("F", 21, []) ])
                    ])
                ])
            ]),
            sequences.parse("seq-mute-3: v.AB.CD.EF")
        )

    def test_correctly_handles_nested_expressions_using_mutes(self):
        self.assertParse(
            ("abcde", 12, [
                ("a", 12, []),
                ("e", 16, [])
            ]),
            sequences.parse("seq-mute-4: abcde")
        )

    def test_allows_the_first_element_to_be_muted(self):
        self.assertParse(
            ("abc", 16, [
                ("b", 17, []),
                ("c", 18, [])
            ]),
            sequences.parse("seq-mute-first: abc")
        )

    def test_allows_the_last_element_to_be_muted(self):
        self.assertParse(
            ("abc", 15, [
                ("a", 15, []),
                ("b", 16, [])
            ]),
            sequences.parse("seq-mute-last: abc")
        )

    def test_rejects_input_missing_muted_expressions(self):
        with self.assertRaises(sequences.ParseError):
            sequences.parse("seq-mute-4: ae")

        with self.assertRaises(sequences.ParseError):
            sequences.parse("seq-mute-4: abde")


class SequenceReferencesTest(TestCase, ParseHelper):
    def test_assigns_labels_to_reference_expressions(self):
        self.assertParse(
            ("ac", 10, [
                ("a", 10, []),
                ("c", 11, [])
            ], {
                "a": ("a", 10, []),
                "b": ("c", 11, []),
                "c": ("c", 11, [])
            }),
            sequences.parse("seq-refs: ac")
        )

    def test_mutes_references_from_generating_labels(self):
        tree = sequences.parse("seq-mute-refs: ac")

        self.assertParse(
            ("ac", 15, [
                ("a", 15, []),
            ], {
                "a": ("a", 15, [])
            }),
            tree
        )
        self.assertFalse(hasattr(tree, 'c'))
</document_content>
</document>
<document index="84">
<source>test/python/terminals_test.py</source>
<document_content>from unittest import TestCase
from .parse_helper import ParseHelper
from grammars import terminals


class AnyCharTest(TestCase, ParseHelper):
    def test_parses_any_single_character(self):
        self.assertParse(("a", 5), terminals.parse("any: a"))
        self.assertParse(("!", 5), terminals.parse("any: !"))

    def test_rejects_the_empty_string(self):
        with self.assertRaises(terminals.ParseError):
            terminals.parse("any: ")

    def test_rejects_input_with_too_many_characters(self):
        with self.assertRaises(terminals.ParseError):
            terminals.parse("any: ab")


class CharClassTest(TestCase, ParseHelper):
    def test_parses_characters_within_the_class(self):
        self.assertParse(("x", 11), terminals.parse("pos-class: x"))

    def test_rejects_characters_outside_the_class(self):
        with self.assertRaises(terminals.ParseError):
            terminals.parse("pos-class: 0")

    def test_matches_characters_case_sensitively(self):
        with self.assertRaises(terminals.ParseError):
            terminals.parse("pos-class: A")

    def test_parses_characters_outside_a_negative_class(self):
        self.assertParse(("0", 11), terminals.parse("neg-class: 0"))

    def test_rejects_characters_within_a_negative_class(self):
        with self.assertRaises(terminals.ParseError):
            terminals.parse("neg-class: x")


class SingleQuotedStringTest(TestCase, ParseHelper):
    def test_parses_that_exact_string(self):
        self.assertParse(("oat", 7), terminals.parse("str-1: oat"))

    def test_matches_strings_case_sensitively(self):
        with self.assertRaises(terminals.ParseError):
            terminals.parse("str-1: OAT")

    def test_rejects_strings_with_additional_prefixes(self):
        with self.assertRaises(terminals.ParseError):
            terminals.parse("str-1: boat")

    def test_rejects_strings_with_additional_suffixes(self):
        with self.assertRaises(terminals.ParseError):
            terminals.parse("str-1: oath")

    def test_rejects_the_empty_string(self):
        with self.assertRaises(terminals.ParseError):
            terminals.parse("str-1: ")

    def test_rejects_prefixes_of_the_target_string(self):
        with self.assertRaises(terminals.ParseError):
            terminals.parse("str-1: oa")


class DoubleQuotedStringTest(TestCase, ParseHelper):
    def test_parses_that_exact_string(self):
        self.assertParse(("oat", 7), terminals.parse("str-2: oat"))

    def test_matches_strings_case_sensitively(self):
        with self.assertRaises(terminals.ParseError):
            terminals.parse("str-2: OAT")

    def test_rejects_strings_with_additional_prefixes(self):
        with self.assertRaises(terminals.ParseError):
            terminals.parse("str-2: boat")

    def test_rejects_strings_with_additional_suffixes(self):
        with self.assertRaises(terminals.ParseError):
            terminals.parse("str-2: oath")

    def test_rejects_the_empty_string(self):
        with self.assertRaises(terminals.ParseError):
            terminals.parse("str-2: ")

    def test_rejects_prefixes_of_the_target_string(self):
        with self.assertRaises(terminals.ParseError):
            terminals.parse("str-2: oa")


class CaseInsensitiveStringTest(TestCase, ParseHelper):
    def test_parses_that_exact_string(self):
        self.assertParse(("oat", 8), terminals.parse("str-ci: oat"))

    def test_matches_strings_case_insensitively(self):
        self.assertParse(("OAT", 8), terminals.parse("str-ci: OAT"))

    def test_rejects_strings_with_additional_prefixes(self):
        with self.assertRaises(terminals.ParseError):
            terminals.parse("str-ci: boat")

    def test_rejects_strings_with_additional_suffixes(self):
        with self.assertRaises(terminals.ParseError):
            terminals.parse("str-ci: oath")

    def test_rejects_the_empty_string(self):
        with self.assertRaises(terminals.ParseError):
            terminals.parse("str-ci: ")

    def test_rejects_prefixes_of_the_target_string(self):
        with self.assertRaises(terminals.ParseError):
            terminals.parse("str-ci: oa")
</document_content>
</document>
<document index="85">
<source>test/python/__init__.py</source>
<document_content></document_content>
</document>
</documents>
